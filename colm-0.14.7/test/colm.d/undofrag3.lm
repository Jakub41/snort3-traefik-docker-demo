context undo

	lex
		ignore /( ' ' | '\t' )+/
		literal `* `( `) `^ `; `.
		token NL /'\n'/
		token id /[a-zA-Z_]+/
	end

	Out: parser<out>

	def out_item
		[id]
	|	[`( item* `)]

	def out 
		[out_item*]

	def item 
		[id]
		{
			send Out [r1]
		}
	|	[`( item* `)]
		{
			send Out ['(']
			send Out [r2]
			send Out [')']
		}

	def A1 []
	def A2 []

	def F
		[]
		{
			print( xml( Out->finish() ) )
		}

	def start 
		[A1 item* F `. `^]
	|	[A2 item* F `. `; NL]

end # undo

Undo: undo = new undo()
Undo->Out = new parser<undo::out>( Undo )

parse Input: undo::start( Undo )[ stdin ]
print( Input )

##### IN #####
a . ;
##### EXP #####
<undo::out><undo::_repeat_out_item><undo::out_item><undo::id>a</undo::id></undo::out_item></undo::_repeat_out_item></undo::out><undo::out><undo::_repeat_out_item><undo::out_item><undo::id>a</undo::id></undo::out_item></undo::_repeat_out_item></undo::out>a . ;
