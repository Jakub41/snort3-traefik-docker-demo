#include "if.h"
#include <colm/tree.h>
#include <string.h>
::c_select_section start::c_select_section() { static int a[] = {1, 0, 0}; return ::c_select_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::_repeat_section start::SectionList() { static int a[] = {1, 0, 1}; return ::c_host::_repeat_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_select_section start::ruby_select_section() { static int a[] = {1, 1, 0}; return ::ruby_select_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::_repeat_section start::RSectionList() { static int a[] = {1, 1, 1}; return ::ruby_host::_repeat_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_select_section start::ocaml_select_section() { static int a[] = {1, 2, 0}; return ::ocaml_select_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::_repeat_section start::OSectionList() { static int a[] = {2, 2, 1, 3, 1}; return ::ocaml_host::_repeat_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_select_section start::crack_select_section() { static int a[] = {1, 3, 0}; return ::crack_select_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::number import_val::number() { static int a[] = {1, 0, 0}; return ::c_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::string import_val::string() { static int a[] = {1, 1, 0}; return ::c_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::ident import::Name() { static int a[] = {1, 0, 0}; return ::c_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::import_val import::Val() { static int a[] = {1, 0, 1}; return ::import_val( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::_inline_expr_reparse ragel::inline_expr_reparse::_inline_expr_reparse() { static int a[] = {1, 0, 0}; return ::ragel::_inline_expr_reparse( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_expr ragel::inline_expr_reparse::action_expr() { static int a[] = {1, 1, 0}; return ::ragel::action_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::join::_join() { static int a[] = {1, 0, 0}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression ragel::join::expression() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::expression( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expr_left ragel::expression::expr_left() { static int a[] = {1, 0, 0}; return ::ragel::expr_left( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression_op_list ragel::expression::expression_op_list() { static int a[] = {1, 0, 1}; return ::ragel::expression_op_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression_op ragel::expression_op_list::expression_op() { static int a[] = {1, 0, 0}; return ::ragel::expression_op( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression_op_list ragel::expression_op_list::_expression_op_list() { static int a[] = {1, 0, 1}; return ::ragel::expression_op_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term ragel::expression_op::term() { static int a[] = {4, 0, 1, 1, 1, 2, 1, 3, 1}; return ::ragel::term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term ragel::expr_left::term() { static int a[] = {1, 0, 0}; return ::ragel::term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term_left ragel::term::term_left() { static int a[] = {1, 0, 0}; return ::ragel::term_left( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term_op_list_short ragel::term::term_op_list_short() { static int a[] = {1, 0, 1}; return ::ragel::term_op_list_short( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_label ragel::term_left::factor_label() { static int a[] = {1, 0, 0}; return ::ragel::factor_label( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term_op ragel::term_op_list_short::term_op() { static int a[] = {1, 1, 0}; return ::ragel::term_op( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term_op_list_short ragel::term_op_list_short::_term_op_list_short() { static int a[] = {1, 1, 1}; return ::ragel::term_op_list_short( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_label ragel::term_op::factor_label() { static int a[] = {5, 0, 0, 1, 1, 2, 1, 3, 1, 4, 1}; return ::ragel::factor_label( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::factor_label::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_label ragel::factor_label::_factor_label() { static int a[] = {1, 0, 2}; return ::ragel::factor_label( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_ep ragel::factor_label::factor_ep() { static int a[] = {1, 1, 0}; return ::ragel::factor_ep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_aug ragel::factor_ep::factor_aug() { static int a[] = {2, 0, 0, 1, 0}; return ::ragel::factor_aug( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::epsilon_target ragel::factor_ep::epsilon_target() { static int a[] = {1, 0, 2}; return ::ragel::epsilon_target( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::epsilon_target ragel::epsilon_target::_epsilon_target() { static int a[] = {1, 0, 0}; return ::ragel::epsilon_target( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::epsilon_target::word() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_select ragel::action_expr::c_select() { static int a[] = {1, 0, 1}; return ::c_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::inline_expr ragel::action_expr::CInlineExpr() { static int a[] = {1, 0, 2}; return ::c_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_select ragel::action_expr::ruby_select() { static int a[] = {1, 1, 1}; return ::ruby_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::inline_expr ragel::action_expr::RubyInlineExpr() { static int a[] = {1, 1, 2}; return ::ruby_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_select ragel::action_expr::ocaml_select() { static int a[] = {1, 2, 1}; return ::ocaml_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::inline_expr ragel::action_expr::OCamlInlineExpr() { static int a[] = {1, 2, 2}; return ::ocaml_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_select ragel::action_expr::crack_select() { static int a[] = {1, 3, 1}; return ::crack_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::inline_expr ragel::action_expr::CrackInlineExpr() { static int a[] = {1, 3, 2}; return ::crack_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_select ragel::action_block::c_select() { static int a[] = {1, 0, 1}; return ::c_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::inline_block ragel::action_block::CInlineBlock() { static int a[] = {1, 0, 2}; return ::c_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_select ragel::action_block::ruby_select() { static int a[] = {1, 1, 1}; return ::ruby_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::inline_block ragel::action_block::RubyInlineBlock() { static int a[] = {1, 1, 2}; return ::ruby_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_select ragel::action_block::ocaml_select() { static int a[] = {1, 2, 1}; return ::ocaml_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::inline_block ragel::action_block::OCamlInlineBlock() { static int a[] = {1, 2, 2}; return ::ocaml_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_select ragel::action_block::crack_select() { static int a[] = {1, 3, 1}; return ::crack_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::inline_block ragel::action_block::CrackInlineBlock() { static int a[] = {1, 3, 2}; return ::crack_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_arg_list ragel::action_arg_list::_action_arg_list() { static int a[] = {1, 0, 0}; return ::ragel::action_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::action_arg_list::action_ref() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_arg_list ragel::opt_action_arg_list::action_arg_list() { static int a[] = {1, 0, 0}; return ::ragel::action_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::named_action_ref::word() { static int a[] = {2, 0, 0, 1, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_action_arg_list ragel::named_action_ref::opt_action_arg_list() { static int a[] = {1, 1, 2}; return ::ragel::opt_action_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::named_action_ref ragel::action_ref::named_action_ref() { static int a[] = {2, 0, 0, 1, 1}; return ::ragel::named_action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_block ragel::action_ref::action_block() { static int a[] = {1, 2, 0}; return ::ragel::action_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::priority_name::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::error_name::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::priority_aug::uint() { static int a[] = {3, 0, 0, 1, 1, 2, 1}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_aug ragel::factor_aug::_factor_aug() { static int a[] = {11, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0}; return ::ragel::factor_aug( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_base ragel::factor_aug::aug_base() { static int a[] = {3, 0, 1, 1, 1, 2, 1}; return ::ragel::aug_base( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::factor_aug::action_ref() { static int a[] = {9, 0, 2, 3, 2, 4, 3, 5, 2, 6, 2, 7, 2, 8, 2, 9, 2, 10, 5}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::priority_aug ragel::factor_aug::priority_aug() { static int a[] = {2, 1, 2, 2, 5}; return ::ragel::priority_aug( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::priority_name ragel::factor_aug::priority_name() { static int a[] = {1, 2, 3}; return ::ragel::priority_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_cond ragel::factor_aug::aug_cond() { static int a[] = {2, 3, 1, 4, 1}; return ::ragel::aug_cond( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_to_state ragel::factor_aug::aug_to_state() { static int a[] = {1, 5, 1}; return ::ragel::aug_to_state( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_from_state ragel::factor_aug::aug_from_state() { static int a[] = {1, 6, 1}; return ::ragel::aug_from_state( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_eof ragel::factor_aug::aug_eof() { static int a[] = {1, 7, 1}; return ::ragel::aug_eof( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_gbl_error ragel::factor_aug::aug_gbl_error() { static int a[] = {1, 8, 1}; return ::ragel::aug_gbl_error( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_local_error ragel::factor_aug::aug_local_error() { static int a[] = {2, 9, 1, 10, 1}; return ::ragel::aug_local_error( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::error_name ragel::factor_aug::error_name() { static int a[] = {1, 10, 3}; return ::ragel::error_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep ragel::factor_aug::factor_rep() { static int a[] = {1, 11, 0}; return ::ragel::factor_rep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_neg ragel::factor_rep::factor_neg() { static int a[] = {1, 0, 0}; return ::ragel::factor_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_op_list ragel::factor_rep::factor_rep_op_list() { static int a[] = {1, 0, 1}; return ::ragel::factor_rep_op_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_op ragel::factor_rep_op_list::factor_rep_op() { static int a[] = {1, 0, 0}; return ::ragel::factor_rep_op( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_op_list ragel::factor_rep_op_list::_factor_rep_op_list() { static int a[] = {1, 0, 1}; return ::ragel::factor_rep_op_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_num ragel::factor_rep_op::factor_rep_num() { static int a[] = {3, 4, 1, 5, 2, 6, 1}; return ::ragel::factor_rep_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_num ragel::factor_rep_op::LowRep() { static int a[] = {1, 7, 1}; return ::ragel::factor_rep_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_num ragel::factor_rep_op::HighRep() { static int a[] = {1, 7, 3}; return ::ragel::factor_rep_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::factor_rep_num::uint() { static int a[] = {1, 0, 0}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_neg ragel::factor_neg::_factor_neg() { static int a[] = {2, 0, 1, 1, 1}; return ::ragel::factor_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor ragel::factor_neg::factor() { static int a[] = {1, 2, 0}; return ::ragel::factor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::opt_max_arg::action_ref() { static int a[] = {1, 0, 1}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::alphabet_num ragel::factor::alphabet_num() { static int a[] = {1, 0, 0}; return ::ragel::alphabet_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::factor::word() { static int a[] = {1, 1, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::string ragel::factor::string() { static int a[] = {1, 2, 0}; return ::ragel::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lex_sqopen_pos ragel::factor::lex_sqopen_pos() { static int a[] = {1, 3, 0}; return ::ragel::lex_sqopen_pos( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_or_data ragel::factor::reg_or_data() { static int a[] = {2, 3, 1, 4, 1}; return ::ragel::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_sqclose ragel::factor::re_or_sqclose() { static int a[] = {2, 3, 2, 4, 2}; return ::ragel::re_or_sqclose( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lex_sqopen_neg ragel::factor::lex_sqopen_neg() { static int a[] = {1, 4, 0}; return ::ragel::lex_sqopen_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lex_regex_open ragel::factor::lex_regex_open() { static int a[] = {1, 5, 0}; return ::ragel::lex_regex_open( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::regex ragel::factor::regex() { static int a[] = {1, 5, 1}; return ::ragel::regex( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_close ragel::factor::re_close() { static int a[] = {1, 5, 2}; return ::ragel::re_close( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::range_lit ragel::factor::RL1() { static int a[] = {2, 6, 0, 7, 0}; return ::ragel::range_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::range_lit ragel::factor::RL2() { static int a[] = {2, 6, 2, 7, 2}; return ::ragel::range_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfastar ragel::factor::nfastar() { static int a[] = {1, 8, 0}; return ::ragel::nfastar( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression ragel::factor::expression() { static int a[] = {2, 8, 2, 9, 2}; return ::ragel::expression( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::factor::Push() { static int a[] = {1, 8, 4}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::factor::Pop() { static int a[] = {1, 8, 6}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::factor::Init() { static int a[] = {2, 8, 8, 9, 4}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::factor::Stay() { static int a[] = {1, 8, 10}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::factor::Repeat() { static int a[] = {1, 8, 12}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::factor::Exit() { static int a[] = {1, 8, 14}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::colon_cond ragel::factor::colon_cond() { static int a[] = {1, 9, 0}; return ::ragel::colon_cond( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::factor::Inc() { static int a[] = {1, 9, 6}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::factor::Min() { static int a[] = {1, 9, 8}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_max_arg ragel::factor::OptMax() { static int a[] = {1, 9, 9}; return ::ragel::opt_max_arg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::factor::join() { static int a[] = {1, 10, 1}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_item_rep_list ragel::regex::reg_item_rep_list() { static int a[] = {1, 0, 0}; return ::ragel::reg_item_rep_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_item_rep_list ragel::reg_item_rep_list::_reg_item_rep_list() { static int a[] = {1, 0, 0}; return ::ragel::reg_item_rep_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_item_rep ragel::reg_item_rep_list::reg_item_rep() { static int a[] = {1, 0, 1}; return ::ragel::reg_item_rep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_item ragel::reg_item_rep::reg_item() { static int a[] = {2, 0, 0, 1, 0}; return ::ragel::reg_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_star ragel::reg_item_rep::re_star() { static int a[] = {1, 0, 1}; return ::ragel::re_star( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_sqopen_pos ragel::reg_item::re_sqopen_pos() { static int a[] = {1, 0, 0}; return ::ragel::re_sqopen_pos( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_or_data ragel::reg_item::reg_or_data() { static int a[] = {2, 0, 1, 1, 1}; return ::ragel::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_sqclose ragel::reg_item::re_or_sqclose() { static int a[] = {2, 0, 2, 1, 2}; return ::ragel::re_or_sqclose( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_sqopen_neg ragel::reg_item::re_sqopen_neg() { static int a[] = {1, 1, 0}; return ::ragel::re_sqopen_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_dot ragel::reg_item::re_dot() { static int a[] = {1, 2, 0}; return ::ragel::re_dot( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_char ragel::reg_item::re_char() { static int a[] = {1, 3, 0}; return ::ragel::re_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_or_data ragel::reg_or_data::_reg_or_data() { static int a[] = {1, 0, 0}; return ::ragel::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_or_char ragel::reg_or_data::reg_or_char() { static int a[] = {1, 0, 1}; return ::ragel::reg_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_char ragel::reg_or_char::re_or_char() { static int a[] = {1, 0, 0}; return ::ragel::re_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_char ragel::reg_or_char::Low() { static int a[] = {1, 1, 0}; return ::ragel::re_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_dash ragel::reg_or_char::re_or_dash() { static int a[] = {1, 1, 1}; return ::ragel::re_or_dash( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_char ragel::reg_or_char::High() { static int a[] = {1, 1, 2}; return ::ragel::re_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::string ragel::range_lit::string() { static int a[] = {1, 0, 0}; return ::ragel::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::alphabet_num ragel::range_lit::alphabet_num() { static int a[] = {1, 1, 0}; return ::ragel::alphabet_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::alphabet_num::uint() { static int a[] = {2, 0, 0, 1, 1}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::hex ragel::alphabet_num::hex() { static int a[] = {1, 2, 0}; return ::ragel::hex( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::lm_act::action_ref() { static int a[] = {1, 0, 1}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_block ragel::lm_act::action_block() { static int a[] = {1, 1, 0}; return ::ragel::action_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm_act ragel::opt_lm_act::lm_act() { static int a[] = {1, 0, 0}; return ::ragel::lm_act( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::lm_stmt::join() { static int a[] = {1, 0, 0}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_lm_act ragel::lm_stmt::opt_lm_act() { static int a[] = {1, 0, 1}; return ::ragel::opt_lm_act( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::assignment ragel::lm_stmt::assignment() { static int a[] = {1, 1, 0}; return ::ragel::assignment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_spec ragel::lm_stmt::action_spec() { static int a[] = {1, 2, 0}; return ::ragel::action_spec( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm_stmt_list ragel::lm_stmt_list::_lm_stmt_list() { static int a[] = {1, 0, 0}; return ::ragel::lm_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm_stmt ragel::lm_stmt_list::lm_stmt() { static int a[] = {2, 0, 1, 1, 0}; return ::ragel::lm_stmt( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::lm::join() { static int a[] = {1, 0, 0}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm_stmt_list ragel::lm::lm_stmt_list() { static int a[] = {1, 1, 1}; return ::ragel::lm_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::action_param::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_param_list ragel::action_param_list::_action_param_list() { static int a[] = {1, 0, 0}; return ::ragel::action_param_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_param ragel::action_param_list::action_param() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::action_param( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_param_list ragel::opt_action_param_list::action_param_list() { static int a[] = {1, 0, 0}; return ::ragel::action_param_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_action_param_list ragel::action_params::opt_action_param_list() { static int a[] = {1, 0, 1}; return ::ragel::opt_action_param_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::action_spec::word() { static int a[] = {2, 0, 1, 1, 1}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_params ragel::action_spec::action_params() { static int a[] = {1, 0, 2}; return ::ragel::action_params( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_block ragel::action_spec::action_block() { static int a[] = {2, 0, 3, 1, 2}; return ::ragel::action_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::def_name::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_export ragel::assignment::opt_export() { static int a[] = {1, 0, 0}; return ::ragel::opt_export( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::def_name ragel::assignment::def_name() { static int a[] = {1, 0, 1}; return ::ragel::def_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::assignment::join() { static int a[] = {1, 0, 3}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_export ragel::instantiation::opt_export() { static int a[] = {1, 0, 0}; return ::ragel::opt_export( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::def_name ragel::instantiation::def_name() { static int a[] = {1, 0, 1}; return ::ragel::def_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm ragel::instantiation::lm() { static int a[] = {1, 0, 3}; return ::ragel::lm( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_expr ragel::nfa_expr::_nfa_expr() { static int a[] = {1, 0, 0}; return ::ragel::nfa_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term ragel::nfa_expr::term() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::nfa_round_spec::Depth() { static int a[] = {1, 0, 0}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::nfa_round_spec::Group() { static int a[] = {1, 0, 2}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_round_list ragel::nfa_round_list::_nfa_round_list() { static int a[] = {1, 0, 0}; return ::ragel::nfa_round_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_round_spec ragel::nfa_round_list::nfa_round_spec() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::nfa_round_spec( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_round_list ragel::nfa_rounds::nfa_round_list() { static int a[] = {1, 0, 1}; return ::ragel::nfa_round_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::def_name ragel::nfa_union::def_name() { static int a[] = {1, 0, 0}; return ::ragel::def_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_rounds ragel::nfa_union::nfa_rounds() { static int a[] = {1, 0, 2}; return ::ragel::nfa_rounds( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_expr ragel::nfa_union::nfa_expr() { static int a[] = {1, 0, 3}; return ::ragel::nfa_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::alphtype_type::W1() { static int a[] = {2, 0, 0, 1, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::alphtype_type::W2() { static int a[] = {1, 1, 1}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::include_spec::word() { static int a[] = {2, 0, 0, 2, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::string ragel::include_spec::string() { static int a[] = {2, 1, 0, 2, 1}; return ::ragel::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::write_arg::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::machine_name::word() { static int a[] = {1, 0, 1}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::assignment ragel::statement::assignment() { static int a[] = {1, 0, 0}; return ::ragel::assignment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::instantiation ragel::statement::instantiation() { static int a[] = {1, 1, 0}; return ::ragel::instantiation( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_union ragel::statement::nfa_union() { static int a[] = {1, 2, 0}; return ::ragel::nfa_union( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_spec ragel::statement::action_spec() { static int a[] = {1, 3, 0}; return ::ragel::action_spec( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_block ragel::statement::action_block() { static int a[] = {4, 4, 1, 5, 1, 13, 1, 14, 1}; return ::ragel::action_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::variable_name ragel::statement::variable_name() { static int a[] = {1, 6, 1}; return ::ragel::variable_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::inline_expr_reparse ragel::statement::inline_expr_reparse() { static int a[] = {3, 6, 2, 8, 1, 10, 1}; return ::ragel::inline_expr_reparse( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::alphtype_type ragel::statement::alphtype_type() { static int a[] = {1, 7, 1}; return ::ragel::alphtype_type( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::statement::Cmd() { static int a[] = {1, 9, 1}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::_repeat_write_arg ragel::statement::ArgList() { static int a[] = {1, 9, 2}; return ::ragel::_repeat_write_arg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::string ragel::statement::string() { static int a[] = {1, 11, 1}; return ::ragel::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::include_spec ragel::statement::include_spec() { static int a[] = {1, 12, 1}; return ::ragel::include_spec( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::machine_name ragel::opt_machine_name::machine_name() { static int a[] = {1, 0, 0}; return ::ragel::machine_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_machine_name ragel::ragel_start::opt_machine_name() { static int a[] = {1, 0, 0}; return ::ragel::opt_machine_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::_repeat_statement ragel::ragel_start::_repeat_statement() { static int a[] = {1, 0, 1}; return ::ragel::_repeat_statement( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_item_list c_inline::inline_expr::expr_item_list() { static int a[] = {1, 0, 0}; return ::c_inline::expr_item_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_item_list c_inline::expr_item_list::_expr_item_list() { static int a[] = {1, 0, 0}; return ::c_inline::expr_item_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_item c_inline::expr_item_list::expr_item() { static int a[] = {1, 0, 1}; return ::c_inline::expr_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_any c_inline::expr_item::expr_any() { static int a[] = {1, 0, 0}; return ::c_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_symbol c_inline::expr_item::expr_symbol() { static int a[] = {1, 1, 0}; return ::c_inline::expr_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_interpret c_inline::expr_item::expr_interpret() { static int a[] = {1, 2, 0}; return ::c_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::whitespace c_inline::expr_any::whitespace() { static int a[] = {1, 0, 0}; return ::c_inline::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::comment c_inline::expr_any::comment() { static int a[] = {1, 1, 0}; return ::c_inline::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::string c_inline::expr_any::string() { static int a[] = {1, 2, 0}; return ::c_inline::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::number c_inline::expr_any::number() { static int a[] = {1, 3, 0}; return ::c_inline::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::hex_number c_inline::expr_any::hex_number() { static int a[] = {1, 4, 0}; return ::c_inline::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::ident c_inline::expr_any::ident() { static int a[] = {1, 5, 0}; return ::c_inline::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::c_any c_inline::expr_any::c_any() { static int a[] = {1, 6, 0}; return ::c_inline::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::state_ref c_inline::expr_interpret::state_ref() { static int a[] = {1, 4, 2}; return ::c_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::var_ref c_inline::expr_interpret::var_ref() { static int a[] = {1, 5, 0}; return ::c_inline::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::opt_name_sep c_inline::state_ref::opt_name_sep() { static int a[] = {1, 0, 0}; return ::c_inline::opt_name_sep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::state_ref_names c_inline::state_ref::state_ref_names() { static int a[] = {1, 0, 1}; return ::c_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::state_ref_names c_inline::state_ref_names::_state_ref_names() { static int a[] = {1, 0, 0}; return ::c_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::srlex::word c_inline::state_ref_names::word() { static int a[] = {2, 0, 2, 1, 0}; return ::srlex::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_item_list c_inline::inline_block::block_item_list() { static int a[] = {1, 0, 0}; return ::c_inline::block_item_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_item c_inline::block_item_list::block_item() { static int a[] = {1, 0, 0}; return ::c_inline::block_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_item_list c_inline::block_item_list::_block_item_list() { static int a[] = {1, 0, 1}; return ::c_inline::block_item_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_any c_inline::block_item::expr_any() { static int a[] = {1, 0, 0}; return ::c_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_symbol c_inline::block_item::block_symbol() { static int a[] = {1, 1, 0}; return ::c_inline::block_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_interpret c_inline::block_item::block_interpret() { static int a[] = {1, 2, 0}; return ::c_inline::block_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::inline_block c_inline::block_item::inline_block() { static int a[] = {1, 3, 1}; return ::c_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_interpret c_inline::block_interpret::expr_interpret() { static int a[] = {1, 0, 0}; return ::c_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::_opt_whitespace c_inline::block_interpret::_opt_whitespace() { static int a[] = {5, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1}; return ::c_inline::_opt_whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::inline_expr c_inline::block_interpret::inline_expr() { static int a[] = {5, 2, 3, 3, 3, 4, 3, 5, 3, 6, 1}; return ::c_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::state_ref c_inline::block_interpret::state_ref() { static int a[] = {4, 7, 1, 8, 1, 9, 1, 10, 1}; return ::c_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::ident c_host::tok::ident() { static int a[] = {1, 0, 0}; return ::c_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::number c_host::tok::number() { static int a[] = {1, 1, 0}; return ::c_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::hex_number c_host::tok::hex_number() { static int a[] = {1, 2, 0}; return ::c_host::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::comment c_host::tok::comment() { static int a[] = {1, 3, 0}; return ::c_host::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::string c_host::tok::string() { static int a[] = {1, 4, 0}; return ::c_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::whitespace c_host::tok::whitespace() { static int a[] = {1, 5, 0}; return ::c_host::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::c_any c_host::tok::c_any() { static int a[] = {1, 6, 0}; return ::c_host::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::ragel_start c_host::section::ragel_start() { static int a[] = {1, 0, 1}; return ::ragel::ragel_start( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::tok c_host::section::tok() { static int a[] = {1, 1, 0}; return ::c_host::tok( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::_repeat_expr_item ocaml_inline::inline_expr::_repeat_expr_item() { static int a[] = {1, 0, 0}; return ::ocaml_inline::_repeat_expr_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_any ocaml_inline::expr_item::expr_any() { static int a[] = {1, 0, 0}; return ::ocaml_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_symbol ocaml_inline::expr_item::expr_symbol() { static int a[] = {1, 1, 0}; return ::ocaml_inline::expr_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_interpret ocaml_inline::expr_item::expr_interpret() { static int a[] = {1, 2, 0}; return ::ocaml_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::whitespace ocaml_inline::expr_any::whitespace() { static int a[] = {1, 0, 0}; return ::ocaml_inline::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::comment ocaml_inline::expr_any::comment() { static int a[] = {1, 1, 0}; return ::ocaml_inline::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::string ocaml_inline::expr_any::string() { static int a[] = {1, 2, 0}; return ::ocaml_inline::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::number ocaml_inline::expr_any::number() { static int a[] = {1, 3, 0}; return ::ocaml_inline::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::hex_number ocaml_inline::expr_any::hex_number() { static int a[] = {1, 4, 0}; return ::ocaml_inline::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::ident ocaml_inline::expr_any::ident() { static int a[] = {1, 5, 0}; return ::ocaml_inline::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::c_any ocaml_inline::expr_any::c_any() { static int a[] = {1, 6, 0}; return ::ocaml_inline::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::state_ref ocaml_inline::expr_interpret::state_ref() { static int a[] = {1, 4, 2}; return ::ocaml_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::opt_name_sep ocaml_inline::state_ref::opt_name_sep() { static int a[] = {1, 0, 0}; return ::ocaml_inline::opt_name_sep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::state_ref_names ocaml_inline::state_ref::state_ref_names() { static int a[] = {1, 0, 1}; return ::ocaml_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::state_ref_names ocaml_inline::state_ref_names::_state_ref_names() { static int a[] = {1, 0, 0}; return ::ocaml_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::srlex::word ocaml_inline::state_ref_names::word() { static int a[] = {2, 0, 2, 1, 0}; return ::srlex::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::_repeat_block_item ocaml_inline::inline_block::_repeat_block_item() { static int a[] = {1, 0, 0}; return ::ocaml_inline::_repeat_block_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_any ocaml_inline::block_item::expr_any() { static int a[] = {1, 0, 0}; return ::ocaml_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::block_symbol ocaml_inline::block_item::block_symbol() { static int a[] = {1, 1, 0}; return ::ocaml_inline::block_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::block_interpret ocaml_inline::block_item::block_interpret() { static int a[] = {1, 2, 0}; return ::ocaml_inline::block_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::inline_block ocaml_inline::block_item::inline_block() { static int a[] = {1, 3, 1}; return ::ocaml_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_interpret ocaml_inline::block_interpret::expr_interpret() { static int a[] = {1, 0, 0}; return ::ocaml_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::_opt_whitespace ocaml_inline::block_interpret::_opt_whitespace() { static int a[] = {5, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1}; return ::ocaml_inline::_opt_whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::inline_expr ocaml_inline::block_interpret::inline_expr() { static int a[] = {5, 2, 3, 3, 3, 4, 3, 5, 3, 6, 1}; return ::ocaml_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::state_ref ocaml_inline::block_interpret::state_ref() { static int a[] = {4, 7, 1, 8, 1, 9, 1, 10, 1}; return ::ocaml_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::ident ocaml_host::tok::ident() { static int a[] = {1, 0, 0}; return ::ocaml_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::number ocaml_host::tok::number() { static int a[] = {1, 1, 0}; return ::ocaml_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::hex_number ocaml_host::tok::hex_number() { static int a[] = {1, 2, 0}; return ::ocaml_host::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::comment ocaml_host::tok::comment() { static int a[] = {1, 3, 0}; return ::ocaml_host::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::string ocaml_host::tok::string() { static int a[] = {1, 4, 0}; return ::ocaml_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::whitespace ocaml_host::tok::whitespace() { static int a[] = {1, 5, 0}; return ::ocaml_host::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::ocaml_any ocaml_host::tok::ocaml_any() { static int a[] = {1, 6, 0}; return ::ocaml_host::ocaml_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::ragel_start ocaml_host::section::ragel_start() { static int a[] = {1, 0, 1}; return ::ragel::ragel_start( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::tok ocaml_host::section::tok() { static int a[] = {1, 1, 0}; return ::ocaml_host::tok( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::_repeat_expr_item ruby_inline::inline_expr::_repeat_expr_item() { static int a[] = {1, 0, 0}; return ::ruby_inline::_repeat_expr_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_any ruby_inline::expr_item::expr_any() { static int a[] = {1, 0, 0}; return ::ruby_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_symbol ruby_inline::expr_item::expr_symbol() { static int a[] = {1, 1, 0}; return ::ruby_inline::expr_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_interpret ruby_inline::expr_item::expr_interpret() { static int a[] = {1, 2, 0}; return ::ruby_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::whitespace ruby_inline::expr_any::whitespace() { static int a[] = {1, 0, 0}; return ::ruby_inline::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::comment ruby_inline::expr_any::comment() { static int a[] = {1, 1, 0}; return ::ruby_inline::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::string ruby_inline::expr_any::string() { static int a[] = {1, 2, 0}; return ::ruby_inline::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::number ruby_inline::expr_any::number() { static int a[] = {1, 3, 0}; return ::ruby_inline::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::hex_number ruby_inline::expr_any::hex_number() { static int a[] = {1, 4, 0}; return ::ruby_inline::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::ident ruby_inline::expr_any::ident() { static int a[] = {1, 5, 0}; return ::ruby_inline::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::ruby_any ruby_inline::expr_any::ruby_any() { static int a[] = {1, 6, 0}; return ::ruby_inline::ruby_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::state_ref ruby_inline::expr_interpret::state_ref() { static int a[] = {1, 4, 2}; return ::ruby_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::opt_name_sep ruby_inline::state_ref::opt_name_sep() { static int a[] = {1, 0, 0}; return ::ruby_inline::opt_name_sep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::state_ref_names ruby_inline::state_ref::state_ref_names() { static int a[] = {1, 0, 1}; return ::ruby_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::state_ref_names ruby_inline::state_ref_names::_state_ref_names() { static int a[] = {1, 0, 0}; return ::ruby_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::srlex::word ruby_inline::state_ref_names::word() { static int a[] = {2, 0, 2, 1, 0}; return ::srlex::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::_repeat_block_item ruby_inline::inline_block::_repeat_block_item() { static int a[] = {1, 0, 0}; return ::ruby_inline::_repeat_block_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_any ruby_inline::block_item::expr_any() { static int a[] = {1, 0, 0}; return ::ruby_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::block_symbol ruby_inline::block_item::block_symbol() { static int a[] = {1, 1, 0}; return ::ruby_inline::block_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::block_interpret ruby_inline::block_item::block_interpret() { static int a[] = {1, 2, 0}; return ::ruby_inline::block_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::inline_block ruby_inline::block_item::inline_block() { static int a[] = {1, 3, 1}; return ::ruby_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_interpret ruby_inline::block_interpret::expr_interpret() { static int a[] = {1, 0, 0}; return ::ruby_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::_opt_whitespace ruby_inline::block_interpret::_opt_whitespace() { static int a[] = {5, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1}; return ::ruby_inline::_opt_whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::inline_expr ruby_inline::block_interpret::inline_expr() { static int a[] = {5, 2, 3, 3, 3, 4, 3, 5, 3, 6, 1}; return ::ruby_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::state_ref ruby_inline::block_interpret::state_ref() { static int a[] = {4, 7, 1, 8, 1, 9, 1, 10, 1}; return ::ruby_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::ident ruby_host::tok::ident() { static int a[] = {1, 0, 0}; return ::ruby_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::number ruby_host::tok::number() { static int a[] = {1, 1, 0}; return ::ruby_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::hex_number ruby_host::tok::hex_number() { static int a[] = {1, 2, 0}; return ::ruby_host::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::comment ruby_host::tok::comment() { static int a[] = {1, 3, 0}; return ::ruby_host::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::string ruby_host::tok::string() { static int a[] = {1, 4, 0}; return ::ruby_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::whitespace ruby_host::tok::whitespace() { static int a[] = {1, 5, 0}; return ::ruby_host::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::ruby_any ruby_host::tok::ruby_any() { static int a[] = {1, 6, 0}; return ::ruby_host::ruby_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::ragel_start ruby_host::section::ragel_start() { static int a[] = {1, 0, 1}; return ::ragel::ragel_start( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::tok ruby_host::section::tok() { static int a[] = {1, 1, 0}; return ::ruby_host::tok( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::_repeat_expr_item crack_inline::inline_expr::_repeat_expr_item() { static int a[] = {1, 0, 0}; return ::crack_inline::_repeat_expr_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_any crack_inline::expr_item::expr_any() { static int a[] = {1, 0, 0}; return ::crack_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_symbol crack_inline::expr_item::expr_symbol() { static int a[] = {1, 1, 0}; return ::crack_inline::expr_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_interpret crack_inline::expr_item::expr_interpret() { static int a[] = {1, 2, 0}; return ::crack_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::whitespace crack_inline::expr_any::whitespace() { static int a[] = {1, 0, 0}; return ::crack_inline::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::comment crack_inline::expr_any::comment() { static int a[] = {1, 1, 0}; return ::crack_inline::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::string crack_inline::expr_any::string() { static int a[] = {1, 2, 0}; return ::crack_inline::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::number crack_inline::expr_any::number() { static int a[] = {1, 3, 0}; return ::crack_inline::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::hex_number crack_inline::expr_any::hex_number() { static int a[] = {1, 4, 0}; return ::crack_inline::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::ident crack_inline::expr_any::ident() { static int a[] = {1, 5, 0}; return ::crack_inline::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::c_any crack_inline::expr_any::c_any() { static int a[] = {1, 6, 0}; return ::crack_inline::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::state_ref crack_inline::expr_interpret::state_ref() { static int a[] = {1, 4, 2}; return ::crack_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::opt_name_sep crack_inline::state_ref::opt_name_sep() { static int a[] = {1, 0, 0}; return ::crack_inline::opt_name_sep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::state_ref_names crack_inline::state_ref::state_ref_names() { static int a[] = {1, 0, 1}; return ::crack_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::state_ref_names crack_inline::state_ref_names::_state_ref_names() { static int a[] = {1, 0, 0}; return ::crack_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::srlex::word crack_inline::state_ref_names::word() { static int a[] = {2, 0, 2, 1, 0}; return ::srlex::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::_repeat_block_item crack_inline::inline_block::_repeat_block_item() { static int a[] = {1, 0, 0}; return ::crack_inline::_repeat_block_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_any crack_inline::block_item::expr_any() { static int a[] = {1, 0, 0}; return ::crack_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::block_symbol crack_inline::block_item::block_symbol() { static int a[] = {1, 1, 0}; return ::crack_inline::block_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::block_interpret crack_inline::block_item::block_interpret() { static int a[] = {1, 2, 0}; return ::crack_inline::block_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::inline_block crack_inline::block_item::inline_block() { static int a[] = {1, 3, 1}; return ::crack_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_interpret crack_inline::block_interpret::expr_interpret() { static int a[] = {1, 0, 0}; return ::crack_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::_opt_whitespace crack_inline::block_interpret::_opt_whitespace() { static int a[] = {5, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1}; return ::crack_inline::_opt_whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::inline_expr crack_inline::block_interpret::inline_expr() { static int a[] = {5, 2, 3, 3, 3, 4, 3, 5, 3, 6, 1}; return ::crack_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::state_ref crack_inline::block_interpret::state_ref() { static int a[] = {4, 7, 1, 8, 1, 9, 1, 10, 1}; return ::crack_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::ident crack_host::tok::ident() { static int a[] = {1, 0, 0}; return ::crack_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::number crack_host::tok::number() { static int a[] = {1, 1, 0}; return ::crack_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::hex_number crack_host::tok::hex_number() { static int a[] = {1, 2, 0}; return ::crack_host::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::comment crack_host::tok::comment() { static int a[] = {1, 3, 0}; return ::crack_host::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::string crack_host::tok::string() { static int a[] = {1, 4, 0}; return ::crack_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::whitespace crack_host::tok::whitespace() { static int a[] = {1, 5, 0}; return ::crack_host::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::c_any crack_host::tok::c_any() { static int a[] = {1, 6, 0}; return ::crack_host::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::ragel_start crack_host::section::ragel_start() { static int a[] = {1, 0, 1}; return ::ragel::ragel_start( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::tok crack_host::section::tok() { static int a[] = {1, 1, 0}; return ::crack_host::tok( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_select_section _T_start::c_select_section() { static int a[] = {1, 0, 0}; return ::c_select_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::_repeat_section _T_start::SectionList() { static int a[] = {1, 0, 1}; return ::c_host::_repeat_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_select_section _T_start::ruby_select_section() { static int a[] = {1, 1, 0}; return ::ruby_select_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::_repeat_section _T_start::RSectionList() { static int a[] = {1, 1, 1}; return ::ruby_host::_repeat_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_select_section _T_start::ocaml_select_section() { static int a[] = {1, 2, 0}; return ::ocaml_select_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::_repeat_section _T_start::OSectionList() { static int a[] = {2, 2, 1, 3, 1}; return ::ocaml_host::_repeat_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_select_section _T_start::crack_select_section() { static int a[] = {1, 3, 0}; return ::crack_select_section( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::number _T_import_val::number() { static int a[] = {1, 0, 0}; return ::c_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::string _T_import_val::string() { static int a[] = {1, 1, 0}; return ::c_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::ident _T_import::Name() { static int a[] = {1, 0, 0}; return ::c_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::import_val _T_import::Val() { static int a[] = {1, 0, 1}; return ::import_val( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::_inline_expr_reparse ragel::_T_inline_expr_reparse::_inline_expr_reparse() { static int a[] = {1, 0, 0}; return ::ragel::_inline_expr_reparse( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_expr ragel::_T_inline_expr_reparse::action_expr() { static int a[] = {1, 1, 0}; return ::ragel::action_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::_T_join::_join() { static int a[] = {1, 0, 0}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression ragel::_T_join::expression() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::expression( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expr_left ragel::_T_expression::expr_left() { static int a[] = {1, 0, 0}; return ::ragel::expr_left( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression_op_list ragel::_T_expression::expression_op_list() { static int a[] = {1, 0, 1}; return ::ragel::expression_op_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression_op ragel::_T_expression_op_list::expression_op() { static int a[] = {1, 0, 0}; return ::ragel::expression_op( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression_op_list ragel::_T_expression_op_list::_expression_op_list() { static int a[] = {1, 0, 1}; return ::ragel::expression_op_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term ragel::_T_expression_op::term() { static int a[] = {4, 0, 1, 1, 1, 2, 1, 3, 1}; return ::ragel::term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term ragel::_T_expr_left::term() { static int a[] = {1, 0, 0}; return ::ragel::term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term_left ragel::_T_term::term_left() { static int a[] = {1, 0, 0}; return ::ragel::term_left( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term_op_list_short ragel::_T_term::term_op_list_short() { static int a[] = {1, 0, 1}; return ::ragel::term_op_list_short( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_label ragel::_T_term_left::factor_label() { static int a[] = {1, 0, 0}; return ::ragel::factor_label( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term_op ragel::_T_term_op_list_short::term_op() { static int a[] = {1, 1, 0}; return ::ragel::term_op( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term_op_list_short ragel::_T_term_op_list_short::_term_op_list_short() { static int a[] = {1, 1, 1}; return ::ragel::term_op_list_short( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_label ragel::_T_term_op::factor_label() { static int a[] = {5, 0, 0, 1, 1, 2, 1, 3, 1, 4, 1}; return ::ragel::factor_label( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_factor_label::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_label ragel::_T_factor_label::_factor_label() { static int a[] = {1, 0, 2}; return ::ragel::factor_label( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_ep ragel::_T_factor_label::factor_ep() { static int a[] = {1, 1, 0}; return ::ragel::factor_ep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_aug ragel::_T_factor_ep::factor_aug() { static int a[] = {2, 0, 0, 1, 0}; return ::ragel::factor_aug( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::epsilon_target ragel::_T_factor_ep::epsilon_target() { static int a[] = {1, 0, 2}; return ::ragel::epsilon_target( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::epsilon_target ragel::_T_epsilon_target::_epsilon_target() { static int a[] = {1, 0, 0}; return ::ragel::epsilon_target( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_epsilon_target::word() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_select ragel::_T_action_expr::c_select() { static int a[] = {1, 0, 1}; return ::c_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::inline_expr ragel::_T_action_expr::CInlineExpr() { static int a[] = {1, 0, 2}; return ::c_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_select ragel::_T_action_expr::ruby_select() { static int a[] = {1, 1, 1}; return ::ruby_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::inline_expr ragel::_T_action_expr::RubyInlineExpr() { static int a[] = {1, 1, 2}; return ::ruby_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_select ragel::_T_action_expr::ocaml_select() { static int a[] = {1, 2, 1}; return ::ocaml_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::inline_expr ragel::_T_action_expr::OCamlInlineExpr() { static int a[] = {1, 2, 2}; return ::ocaml_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_select ragel::_T_action_expr::crack_select() { static int a[] = {1, 3, 1}; return ::crack_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::inline_expr ragel::_T_action_expr::CrackInlineExpr() { static int a[] = {1, 3, 2}; return ::crack_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_select ragel::_T_action_block::c_select() { static int a[] = {1, 0, 1}; return ::c_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::inline_block ragel::_T_action_block::CInlineBlock() { static int a[] = {1, 0, 2}; return ::c_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_select ragel::_T_action_block::ruby_select() { static int a[] = {1, 1, 1}; return ::ruby_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::inline_block ragel::_T_action_block::RubyInlineBlock() { static int a[] = {1, 1, 2}; return ::ruby_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_select ragel::_T_action_block::ocaml_select() { static int a[] = {1, 2, 1}; return ::ocaml_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::inline_block ragel::_T_action_block::OCamlInlineBlock() { static int a[] = {1, 2, 2}; return ::ocaml_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_select ragel::_T_action_block::crack_select() { static int a[] = {1, 3, 1}; return ::crack_select( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::inline_block ragel::_T_action_block::CrackInlineBlock() { static int a[] = {1, 3, 2}; return ::crack_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_arg_list ragel::_T_action_arg_list::_action_arg_list() { static int a[] = {1, 0, 0}; return ::ragel::action_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_action_arg_list::action_ref() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_arg_list ragel::_T_opt_action_arg_list::action_arg_list() { static int a[] = {1, 0, 0}; return ::ragel::action_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_named_action_ref::word() { static int a[] = {2, 0, 0, 1, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_action_arg_list ragel::_T_named_action_ref::opt_action_arg_list() { static int a[] = {1, 1, 2}; return ::ragel::opt_action_arg_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::named_action_ref ragel::_T_action_ref::named_action_ref() { static int a[] = {2, 0, 0, 1, 1}; return ::ragel::named_action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_block ragel::_T_action_ref::action_block() { static int a[] = {1, 2, 0}; return ::ragel::action_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_priority_name::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_error_name::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::_T_priority_aug::uint() { static int a[] = {3, 0, 0, 1, 1, 2, 1}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_aug ragel::_T_factor_aug::_factor_aug() { static int a[] = {11, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0}; return ::ragel::factor_aug( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_base ragel::_T_factor_aug::aug_base() { static int a[] = {3, 0, 1, 1, 1, 2, 1}; return ::ragel::aug_base( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_factor_aug::action_ref() { static int a[] = {9, 0, 2, 3, 2, 4, 3, 5, 2, 6, 2, 7, 2, 8, 2, 9, 2, 10, 5}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::priority_aug ragel::_T_factor_aug::priority_aug() { static int a[] = {2, 1, 2, 2, 5}; return ::ragel::priority_aug( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::priority_name ragel::_T_factor_aug::priority_name() { static int a[] = {1, 2, 3}; return ::ragel::priority_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_cond ragel::_T_factor_aug::aug_cond() { static int a[] = {2, 3, 1, 4, 1}; return ::ragel::aug_cond( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_to_state ragel::_T_factor_aug::aug_to_state() { static int a[] = {1, 5, 1}; return ::ragel::aug_to_state( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_from_state ragel::_T_factor_aug::aug_from_state() { static int a[] = {1, 6, 1}; return ::ragel::aug_from_state( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_eof ragel::_T_factor_aug::aug_eof() { static int a[] = {1, 7, 1}; return ::ragel::aug_eof( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_gbl_error ragel::_T_factor_aug::aug_gbl_error() { static int a[] = {1, 8, 1}; return ::ragel::aug_gbl_error( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::aug_local_error ragel::_T_factor_aug::aug_local_error() { static int a[] = {2, 9, 1, 10, 1}; return ::ragel::aug_local_error( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::error_name ragel::_T_factor_aug::error_name() { static int a[] = {1, 10, 3}; return ::ragel::error_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep ragel::_T_factor_aug::factor_rep() { static int a[] = {1, 11, 0}; return ::ragel::factor_rep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_neg ragel::_T_factor_rep::factor_neg() { static int a[] = {1, 0, 0}; return ::ragel::factor_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_op_list ragel::_T_factor_rep::factor_rep_op_list() { static int a[] = {1, 0, 1}; return ::ragel::factor_rep_op_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_op ragel::_T_factor_rep_op_list::factor_rep_op() { static int a[] = {1, 0, 0}; return ::ragel::factor_rep_op( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_op_list ragel::_T_factor_rep_op_list::_factor_rep_op_list() { static int a[] = {1, 0, 1}; return ::ragel::factor_rep_op_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_num ragel::_T_factor_rep_op::factor_rep_num() { static int a[] = {3, 4, 1, 5, 2, 6, 1}; return ::ragel::factor_rep_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_num ragel::_T_factor_rep_op::LowRep() { static int a[] = {1, 7, 1}; return ::ragel::factor_rep_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_rep_num ragel::_T_factor_rep_op::HighRep() { static int a[] = {1, 7, 3}; return ::ragel::factor_rep_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::_T_factor_rep_num::uint() { static int a[] = {1, 0, 0}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor_neg ragel::_T_factor_neg::_factor_neg() { static int a[] = {2, 0, 1, 1, 1}; return ::ragel::factor_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::factor ragel::_T_factor_neg::factor() { static int a[] = {1, 2, 0}; return ::ragel::factor( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_opt_max_arg::action_ref() { static int a[] = {1, 0, 1}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::alphabet_num ragel::_T_factor::alphabet_num() { static int a[] = {1, 0, 0}; return ::ragel::alphabet_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_factor::word() { static int a[] = {1, 1, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::string ragel::_T_factor::string() { static int a[] = {1, 2, 0}; return ::ragel::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lex_sqopen_pos ragel::_T_factor::lex_sqopen_pos() { static int a[] = {1, 3, 0}; return ::ragel::lex_sqopen_pos( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_or_data ragel::_T_factor::reg_or_data() { static int a[] = {2, 3, 1, 4, 1}; return ::ragel::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_sqclose ragel::_T_factor::re_or_sqclose() { static int a[] = {2, 3, 2, 4, 2}; return ::ragel::re_or_sqclose( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lex_sqopen_neg ragel::_T_factor::lex_sqopen_neg() { static int a[] = {1, 4, 0}; return ::ragel::lex_sqopen_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lex_regex_open ragel::_T_factor::lex_regex_open() { static int a[] = {1, 5, 0}; return ::ragel::lex_regex_open( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::regex ragel::_T_factor::regex() { static int a[] = {1, 5, 1}; return ::ragel::regex( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_close ragel::_T_factor::re_close() { static int a[] = {1, 5, 2}; return ::ragel::re_close( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::range_lit ragel::_T_factor::RL1() { static int a[] = {2, 6, 0, 7, 0}; return ::ragel::range_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::range_lit ragel::_T_factor::RL2() { static int a[] = {2, 6, 2, 7, 2}; return ::ragel::range_lit( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfastar ragel::_T_factor::nfastar() { static int a[] = {1, 8, 0}; return ::ragel::nfastar( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::expression ragel::_T_factor::expression() { static int a[] = {2, 8, 2, 9, 2}; return ::ragel::expression( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_factor::Push() { static int a[] = {1, 8, 4}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_factor::Pop() { static int a[] = {1, 8, 6}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_factor::Init() { static int a[] = {2, 8, 8, 9, 4}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_factor::Stay() { static int a[] = {1, 8, 10}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_factor::Repeat() { static int a[] = {1, 8, 12}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_factor::Exit() { static int a[] = {1, 8, 14}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::colon_cond ragel::_T_factor::colon_cond() { static int a[] = {1, 9, 0}; return ::ragel::colon_cond( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_factor::Inc() { static int a[] = {1, 9, 6}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_factor::Min() { static int a[] = {1, 9, 8}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_max_arg ragel::_T_factor::OptMax() { static int a[] = {1, 9, 9}; return ::ragel::opt_max_arg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::_T_factor::join() { static int a[] = {1, 10, 1}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_item_rep_list ragel::_T_regex::reg_item_rep_list() { static int a[] = {1, 0, 0}; return ::ragel::reg_item_rep_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_item_rep_list ragel::_T_reg_item_rep_list::_reg_item_rep_list() { static int a[] = {1, 0, 0}; return ::ragel::reg_item_rep_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_item_rep ragel::_T_reg_item_rep_list::reg_item_rep() { static int a[] = {1, 0, 1}; return ::ragel::reg_item_rep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_item ragel::_T_reg_item_rep::reg_item() { static int a[] = {2, 0, 0, 1, 0}; return ::ragel::reg_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_star ragel::_T_reg_item_rep::re_star() { static int a[] = {1, 0, 1}; return ::ragel::re_star( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_sqopen_pos ragel::_T_reg_item::re_sqopen_pos() { static int a[] = {1, 0, 0}; return ::ragel::re_sqopen_pos( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_or_data ragel::_T_reg_item::reg_or_data() { static int a[] = {2, 0, 1, 1, 1}; return ::ragel::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_sqclose ragel::_T_reg_item::re_or_sqclose() { static int a[] = {2, 0, 2, 1, 2}; return ::ragel::re_or_sqclose( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_sqopen_neg ragel::_T_reg_item::re_sqopen_neg() { static int a[] = {1, 1, 0}; return ::ragel::re_sqopen_neg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_dot ragel::_T_reg_item::re_dot() { static int a[] = {1, 2, 0}; return ::ragel::re_dot( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_char ragel::_T_reg_item::re_char() { static int a[] = {1, 3, 0}; return ::ragel::re_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_or_data ragel::_T_reg_or_data::_reg_or_data() { static int a[] = {1, 0, 0}; return ::ragel::reg_or_data( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::reg_or_char ragel::_T_reg_or_data::reg_or_char() { static int a[] = {1, 0, 1}; return ::ragel::reg_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_char ragel::_T_reg_or_char::re_or_char() { static int a[] = {1, 0, 0}; return ::ragel::re_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_char ragel::_T_reg_or_char::Low() { static int a[] = {1, 1, 0}; return ::ragel::re_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_dash ragel::_T_reg_or_char::re_or_dash() { static int a[] = {1, 1, 1}; return ::ragel::re_or_dash( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::re_or_char ragel::_T_reg_or_char::High() { static int a[] = {1, 1, 2}; return ::ragel::re_or_char( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::string ragel::_T_range_lit::string() { static int a[] = {1, 0, 0}; return ::ragel::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::alphabet_num ragel::_T_range_lit::alphabet_num() { static int a[] = {1, 1, 0}; return ::ragel::alphabet_num( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::_T_alphabet_num::uint() { static int a[] = {2, 0, 0, 1, 1}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::hex ragel::_T_alphabet_num::hex() { static int a[] = {1, 2, 0}; return ::ragel::hex( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_ref ragel::_T_lm_act::action_ref() { static int a[] = {1, 0, 1}; return ::ragel::action_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_block ragel::_T_lm_act::action_block() { static int a[] = {1, 1, 0}; return ::ragel::action_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm_act ragel::_T_opt_lm_act::lm_act() { static int a[] = {1, 0, 0}; return ::ragel::lm_act( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::_T_lm_stmt::join() { static int a[] = {1, 0, 0}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_lm_act ragel::_T_lm_stmt::opt_lm_act() { static int a[] = {1, 0, 1}; return ::ragel::opt_lm_act( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::assignment ragel::_T_lm_stmt::assignment() { static int a[] = {1, 1, 0}; return ::ragel::assignment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_spec ragel::_T_lm_stmt::action_spec() { static int a[] = {1, 2, 0}; return ::ragel::action_spec( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm_stmt_list ragel::_T_lm_stmt_list::_lm_stmt_list() { static int a[] = {1, 0, 0}; return ::ragel::lm_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm_stmt ragel::_T_lm_stmt_list::lm_stmt() { static int a[] = {2, 0, 1, 1, 0}; return ::ragel::lm_stmt( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::_T_lm::join() { static int a[] = {1, 0, 0}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm_stmt_list ragel::_T_lm::lm_stmt_list() { static int a[] = {1, 1, 1}; return ::ragel::lm_stmt_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_action_param::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_param_list ragel::_T_action_param_list::_action_param_list() { static int a[] = {1, 0, 0}; return ::ragel::action_param_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_param ragel::_T_action_param_list::action_param() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::action_param( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_param_list ragel::_T_opt_action_param_list::action_param_list() { static int a[] = {1, 0, 0}; return ::ragel::action_param_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_action_param_list ragel::_T_action_params::opt_action_param_list() { static int a[] = {1, 0, 1}; return ::ragel::opt_action_param_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_action_spec::word() { static int a[] = {2, 0, 1, 1, 1}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_params ragel::_T_action_spec::action_params() { static int a[] = {1, 0, 2}; return ::ragel::action_params( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_block ragel::_T_action_spec::action_block() { static int a[] = {2, 0, 3, 1, 2}; return ::ragel::action_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_def_name::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_export ragel::_T_assignment::opt_export() { static int a[] = {1, 0, 0}; return ::ragel::opt_export( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::def_name ragel::_T_assignment::def_name() { static int a[] = {1, 0, 1}; return ::ragel::def_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::join ragel::_T_assignment::join() { static int a[] = {1, 0, 3}; return ::ragel::join( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_export ragel::_T_instantiation::opt_export() { static int a[] = {1, 0, 0}; return ::ragel::opt_export( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::def_name ragel::_T_instantiation::def_name() { static int a[] = {1, 0, 1}; return ::ragel::def_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::lm ragel::_T_instantiation::lm() { static int a[] = {1, 0, 3}; return ::ragel::lm( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_expr ragel::_T_nfa_expr::_nfa_expr() { static int a[] = {1, 0, 0}; return ::ragel::nfa_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::term ragel::_T_nfa_expr::term() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::term( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::_T_nfa_round_spec::Depth() { static int a[] = {1, 0, 0}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::uint ragel::_T_nfa_round_spec::Group() { static int a[] = {1, 0, 2}; return ::ragel::uint( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_round_list ragel::_T_nfa_round_list::_nfa_round_list() { static int a[] = {1, 0, 0}; return ::ragel::nfa_round_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_round_spec ragel::_T_nfa_round_list::nfa_round_spec() { static int a[] = {2, 0, 2, 1, 0}; return ::ragel::nfa_round_spec( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_round_list ragel::_T_nfa_rounds::nfa_round_list() { static int a[] = {1, 0, 1}; return ::ragel::nfa_round_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::def_name ragel::_T_nfa_union::def_name() { static int a[] = {1, 0, 0}; return ::ragel::def_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_rounds ragel::_T_nfa_union::nfa_rounds() { static int a[] = {1, 0, 2}; return ::ragel::nfa_rounds( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_expr ragel::_T_nfa_union::nfa_expr() { static int a[] = {1, 0, 3}; return ::ragel::nfa_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_alphtype_type::W1() { static int a[] = {2, 0, 0, 1, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_alphtype_type::W2() { static int a[] = {1, 1, 1}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_include_spec::word() { static int a[] = {2, 0, 0, 2, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::string ragel::_T_include_spec::string() { static int a[] = {2, 1, 0, 2, 1}; return ::ragel::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_write_arg::word() { static int a[] = {1, 0, 0}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_machine_name::word() { static int a[] = {1, 0, 1}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::assignment ragel::_T_statement::assignment() { static int a[] = {1, 0, 0}; return ::ragel::assignment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::instantiation ragel::_T_statement::instantiation() { static int a[] = {1, 1, 0}; return ::ragel::instantiation( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::nfa_union ragel::_T_statement::nfa_union() { static int a[] = {1, 2, 0}; return ::ragel::nfa_union( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_spec ragel::_T_statement::action_spec() { static int a[] = {1, 3, 0}; return ::ragel::action_spec( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::action_block ragel::_T_statement::action_block() { static int a[] = {4, 4, 1, 5, 1, 13, 1, 14, 1}; return ::ragel::action_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::variable_name ragel::_T_statement::variable_name() { static int a[] = {1, 6, 1}; return ::ragel::variable_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::inline_expr_reparse ragel::_T_statement::inline_expr_reparse() { static int a[] = {3, 6, 2, 8, 1, 10, 1}; return ::ragel::inline_expr_reparse( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::alphtype_type ragel::_T_statement::alphtype_type() { static int a[] = {1, 7, 1}; return ::ragel::alphtype_type( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::word ragel::_T_statement::Cmd() { static int a[] = {1, 9, 1}; return ::ragel::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::_repeat_write_arg ragel::_T_statement::ArgList() { static int a[] = {1, 9, 2}; return ::ragel::_repeat_write_arg( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::string ragel::_T_statement::string() { static int a[] = {1, 11, 1}; return ::ragel::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::include_spec ragel::_T_statement::include_spec() { static int a[] = {1, 12, 1}; return ::ragel::include_spec( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::machine_name ragel::_T_opt_machine_name::machine_name() { static int a[] = {1, 0, 0}; return ::ragel::machine_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::opt_machine_name ragel::_T_ragel_start::opt_machine_name() { static int a[] = {1, 0, 0}; return ::ragel::opt_machine_name( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::_repeat_statement ragel::_T_ragel_start::_repeat_statement() { static int a[] = {1, 0, 1}; return ::ragel::_repeat_statement( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_item_list c_inline::_T_inline_expr::expr_item_list() { static int a[] = {1, 0, 0}; return ::c_inline::expr_item_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_item_list c_inline::_T_expr_item_list::_expr_item_list() { static int a[] = {1, 0, 0}; return ::c_inline::expr_item_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_item c_inline::_T_expr_item_list::expr_item() { static int a[] = {1, 0, 1}; return ::c_inline::expr_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_any c_inline::_T_expr_item::expr_any() { static int a[] = {1, 0, 0}; return ::c_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_symbol c_inline::_T_expr_item::expr_symbol() { static int a[] = {1, 1, 0}; return ::c_inline::expr_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_interpret c_inline::_T_expr_item::expr_interpret() { static int a[] = {1, 2, 0}; return ::c_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::whitespace c_inline::_T_expr_any::whitespace() { static int a[] = {1, 0, 0}; return ::c_inline::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::comment c_inline::_T_expr_any::comment() { static int a[] = {1, 1, 0}; return ::c_inline::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::string c_inline::_T_expr_any::string() { static int a[] = {1, 2, 0}; return ::c_inline::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::number c_inline::_T_expr_any::number() { static int a[] = {1, 3, 0}; return ::c_inline::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::hex_number c_inline::_T_expr_any::hex_number() { static int a[] = {1, 4, 0}; return ::c_inline::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::ident c_inline::_T_expr_any::ident() { static int a[] = {1, 5, 0}; return ::c_inline::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::c_any c_inline::_T_expr_any::c_any() { static int a[] = {1, 6, 0}; return ::c_inline::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::state_ref c_inline::_T_expr_interpret::state_ref() { static int a[] = {1, 4, 2}; return ::c_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::var_ref c_inline::_T_expr_interpret::var_ref() { static int a[] = {1, 5, 0}; return ::c_inline::var_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::opt_name_sep c_inline::_T_state_ref::opt_name_sep() { static int a[] = {1, 0, 0}; return ::c_inline::opt_name_sep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::state_ref_names c_inline::_T_state_ref::state_ref_names() { static int a[] = {1, 0, 1}; return ::c_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::state_ref_names c_inline::_T_state_ref_names::_state_ref_names() { static int a[] = {1, 0, 0}; return ::c_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::srlex::word c_inline::_T_state_ref_names::word() { static int a[] = {2, 0, 2, 1, 0}; return ::srlex::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_item_list c_inline::_T_inline_block::block_item_list() { static int a[] = {1, 0, 0}; return ::c_inline::block_item_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_item c_inline::_T_block_item_list::block_item() { static int a[] = {1, 0, 0}; return ::c_inline::block_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_item_list c_inline::_T_block_item_list::_block_item_list() { static int a[] = {1, 0, 1}; return ::c_inline::block_item_list( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_any c_inline::_T_block_item::expr_any() { static int a[] = {1, 0, 0}; return ::c_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_symbol c_inline::_T_block_item::block_symbol() { static int a[] = {1, 1, 0}; return ::c_inline::block_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::block_interpret c_inline::_T_block_item::block_interpret() { static int a[] = {1, 2, 0}; return ::c_inline::block_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::inline_block c_inline::_T_block_item::inline_block() { static int a[] = {1, 3, 1}; return ::c_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::expr_interpret c_inline::_T_block_interpret::expr_interpret() { static int a[] = {1, 0, 0}; return ::c_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::_opt_whitespace c_inline::_T_block_interpret::_opt_whitespace() { static int a[] = {5, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1}; return ::c_inline::_opt_whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::inline_expr c_inline::_T_block_interpret::inline_expr() { static int a[] = {5, 2, 3, 3, 3, 4, 3, 5, 3, 6, 1}; return ::c_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_inline::state_ref c_inline::_T_block_interpret::state_ref() { static int a[] = {4, 7, 1, 8, 1, 9, 1, 10, 1}; return ::c_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::ident c_host::_T_tok::ident() { static int a[] = {1, 0, 0}; return ::c_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::number c_host::_T_tok::number() { static int a[] = {1, 1, 0}; return ::c_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::hex_number c_host::_T_tok::hex_number() { static int a[] = {1, 2, 0}; return ::c_host::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::comment c_host::_T_tok::comment() { static int a[] = {1, 3, 0}; return ::c_host::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::string c_host::_T_tok::string() { static int a[] = {1, 4, 0}; return ::c_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::whitespace c_host::_T_tok::whitespace() { static int a[] = {1, 5, 0}; return ::c_host::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::c_any c_host::_T_tok::c_any() { static int a[] = {1, 6, 0}; return ::c_host::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::ragel_start c_host::_T_section::ragel_start() { static int a[] = {1, 0, 1}; return ::ragel::ragel_start( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::c_host::tok c_host::_T_section::tok() { static int a[] = {1, 1, 0}; return ::c_host::tok( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::_repeat_expr_item ocaml_inline::_T_inline_expr::_repeat_expr_item() { static int a[] = {1, 0, 0}; return ::ocaml_inline::_repeat_expr_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_any ocaml_inline::_T_expr_item::expr_any() { static int a[] = {1, 0, 0}; return ::ocaml_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_symbol ocaml_inline::_T_expr_item::expr_symbol() { static int a[] = {1, 1, 0}; return ::ocaml_inline::expr_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_interpret ocaml_inline::_T_expr_item::expr_interpret() { static int a[] = {1, 2, 0}; return ::ocaml_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::whitespace ocaml_inline::_T_expr_any::whitespace() { static int a[] = {1, 0, 0}; return ::ocaml_inline::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::comment ocaml_inline::_T_expr_any::comment() { static int a[] = {1, 1, 0}; return ::ocaml_inline::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::string ocaml_inline::_T_expr_any::string() { static int a[] = {1, 2, 0}; return ::ocaml_inline::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::number ocaml_inline::_T_expr_any::number() { static int a[] = {1, 3, 0}; return ::ocaml_inline::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::hex_number ocaml_inline::_T_expr_any::hex_number() { static int a[] = {1, 4, 0}; return ::ocaml_inline::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::ident ocaml_inline::_T_expr_any::ident() { static int a[] = {1, 5, 0}; return ::ocaml_inline::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::c_any ocaml_inline::_T_expr_any::c_any() { static int a[] = {1, 6, 0}; return ::ocaml_inline::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::state_ref ocaml_inline::_T_expr_interpret::state_ref() { static int a[] = {1, 4, 2}; return ::ocaml_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::opt_name_sep ocaml_inline::_T_state_ref::opt_name_sep() { static int a[] = {1, 0, 0}; return ::ocaml_inline::opt_name_sep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::state_ref_names ocaml_inline::_T_state_ref::state_ref_names() { static int a[] = {1, 0, 1}; return ::ocaml_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::state_ref_names ocaml_inline::_T_state_ref_names::_state_ref_names() { static int a[] = {1, 0, 0}; return ::ocaml_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::srlex::word ocaml_inline::_T_state_ref_names::word() { static int a[] = {2, 0, 2, 1, 0}; return ::srlex::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::_repeat_block_item ocaml_inline::_T_inline_block::_repeat_block_item() { static int a[] = {1, 0, 0}; return ::ocaml_inline::_repeat_block_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_any ocaml_inline::_T_block_item::expr_any() { static int a[] = {1, 0, 0}; return ::ocaml_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::block_symbol ocaml_inline::_T_block_item::block_symbol() { static int a[] = {1, 1, 0}; return ::ocaml_inline::block_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::block_interpret ocaml_inline::_T_block_item::block_interpret() { static int a[] = {1, 2, 0}; return ::ocaml_inline::block_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::inline_block ocaml_inline::_T_block_item::inline_block() { static int a[] = {1, 3, 1}; return ::ocaml_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::expr_interpret ocaml_inline::_T_block_interpret::expr_interpret() { static int a[] = {1, 0, 0}; return ::ocaml_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::_opt_whitespace ocaml_inline::_T_block_interpret::_opt_whitespace() { static int a[] = {5, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1}; return ::ocaml_inline::_opt_whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::inline_expr ocaml_inline::_T_block_interpret::inline_expr() { static int a[] = {5, 2, 3, 3, 3, 4, 3, 5, 3, 6, 1}; return ::ocaml_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_inline::state_ref ocaml_inline::_T_block_interpret::state_ref() { static int a[] = {4, 7, 1, 8, 1, 9, 1, 10, 1}; return ::ocaml_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::ident ocaml_host::_T_tok::ident() { static int a[] = {1, 0, 0}; return ::ocaml_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::number ocaml_host::_T_tok::number() { static int a[] = {1, 1, 0}; return ::ocaml_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::hex_number ocaml_host::_T_tok::hex_number() { static int a[] = {1, 2, 0}; return ::ocaml_host::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::comment ocaml_host::_T_tok::comment() { static int a[] = {1, 3, 0}; return ::ocaml_host::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::string ocaml_host::_T_tok::string() { static int a[] = {1, 4, 0}; return ::ocaml_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::whitespace ocaml_host::_T_tok::whitespace() { static int a[] = {1, 5, 0}; return ::ocaml_host::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::ocaml_any ocaml_host::_T_tok::ocaml_any() { static int a[] = {1, 6, 0}; return ::ocaml_host::ocaml_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::ragel_start ocaml_host::_T_section::ragel_start() { static int a[] = {1, 0, 1}; return ::ragel::ragel_start( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ocaml_host::tok ocaml_host::_T_section::tok() { static int a[] = {1, 1, 0}; return ::ocaml_host::tok( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::_repeat_expr_item ruby_inline::_T_inline_expr::_repeat_expr_item() { static int a[] = {1, 0, 0}; return ::ruby_inline::_repeat_expr_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_any ruby_inline::_T_expr_item::expr_any() { static int a[] = {1, 0, 0}; return ::ruby_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_symbol ruby_inline::_T_expr_item::expr_symbol() { static int a[] = {1, 1, 0}; return ::ruby_inline::expr_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_interpret ruby_inline::_T_expr_item::expr_interpret() { static int a[] = {1, 2, 0}; return ::ruby_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::whitespace ruby_inline::_T_expr_any::whitespace() { static int a[] = {1, 0, 0}; return ::ruby_inline::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::comment ruby_inline::_T_expr_any::comment() { static int a[] = {1, 1, 0}; return ::ruby_inline::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::string ruby_inline::_T_expr_any::string() { static int a[] = {1, 2, 0}; return ::ruby_inline::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::number ruby_inline::_T_expr_any::number() { static int a[] = {1, 3, 0}; return ::ruby_inline::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::hex_number ruby_inline::_T_expr_any::hex_number() { static int a[] = {1, 4, 0}; return ::ruby_inline::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::ident ruby_inline::_T_expr_any::ident() { static int a[] = {1, 5, 0}; return ::ruby_inline::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::ruby_any ruby_inline::_T_expr_any::ruby_any() { static int a[] = {1, 6, 0}; return ::ruby_inline::ruby_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::state_ref ruby_inline::_T_expr_interpret::state_ref() { static int a[] = {1, 4, 2}; return ::ruby_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::opt_name_sep ruby_inline::_T_state_ref::opt_name_sep() { static int a[] = {1, 0, 0}; return ::ruby_inline::opt_name_sep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::state_ref_names ruby_inline::_T_state_ref::state_ref_names() { static int a[] = {1, 0, 1}; return ::ruby_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::state_ref_names ruby_inline::_T_state_ref_names::_state_ref_names() { static int a[] = {1, 0, 0}; return ::ruby_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::srlex::word ruby_inline::_T_state_ref_names::word() { static int a[] = {2, 0, 2, 1, 0}; return ::srlex::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::_repeat_block_item ruby_inline::_T_inline_block::_repeat_block_item() { static int a[] = {1, 0, 0}; return ::ruby_inline::_repeat_block_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_any ruby_inline::_T_block_item::expr_any() { static int a[] = {1, 0, 0}; return ::ruby_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::block_symbol ruby_inline::_T_block_item::block_symbol() { static int a[] = {1, 1, 0}; return ::ruby_inline::block_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::block_interpret ruby_inline::_T_block_item::block_interpret() { static int a[] = {1, 2, 0}; return ::ruby_inline::block_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::inline_block ruby_inline::_T_block_item::inline_block() { static int a[] = {1, 3, 1}; return ::ruby_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::expr_interpret ruby_inline::_T_block_interpret::expr_interpret() { static int a[] = {1, 0, 0}; return ::ruby_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::_opt_whitespace ruby_inline::_T_block_interpret::_opt_whitespace() { static int a[] = {5, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1}; return ::ruby_inline::_opt_whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::inline_expr ruby_inline::_T_block_interpret::inline_expr() { static int a[] = {5, 2, 3, 3, 3, 4, 3, 5, 3, 6, 1}; return ::ruby_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_inline::state_ref ruby_inline::_T_block_interpret::state_ref() { static int a[] = {4, 7, 1, 8, 1, 9, 1, 10, 1}; return ::ruby_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::ident ruby_host::_T_tok::ident() { static int a[] = {1, 0, 0}; return ::ruby_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::number ruby_host::_T_tok::number() { static int a[] = {1, 1, 0}; return ::ruby_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::hex_number ruby_host::_T_tok::hex_number() { static int a[] = {1, 2, 0}; return ::ruby_host::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::comment ruby_host::_T_tok::comment() { static int a[] = {1, 3, 0}; return ::ruby_host::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::string ruby_host::_T_tok::string() { static int a[] = {1, 4, 0}; return ::ruby_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::whitespace ruby_host::_T_tok::whitespace() { static int a[] = {1, 5, 0}; return ::ruby_host::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::ruby_any ruby_host::_T_tok::ruby_any() { static int a[] = {1, 6, 0}; return ::ruby_host::ruby_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::ragel_start ruby_host::_T_section::ragel_start() { static int a[] = {1, 0, 1}; return ::ragel::ragel_start( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ruby_host::tok ruby_host::_T_section::tok() { static int a[] = {1, 1, 0}; return ::ruby_host::tok( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::_repeat_expr_item crack_inline::_T_inline_expr::_repeat_expr_item() { static int a[] = {1, 0, 0}; return ::crack_inline::_repeat_expr_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_any crack_inline::_T_expr_item::expr_any() { static int a[] = {1, 0, 0}; return ::crack_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_symbol crack_inline::_T_expr_item::expr_symbol() { static int a[] = {1, 1, 0}; return ::crack_inline::expr_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_interpret crack_inline::_T_expr_item::expr_interpret() { static int a[] = {1, 2, 0}; return ::crack_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::whitespace crack_inline::_T_expr_any::whitespace() { static int a[] = {1, 0, 0}; return ::crack_inline::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::comment crack_inline::_T_expr_any::comment() { static int a[] = {1, 1, 0}; return ::crack_inline::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::string crack_inline::_T_expr_any::string() { static int a[] = {1, 2, 0}; return ::crack_inline::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::number crack_inline::_T_expr_any::number() { static int a[] = {1, 3, 0}; return ::crack_inline::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::hex_number crack_inline::_T_expr_any::hex_number() { static int a[] = {1, 4, 0}; return ::crack_inline::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::ident crack_inline::_T_expr_any::ident() { static int a[] = {1, 5, 0}; return ::crack_inline::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::c_any crack_inline::_T_expr_any::c_any() { static int a[] = {1, 6, 0}; return ::crack_inline::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::state_ref crack_inline::_T_expr_interpret::state_ref() { static int a[] = {1, 4, 2}; return ::crack_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::opt_name_sep crack_inline::_T_state_ref::opt_name_sep() { static int a[] = {1, 0, 0}; return ::crack_inline::opt_name_sep( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::state_ref_names crack_inline::_T_state_ref::state_ref_names() { static int a[] = {1, 0, 1}; return ::crack_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::state_ref_names crack_inline::_T_state_ref_names::_state_ref_names() { static int a[] = {1, 0, 0}; return ::crack_inline::state_ref_names( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::srlex::word crack_inline::_T_state_ref_names::word() { static int a[] = {2, 0, 2, 1, 0}; return ::srlex::word( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::_repeat_block_item crack_inline::_T_inline_block::_repeat_block_item() { static int a[] = {1, 0, 0}; return ::crack_inline::_repeat_block_item( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_any crack_inline::_T_block_item::expr_any() { static int a[] = {1, 0, 0}; return ::crack_inline::expr_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::block_symbol crack_inline::_T_block_item::block_symbol() { static int a[] = {1, 1, 0}; return ::crack_inline::block_symbol( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::block_interpret crack_inline::_T_block_item::block_interpret() { static int a[] = {1, 2, 0}; return ::crack_inline::block_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::inline_block crack_inline::_T_block_item::inline_block() { static int a[] = {1, 3, 1}; return ::crack_inline::inline_block( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::expr_interpret crack_inline::_T_block_interpret::expr_interpret() { static int a[] = {1, 0, 0}; return ::crack_inline::expr_interpret( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::_opt_whitespace crack_inline::_T_block_interpret::_opt_whitespace() { static int a[] = {5, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1}; return ::crack_inline::_opt_whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::inline_expr crack_inline::_T_block_interpret::inline_expr() { static int a[] = {5, 2, 3, 3, 3, 4, 3, 5, 3, 6, 1}; return ::crack_inline::inline_expr( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_inline::state_ref crack_inline::_T_block_interpret::state_ref() { static int a[] = {4, 7, 1, 8, 1, 9, 1, 10, 1}; return ::crack_inline::state_ref( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::ident crack_host::_T_tok::ident() { static int a[] = {1, 0, 0}; return ::crack_host::ident( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::number crack_host::_T_tok::number() { static int a[] = {1, 1, 0}; return ::crack_host::number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::hex_number crack_host::_T_tok::hex_number() { static int a[] = {1, 2, 0}; return ::crack_host::hex_number( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::comment crack_host::_T_tok::comment() { static int a[] = {1, 3, 0}; return ::crack_host::comment( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::string crack_host::_T_tok::string() { static int a[] = {1, 4, 0}; return ::crack_host::string( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::whitespace crack_host::_T_tok::whitespace() { static int a[] = {1, 5, 0}; return ::crack_host::whitespace( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::c_any crack_host::_T_tok::c_any() { static int a[] = {1, 6, 0}; return ::crack_host::c_any( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::ragel::ragel_start crack_host::_T_section::ragel_start() { static int a[] = {1, 0, 1}; return ::ragel::ragel_start( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }
::crack_host::tok crack_host::_T_section::tok() { static int a[] = {1, 1, 0}; return ::crack_host::tok( __prg, colm_get_rhs_val( __prg, __tree, a ) ); }

::start RagelTree( colm_program *prg )
{ return ::start( prg, colm_get_global( prg, 5) ); }
::str RagelError( colm_program *prg )
{ return ::str( prg, colm_get_global( prg, 6) ); }
::_repeat_import RagelImport( colm_program *prg )
{ return ::_repeat_import( prg, colm_get_global( prg, 7) ); }

