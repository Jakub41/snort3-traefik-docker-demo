import crack.io cout;
import crack.lang Buffer;

int neg;
int value;





const array[byte ] _state_chart_trans_keys = [ 1, 0, 4, 4, 0, 4, 2, 4, 0,  ];
const array[int16 ] _state_chart_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 ,  ];
const array[int16 ] _state_chart_index_offsets = [ 0, 0, 1, 6, 0 ,  ];
const array[int16 ] _state_chart_indices = [ 0, 2, 1, 1, 1, 0, 3, 4, 5, 0 ,  ];
const array[int16 ] _state_chart_index_defaults = [ 0, 1, 1, 1, 0 ,  ];
const array[int16 ] _state_chart_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _state_chart_cond_targs = [ 2, 0, 3, 1, 1, 2, 0 ,  ];
const array[int16 ] _state_chart_cond_actions = [ 1, 0, 2, 3, 4, 5, 0 ,  ];
const array[int16 ] _state_chart_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _state_chart_nfa_offsets = [ 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _state_chart_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _state_chart_nfa_pop_trans = [ 0, 0 ,  ];
const int  state_chart_start  = 3;
const int  state_chart_first_final  = 3;
const int  state_chart_error  = 0;
const int  state_chart_en_main  = 3;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	value = 0;
	neg = 0;
	
	if ( 1 ) {
		cs = int ( state_chart_start );
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = (cs<<1);
					_inds = _state_chart_index_offsets[cs];
					if ( (data[p ])<= 57 && (data[p ])>= 10  )
					{
						int _ic = int ( _state_chart_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _state_chart_trans_keys[_keys+1 ] )&& _ic >= int ( _state_chart_trans_keys[_keys ] ) )
						_trans = uint32  ( _state_chart_indices[_inds + int ( (_ic - int ( _state_chart_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _state_chart_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _state_chart_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _state_chart_cond_targs[_trans] );
					if ( _state_chart_cond_actions[_trans] == 3  ) {
						if ( 1 ) {
							neg = 0;
							value = 0;
							
						}
						
					}
					else if ( _state_chart_cond_actions[_trans] == 1  ) {
						if ( 1 ) {
							value = value * 10 + ( int ( ((data[p ])) - 48 ) ) 
							;
							
						}
						
					}
					else if ( _state_chart_cond_actions[_trans] == 4  ) {
						if ( 1 ) {
							neg = 0;
							value = 0;
							
						}
						if ( 1 ) {
							neg = 1;
							
						}
						
					}
					else if ( _state_chart_cond_actions[_trans] == 5  ) {
						if ( 1 ) {
							neg = 0;
							value = 0;
							
						}
						if ( 1 ) {
							value = value * 10 + ( int ( ((data[p ])) - 48 ) ) 
							;
							
						}
						
					}
					else if ( _state_chart_cond_actions[_trans] == 2  ) {
						if ( 1 ) {
							if ( neg != 0 )
							{
								value = -1 * value;
								
							} 
							
						}
						if ( 1 ) {
							cout.format( value );
							cout.format( "\n" );
							
						}
						
					}
					;
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= state_chart_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "1\n" );
	m( "12\n" );
	m( "222222\n" );
	m( "+2123\n" );
	m( "213 3213\n" );
	m( "-12321\n" );
	m( "--123\n" );
	m( "-99\n" );
	m( " -3000\n" );
}

main();
