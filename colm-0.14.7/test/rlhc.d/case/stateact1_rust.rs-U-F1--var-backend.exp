static _state_act_trans_keys: [u8 ; 14] = [ 1, 0, 3, 3, 0, 0, 2, 2, 2, 2, 2, 2, 0 , 0 ];
static _state_act_char_class: [i8 ; 98] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 0 , 0 ];
static _state_act_index_offsets: [i8 ; 8] = [ 0, 0, 1, 2, 3, 4, 0 , 0 ];
static _state_act_indices: [i8 ; 7] = [ 0, 2, 3, 3, 3, 0 , 0 ];
static _state_act_index_defaults: [i8 ; 8] = [ 0, 1, 1, 1, 1, 1, 0 , 0 ];
static _state_act_trans_cond_spaces: [i8 ; 6] = [ -1, -1, -1, -1, 0 , 0 ];
static _state_act_cond_targs: [i8 ; 6] = [ 2, 0, 5, 1, 0 , 0 ];
static _state_act_cond_actions: [i8 ; 6] = [ 0, 0, 3, 0, 0 , 0 ];
static _state_act_to_state_actions: [i8 ; 8] = [ 0, 0, 1, 4, 6, 4, 0 , 0 ];
static _state_act_from_state_actions: [i8 ; 8] = [ 0, 0, 2, 5, 7, 5, 0 , 0 ];
static _state_act_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _state_act_nfa_offsets: [i8 ; 8] = [ 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _state_act_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _state_act_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static state_act_start : i32 = 4;
static state_act_first_final : i32 = 4;
static state_act_error : i32 = 0;
static state_act_en_main : i32 = 4;
static state_act_en_main_line_again : i32 = 3;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( state_act_start ) as i32;
	}
	
	{
		let mut _trans  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _keys :i32 = 0;
		let mut _inds :i32 = 0;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							match ( _state_act_from_state_actions[(cs) as usize] ) {
								5  => {
									{print!( "{}", "b2\n" );
									}
									
								}
								2  => {
									{print!( "{}", "c2\n" );
									}
									
								}
								7  => {
									{print!( "{}", "a2\n" );
									}
									{print!( "{}", "b2\n" );
									}
									
								}
								
								_ => {}
							}
							_keys = ( (cs<<1)  ) as i32;
							_inds = ( _state_act_index_offsets[(cs) as usize] ) as i32;
							if ( ( data[(p ) as usize]
							) <= 105 && ( data[(p ) as usize]
							) >= 10  ) {
								{
									let mut _ic  = ( _state_act_char_class[(( ( data[(p ) as usize]
									)  ) as i32- 10) as usize] ) as i32;
									if ( _ic <= ( _state_act_trans_keys[(_keys+1 ) as usize]
									) as i32&& _ic >= ( _state_act_trans_keys[(_keys ) as usize]
									) as i32 ) {
										_trans = ( _state_act_indices[(_inds + ( ( _ic - ( _state_act_trans_keys[(_keys ) as usize]
										) as i32)   ) as i32) as usize]
										) as u32;
										
									}
									else {
										_trans = ( _state_act_index_defaults[(cs) as usize] ) as u32;
										
									}
								}
								
							}
							else {
								{
									_trans = ( _state_act_index_defaults[(cs) as usize] ) as u32;
								}
								
								
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _state_act_cond_targs[(_trans) as usize] ) as i32;
							match ( _state_act_cond_actions[(_trans) as usize] ) {
								3  => {
									{{cs = 3;
										}}
									
								}
								
								_ => {}
							}
							match ( _state_act_to_state_actions[(cs) as usize] ) {
								4  => {
									{print!( "{}", "b1\n" );
									}
									
								}
								1  => {
									{print!( "{}", "c1\n" );
									}
									
								}
								6  => {
									{print!( "{}", "a1\n" );
									}
									{print!( "{}", "b1\n" );
									}
									
								}
								
								_ => {}
							}
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= state_act_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "hi\nhi\n".to_string() ); }
}

