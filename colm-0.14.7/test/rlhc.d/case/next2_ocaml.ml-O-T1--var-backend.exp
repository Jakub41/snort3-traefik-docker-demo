(*
* @LANG: ocaml
* @GENERATED: true
*)

let target = ref 0
let last = ref 0






let _next2_key_offsets : int array = [|
0; 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 22; 22; 22; 22; 0 ; 
|]
let _next2_trans_keys : int array = [|
120; 117; 110; 117; 115; 101; 100; 111; 110; 101; 116; 119; 111; 116; 104; 114; 101; 101; 10; 49; 50; 51; 0 ; 
|]
let _next2_single_lengths : int array = [|
0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 4; 0; 0; 0; 0; 0 ; 
|]
let _next2_range_lengths : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _next2_index_offsets : int array = [|
0; 0; 2; 4; 6; 8; 10; 12; 14; 16; 18; 20; 22; 24; 26; 28; 30; 32; 34; 36; 41; 42; 43; 44; 0 ; 
|]
let _next2_trans_cond_spaces : int array = [|
-1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; 0 ; 
|]
let _next2_trans_offsets : int array = [|
0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 0 ; 
|]
let _next2_trans_lengths : int array = [|
1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0 ; 
|]
let _next2_cond_keys : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _next2_cond_targs : int array = [|
19; 0; 3; 0; 4; 0; 5; 0; 6; 0; 7; 0; 20; 0; 9; 0; 10; 0; 21; 0; 12; 0; 13; 0; 22; 0; 15; 0; 16; 0; 17; 0; 18; 0; 23; 0; 19; 19; 19; 1; 0; 0; 0; 0; 0; 0 ; 
|]
let _next2_cond_actions : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 3; 0; 0; 4; 5; 6; 0; 0; 0; 0; 0; 0 ; 
|]
let _next2_nfa_targs : int array = [|
0; 0 ; 
|]
let _next2_nfa_offsets : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _next2_nfa_push_actions : int array = [|
0; 0 ; 
|]
let _next2_nfa_pop_trans : int array = [|
0; 0 ; 
|]
let next2_start  : int  = 19
let next2_first_final  : int  = 19
let next2_error  : int  = 0
let next2_en_unused  : int  = 2
let next2_en_one  : int  = 8
let next2_en_two  : int  = 11
let next2_en_three  : int  = 14
let next2_en_main  : int  = 19
let exec data = 
let buffer = String.create(1024) in 
let blen :int ref = ref 0 in
let cs = ref 0 in
let p = ref 0 in
let pe = ref (String.length data) in
begin
	cs  := next2_start;
	
end;
begin
	let _klen : int  ref = ref 0 in
	let _keys : int ref = ref 0 in
	let _ckeys : int ref = ref 0 in
	let _cpc : int  ref = ref 0 in
	let _trans : int  ref = ref 0 in
	let _cond  : int  ref = ref 0 in
	let _have  : int  ref = ref 0 in
	let _cont  : int  ref = ref 1 in
	while _cont.contents= 1  do
	begin
		if cs.contents= 0  then
		begin
			_cont  := 0;
			
		end
		;_have  := 0;
		if p.contents= pe.contents then
		begin
			begin
				if _have.contents= 0  then
				begin
					_cont  := 0;
					
				end
				;
			end;
			
		end
		;if _cont.contents= 1  then
		begin
			begin
				if _have.contents= 0  then
				begin
					begin
						_keys  := _next2_key_offsets.(cs.contents);
						_trans  := _next2_index_offsets.(cs.contents);
						_have  := 0;
						_klen  := _next2_single_lengths.(cs.contents);
						if _klen.contents> 0  then
						begin
							begin
								let _lower : int ref = ref 0 in
								let _mid : int ref = ref 0 in
								let _upper : int ref = ref 0 in
								_lower  := _keys.contents;
								_upper  := _keys.contents+ _klen.contents- 1;
								while _upper.contents>= _lower.contents&& _have.contents= 0  do
								begin
									_mid  := _lower.contents+ ( ( _upper.contents-_lower.contents ) asr 1 );
									if ( Char.code data.[p.contents] )< _next2_trans_keys.( _mid.contents ) then
									begin
										_upper  := _mid.contents- 1;
										
									end
									else if ( Char.code data.[p.contents] )> _next2_trans_keys.( _mid.contents ) then
									begin
										_lower  := _mid.contents+ 1;
										
									end
									else
									begin
										begin
											_trans  := _trans.contents + ( _mid.contents- _keys.contents );
											_have  := 1;
											
										end;
										
									end
									;
								end;
								
								done;
								if _have.contents= 0  then
								begin
									begin
										_keys  := _keys.contents + _klen.contents;
										_trans  := _trans.contents + _klen.contents;
										
									end;
									
								end
								;
							end;
							
						end
						;if _have.contents= 0  then
						begin
							begin
								_klen  := _next2_range_lengths.(cs.contents);
								if _klen.contents> 0  then
								begin
									begin
										let _lower : int ref = ref 0 in
										let _mid : int ref = ref 0 in
										let _upper : int ref = ref 0 in
										_lower  := _keys.contents;
										_upper  := _keys.contents+ ( _klen.contents lsl 1 )- 2;
										while _have.contents= 0 && _lower.contents<= _upper.contents do
										begin
											_mid  := _lower.contents+ ( ( ( _upper.contents-_lower.contents ) asr 1 ) land  lnot 1 );
											if ( Char.code data.[p.contents] )< _next2_trans_keys.( _mid.contents ) then
											begin
												_upper  := _mid.contents- 2;
												
											end
											else if ( Char.code data.[p.contents] )> _next2_trans_keys.( _mid.contents+ 1  ) then
											begin
												_lower  := _mid.contents+ 2;
												
											end
											else
											begin
												begin
													_trans  := _trans.contents + ( ( _mid.contents- _keys.contents ) asr 1 );
													_have  := 1;
													
												end;
												
											end
											;
										end;
										
										done;
										if _have.contents= 0  then
										begin
											_trans  := _trans.contents + _klen.contents;
											
										end
										;
									end;
									
								end
								;
							end;
							
						end
						;_ckeys  := _next2_trans_offsets.(_trans.contents);
						_klen  := _next2_trans_lengths.(_trans.contents);
						_cond  := _next2_trans_offsets.(_trans.contents);
						_have  := 0;
						_cpc  := 0;
						begin
							let _lower : int ref = ref 0 in
							let _mid : int ref = ref 0 in
							let _upper : int ref = ref 0 in
							_lower  := _ckeys.contents;
							_upper  := _ckeys.contents+ _klen.contents- 1;
							while _have.contents= 0 && _lower.contents<= _upper.contents do
							begin
								_mid  := _lower.contents+ ( ( _upper.contents-_lower.contents ) asr 1 );
								if _cpc.contents< _next2_cond_keys.( _mid.contents ) then
								begin
									_upper  := _mid.contents- 1;
									
								end
								else if _cpc.contents> _next2_cond_keys.( _mid.contents ) then
								begin
									_lower  := _mid.contents+ 1;
									
								end
								else
								begin
									begin
										_cond  := _cond.contents + ( _mid.contents- _ckeys.contents );
										_have  := 1;
										
									end;
									
								end
								;
							end;
							
							done;
							if _have.contents= 0  then
							begin
								begin
									cs  := 0;
									_cont  := 0;
									
								end;
								
							end
							;
						end;
						
					end;
					
				end
				;if _cont.contents= 1  then
				begin
					begin
						cs  := _next2_cond_targs.(_cond.contents);
						if _next2_cond_actions.(_cond.contents) = 1  then
						begin
							begin
								print_string( "one\n" );
								target := 19;
								begin
									cs  := (target.contents);
									
								end;
								
								
							end;
							
						end
						else if _next2_cond_actions.(_cond.contents) = 2  then
						begin
							begin
								print_string( "two\n" );
								target := 19;
								begin
									cs  := (target.contents);
									
								end;
								
								
							end;
							
						end
						else if _next2_cond_actions.(_cond.contents) = 3  then
						begin
							begin
								print_string( "three\n" );
								target := 19;
								begin
									cs  := (target.contents);
									
								end;
								
								
							end;
							
						end
						else if _next2_cond_actions.(_cond.contents) = 4  then
						begin
							begin
								target := 8;
								begin
									cs  := (target.contents);
									
								end;
								
								last := 1;
								
							end;
							
						end
						else if _next2_cond_actions.(_cond.contents) = 5  then
						begin
							begin
								target := 11;
								begin
									cs  := (target.contents);
									
								end;
								
								last := 2;
								
							end;
							
						end
						else if _next2_cond_actions.(_cond.contents) = 6  then
						begin
							begin
								if last .contents == 2  then
								begin
									target := 14;
									begin
										cs  := (target.contents);
										
									end;
									
									
								end 
								;
								last := 3;
								
							end;
							
						end
						;
						if cs.contents= 0  then
						begin
							_cont  := 0;
							
						end
						;if _cont.contents= 1  then
						begin
							p  := p.contents + 1;
							
						end
						;
					end;
					
				end
				;
			end;
			
		end
		;
	end;
	
	done;
	
end;
if !cs >= next2_first_final then
print_string "ACCEPT\n"
else
print_string "FAIL\n"
;;

let () =
exec "1one3x2two3three\n";
()
;;

