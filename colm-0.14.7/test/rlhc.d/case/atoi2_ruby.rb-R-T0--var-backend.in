host( "working/atoi2_ruby.rl", 1 ) @{#
	# @@LANG: ruby
	# @@GENERATED: true
	#
	
	
	
	
	
	
}@
array s8 _state_chart_actions( 0, 4 ) = { 0, 1, 0, 1, 2, 2, 0, 1, 2, 0, 2, 2, 3, 4, 0 };

array s8 _state_chart_key_offsets( 0, 5 ) = { 0, 0, 2, 5, 0 };

array char _state_chart_trans_keys( 0, 57 ) = { 48, 57, 10, 48, 57, 43, 45, 48, 57, 0 };

array s8 _state_chart_single_lengths( 0, 2 ) = { 0, 0, 1, 2, 0 };

array s8 _state_chart_range_lengths( 0, 1 ) = { 0, 1, 1, 1, 0 };

array s8 _state_chart_index_offsets( 0, 5 ) = { 0, 0, 2, 5, 0 };

array s8 _state_chart_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _state_chart_trans_offsets( 0, 8 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 0 };

array s8 _state_chart_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _state_chart_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_chart_cond_targs( 0, 3 ) = { 2, 0, 3, 2, 0, 1, 1, 2, 0, 0 };

array s8 _state_chart_cond_actions( 0, 11 ) = { 3, 0, 11, 3, 0, 1, 5, 8, 0, 0 };

array s8 _state_chart_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _state_chart_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _state_chart_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _state_chart_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int state_chart_start = 3;
value int state_chart_first_final = 3;
value int state_chart_error = 0;

value int state_chart_en_main = 3;

host( "working/atoi2_ruby.rl", 55 ) @{
	
	def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	neg = 1
	value = 1
	value = 0;
	neg = 0;
}@
{
	cs = cast(int)state_chart_start;
}
host( "working/atoi2_ruby.rl", 70 ) @{
}@
{
	int _klen;
	uint _trans = 0;
	uint _cond = 0;
	uint _have = 0;
	uint _cont = 1;
	index s8 _acts;
	uint _nacts;
	index char _keys;
	index s8 _ckeys;
	int _cpc;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _state_chart_trans_keys, _state_chart_key_offsets[cs] );
				_trans = cast(uint)_state_chart_index_offsets[cs];
				_have = 0;
				
				_klen = cast(int)_state_chart_single_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( _upper >= _lower && _have == 0 ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _state_chart_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _state_chart_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
				}
				
				if ( _have == 0 ) {
					_klen = cast(int)_state_chart_range_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _state_chart_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _state_chart_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								_have = 1;
							}
						}
						if ( _have == 0 )
						_trans += cast(uint)_klen;
					}
				}
				
				_ckeys = offset( _state_chart_cond_keys, _state_chart_trans_offsets[_trans] );
				_klen = cast(int)_state_chart_trans_lengths[_trans];
				_cond = cast(uint)_state_chart_trans_offsets[_trans];
				_have = 0;
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( _have == 0 && _lower <= _upper ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _state_chart_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _state_chart_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						cs = 0;
						_cont = 0;
					}
				}
			}
			if ( _cont == 1 ) {
				cs = cast(int)_state_chart_cond_targs[_cond];
				
				if ( _state_chart_cond_actions[_cond] != 0 ) {
					_acts = offset( _state_chart_actions, _state_chart_cond_actions[_cond] );
					_nacts = cast(uint)deref( _state_chart_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _state_chart_actions, _acts ) )
						{
							case 0 {
								host( "working/atoi2_ruby.rl", 10 ) ${neg = 0;
									value = 0;
								}$
							}
							case 1 {
								host( "working/atoi2_ruby.rl", 14 ) ${neg = 1;
								}$
							}
							case 2 {
								host( "working/atoi2_ruby.rl", 17 ) ${value = value * 10 + ( ={( deref( data, p ))}= - 48 )
									;
								}$
							}
							case 3 {
								host( "working/atoi2_ruby.rl", 21 ) ${if ( neg != 0 )
									value = -1 * value;
									
									end
								}$
							}
							case 4 {
								host( "working/atoi2_ruby.rl", 46 ) ${print( value );
									print( "\n" );
								}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}
		}
	}
}
host( "working/atoi2_ruby.rl", 71 ) @{
	if cs >= state_chart_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
	end
	end
	
	inp = [
	"1\n",
	"12\n",
	"222222\n",
	"+2123\n",
	"213 3213\n",
	"-12321\n",
	"--123\n",
	"-99\n",
	" -3000\n",
	]
	
	inplen = 9
	
	inp.each { |str| run_machine(str) }
	
}@