host( "working/erract5.rl", 1 ) @{/*
	* @@LANG: obj-c
	*/
	
	/*
	* Test error actions.
	*/
	
	#include <stdio.h>
	#include <string.h>
	#include <Foundation/Foundation.h>
	
	@@interface ErrAct : NSObject
	{
		@@public
		int cs;
	};
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	- (int) initFsm;
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	- (void) executeWithData:(const char *)data len:(int)len;
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	- (int) finish;
	
	@@end
	
	@@implementation ErrAct
	
	
	
}@
array s8 _ErrAct_actions( 0, 2 ) = { 0, 1, 0, 1, 1, 1, 2, 0 };

array s8 _ErrAct_eof_actions( 0, 5 ) = { 0, 1, 3, 5, 3, 3, 0, 0 };

array s8 _ErrAct_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _ErrAct_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ErrAct_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _ErrAct_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int ErrAct_start = 1;
value int ErrAct_first_final = 6;
value int ErrAct_error = 0;

value int ErrAct_en_main = 1;

host( "working/erract5.rl", 60 ) @{
	
	- (int) initFsm;
	{
	}@
	{
		cs = cast(int)ErrAct_start;
	}
	host( "working/erract5.rl", 64 ) @{
		return 1;
	}
	
	- (void) executeWithData:(const char *)_data len:(int)_len;
	{
		const char *p = _data;
		const char *pe = _data + _len;
		const char *eof = pe;
	}@
	{
		index s8 _acts;
		uint _nacts;
		
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		switch ( cs ) {
			case 1:
			switch( ( deref( data, p )) ) {
				case 43: {
					goto ctr1;
				}
				case 45: {
					goto ctr1;
				}
			}
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr2;
			}
			{
				goto ctr0;
			}
			case 0:
			goto _out;
			case 2:
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr2;
			}
			{
				goto ctr3;
			}
			case 3:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr5;
				}
				case 46: {
					goto ctr6;
				}
			}
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr2;
			}
			{
				goto ctr4;
			}
			case 6:
			{
				goto ctr8;
			}
			case 4:
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr7;
			}
			{
				goto ctr3;
			}
			case 5:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr5;
			}
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr7;
			}
			{
				goto ctr3;
			}
		}
		
		ctr8: cs = 0; goto _again;
		ctr0: cs = 0; goto f0;
		ctr3: cs = 0; goto f1;
		ctr4: cs = 0; goto f2;
		ctr1: cs = 2; goto _again;
		ctr2: cs = 3; goto _again;
		ctr6: cs = 4; goto _again;
		ctr7: cs = 5; goto _again;
		ctr5: cs = 6; goto _again;
		
		f0: _acts = offset( _ErrAct_actions, 1 ); goto execFuncs;
		f1: _acts = offset( _ErrAct_actions, 3 ); goto execFuncs;
		f2: _acts = offset( _ErrAct_actions, 5 ); goto execFuncs;
		
		execFuncs:
		_nacts = cast(uint)deref( _ErrAct_actions, _acts );
		_acts += 1;
		while ( _nacts > 0 ) {
			switch ( deref( _ErrAct_actions, _acts ) ) {
				case 0{
					host( "working/erract5.rl", 43 ) ${ printf(" DIGIT PLUS MINUS\n"); }$
				}
				case 1{
					host( "working/erract5.rl", 44 ) ${ printf(" DIGIT\n"); }$
				}
				case 2{
					host( "working/erract5.rl", 45 ) ${ printf(" DIGIT DECIMAL\n"); }$
				}
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		goto _again;
		
		_again:
		if ( cs == 0 )
		goto _out;
		p += 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		if ( p == eof )
		{
			index s8 __acts;
			uint __nacts;
			__acts = offset( _ErrAct_actions, _ErrAct_eof_actions[cs] );
			__nacts = cast(uint)deref( _ErrAct_actions, __acts ); __acts += 1;
			while ( __nacts > 0 ) {
				switch ( deref( _ErrAct_actions, __acts ) ) {
					case 0{
						host( "working/erract5.rl", 43 ) ${ printf(" DIGIT PLUS MINUS\n"); }$
					}
					case 1{
						host( "working/erract5.rl", 44 ) ${ printf(" DIGIT\n"); }$
					}
					case 2{
						host( "working/erract5.rl", 45 ) ${ printf(" DIGIT DECIMAL\n"); }$
					}
				}
				__acts += 1;
				__nacts -= 1;
			}
		}
		
		_out: {}
	}
	host( "working/erract5.rl", 73 ) @{
	}
	
	- (int) finish;
	{
		if ( cs == ErrAct_error )
		return -1;
		else if ( cs >= ErrAct_first_final )
		return 1;
		return 0;
	}
	
	
	@@end
	
	#define BUFSIZE 1024
	
	void test( char *buf )
	{
		ErrAct *errAct = [[ErrAct alloc] init];
		[errAct initFsm];
		[errAct executeWithData:buf len:strlen(buf)];
		if ( [errAct finish] > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test( "1\n" );
		test( "+1\n" );
		test( "-1\n" );
		test( "1.1\n" );
		test( "+1.1\n" );
		test( "-1.1\n" );
		test( "a\n" );
		test( "-\n" );
		test( "+\n" );
		test( "-a\n" );
		test( "+b\n" );
		test( "1.\n" );
		test( "1d\n" );
		test( "1.d\n" );
		test( "1.1d\n" );
		return 0;
	}
	
}@