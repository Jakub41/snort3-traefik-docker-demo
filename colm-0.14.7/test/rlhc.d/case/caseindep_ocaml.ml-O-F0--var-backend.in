host( "working/caseindep_ocaml.rl", 1 ) @{(*
	* @@LANG: ocaml
	* @@GENERATED: true
	*)
	
	
	
	
	
	
	
	
}@
array int _indep_trans_keys( 0, 11 ) = { 1, 0, 2, 3, 9, 9, 8, 8, 10, 10, 10, 10, 11, 11, 0, 0, 5, 9, 4, 8, 6, 10, 6, 10, 7, 11, 1, 0, 0 };

array s8 _indep_char_class( 0, 11 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 5, 1, 1, 1, 6, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 9, 1, 1, 1, 10, 1, 1, 11, 0 };

array s8 _indep_index_offsets( 0, 33 ) = { 0, 0, 2, 3, 4, 5, 6, 7, 8, 13, 18, 23, 28, 33, 0 };

array s8 _indep_indices( 0, 12 ) = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 9, 10, 1, 1, 1, 10, 11, 1, 1, 1, 11, 12, 1, 1, 1, 12, 7, 1, 1, 1, 7, 0 };

array s8 _indep_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _indep_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _indep_cond_targs( 0, 13 ) = { 2, 0, 8, 3, 4, 5, 6, 7, 13, 9, 10, 11, 12, 0 };

array s8 _indep_cond_actions( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _indep_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _indep_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _indep_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _indep_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int indep_start = 1;
value int indep_first_final = 13;
value int indep_error = 0;

value int indep_en_main = 1;

host( "working/caseindep_ocaml.rl", 25 ) @{
	
	let exec data = 
	let buffer = String.create(1024) in 
	let blen :int ref = ref 0 in
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
}@
{
	cs = cast(int)indep_start;
}
host( "working/caseindep_ocaml.rl", 33 ) @{
}@
{
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	index int _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _indep_trans_keys, (cs<<1) );
				_inds = offset( _indep_indices, _indep_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 111 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_indep_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _indep_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _indep_trans_keys, _keys ) )
					_trans = cast(uint)deref( _indep_indices, _inds + cast(int)( _ic - cast(int)deref( _indep_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_indep_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_indep_index_defaults[cs];
				}
				
			}
			if ( _cont == 1 ) {
				cs = cast(int)_indep_cond_targs[_trans];
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/caseindep_ocaml.rl", 34 ) @{
	if !cs >= indep_first_final then
	print_string "ACCEPT\n"
	else
	print_string "FAIL\n"
	;;
	
	let () =
	exec "1hello\n";
	exec "1HELLO\n";
	exec "1HeLLo\n";
	exec "2hello\n";
	exec "2HELLO\n";
	exec "2HeLLo\n";
	exec "3hello\n";
	exec "3HELLO\n";
	exec "3HeLLo\n";
	exec "4hello\n";
	exec "4HELLO\n";
	exec "4HeLLo\n";
	exec "5hello\n";
	exec "5HELLO\n";
	exec "5HeLLo\n";
	exec "6hello\n";
	exec "6HELLO\n";
	exec "6HeLLo\n";
	()
	;;
	
}@