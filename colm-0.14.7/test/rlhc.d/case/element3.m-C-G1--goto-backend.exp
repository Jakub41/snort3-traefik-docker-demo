#include <stdio.h>
#include <Foundation/Foundation.h>

struct LangEl
{
	int key;
	char *name;
};

@interface Fsm : NSObject
{
	@public
	int cs;
};

// Initialize the machine. Invokes any init statement blocks. Returns 0
// if the machine begins in a non-accepting state and 1 if the machine
// begins in an accepting state.
- (int) initFsm;

// Execute the machine on a block of data. Returns -1 if after processing
// the data, the machine is in the error state and can never accept, 0 if
// the machine is in a non-accepting state and 1 if the machine is in an
// accepting state.
- (int) executeWithData:( struct LangEl *)data len:(int)len;

// Indicate that there is no more data. Returns -1 if the machine finishes
// in the error state and does not accept, 0 if the machine finishes
// in any other non-accepting state and 1 if the machine finishes in an
// accepting state.
- (int) finish;

@end;


@implementation Fsm



static const char  _Fsm_eof_actions [] = { 0, 0, 0, 2, 0 ,  };
static const char  _Fsm_nfa_targs [] = { 0, 0 ,  };
static const char  _Fsm_nfa_offsets [] = { 0, 0, 0, 0, 0 ,  };
static const char  _Fsm_nfa_push_actions [] = { 0, 0 ,  };
static const char  _Fsm_nfa_pop_trans [] = { 0, 0 ,  };
static const int  Fsm_start  = 1;
static const int  Fsm_first_final  = 3;
static const int  Fsm_error  = 0;
static const int  Fsm_en_main  = 1;
- (int) initFsm;
{

	{
		cs = ( int ) Fsm_start;
	}
	return 0;
}

- (int) executeWithData:( struct LangEl *)_data len:(int)_len;
{
	struct LangEl *p = _data;
	struct LangEl *pe = _data + _len;
	struct LangEl *eof = pe;
	
	{
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume:
		switch ( cs  ) {
			case 1:
			if ( (p->key) == 1  )
			{
				goto ctr0;
			}
			
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			switch ( (p->key) ) {
				case 2:
				{
					goto ctr0;
				}
				case 3:
				{
					goto ctr2;
				}
				
			}
			{
				goto ctr1;
			}
			case 3:
			{
				goto ctr1;
			}
			
		}
		ctr1: cs = 0;
		goto _again;
		ctr0: cs = 2;
		goto f0;
		ctr2: cs = 3;
		goto f0;
		
		f0:
		{
			printf("%s\n", p->name);
		}
		
		goto _again;
		
		_again:
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		if ( p == eof  )
		{
			switch ( _Fsm_eof_actions[cs] ) {
				case 2:
				{
					printf("accept\n");
				}
				
				break;
				
			}
		}
		
		
		_out: {}
	}
	if ( self->cs == Fsm_error ) 
	return -1;
	return ( self->cs >= Fsm_first_final ) ? 1 : 0;
}

- (int) finish;
{
	if ( self->cs == Fsm_error ) 
	return -1;
	return ( self->cs >= Fsm_first_final ) ? 1 : 0;
}


@end

int main()
{
	static Fsm *fsm;
	static struct LangEl lel[] = { 
		{1, "one"}, 
		{2, "two-a"}, 
		{2, "two-b"}, 
		{2, "two-c"}, 
		{3, "three"}
	};
	
	fsm = [[Fsm alloc] init];
	[fsm initFsm];
	[fsm executeWithData:lel len:5];
	[fsm finish];
	
	return 0;
}

@interface Fsm2 : NSObject
{
	// The current state may be read and written to from outside of the
	// machine.  From within action code, curs is -1 and writing to it has no
	// effect.
	@public
	int cs;
	
	@protected
	
}

// Execute the machine on a block of data. Returns -1 if after processing
// the data, the machine is in the error state and can never accept, 0 if
// the machine is in a non-accepting state and 1 if the machine is in an
// accepting state.
- (int)
executeWithElements:(int) elements
length:(unsigned)length;

@end

@implementation Fsm2
- (int)
executeWithElements:(int)elements
length:(unsigned)length;
{
	return 0;
}
@end

