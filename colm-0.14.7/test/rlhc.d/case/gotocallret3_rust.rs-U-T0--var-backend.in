host( "working/gotocallret3_rust.rl", 1 ) @{//
	// @@LANG: rust
	// @@GENERATED: true
	//
	
	static mut comm : u8 = 0;
	static mut top : i32 = 0;
	static mut stack : [ i32 ; 32] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
	
	
	
	
	
}@
array s8 _gotocallret_actions( 0, 8 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 5, 1, 7, 1, 8, 2, 0, 1, 2, 4, 6, 0 };

array s8 _gotocallret_key_offsets( 0, 18 ) = { 0, 0, 1, 2, 3, 4, 8, 10, 14, 14, 18, 0 };

array u8 _gotocallret_trans_keys( 0, 122 ) = { 32, 10, 10, 10, 65, 90, 97, 122, 48, 57, 48, 57, 97, 122, 65, 90, 97, 122, 48, 57, 0 };

array s8 _gotocallret_single_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };

array s8 _gotocallret_range_lengths( 0, 2 ) = { 0, 0, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0 };

array s8 _gotocallret_index_offsets( 0, 20 ) = { 0, 0, 2, 4, 6, 8, 11, 13, 16, 17, 20, 0 };

array s8 _gotocallret_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _gotocallret_trans_offsets( 0, 21 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 };

array s8 _gotocallret_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _gotocallret_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _gotocallret_cond_targs( 0, 10 ) = { 2, 0, 7, 0, 8, 4, 8, 4, 9, 9, 0, 10, 0, 1, 1, 0, 0, 9, 9, 0, 10, 0, 0 };

array s8 _gotocallret_cond_actions( 0, 18 ) = { 18, 13, 11, 13, 15, 1, 3, 0, 0, 0, 7, 0, 7, 9, 9, 13, 0, 0, 0, 7, 0, 7, 0 };

array s8 _gotocallret_eof_actions( 0, 13 ) = { 0, 13, 13, 5, 5, 7, 7, 0, 5, 0, 0, 0 };

array s8 _gotocallret_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _gotocallret_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _gotocallret_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _gotocallret_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int gotocallret_start = 7;
value int gotocallret_first_final = 7;
value int gotocallret_error = 0;

value int gotocallret_en_garble_line = 3;
value int gotocallret_en_alp_comm = 5;
value int gotocallret_en_dig_comm = 6;
value int gotocallret_en_main = 7;

host( "working/gotocallret3_rust.rl", 63 ) @{
	
	unsafe fn m( s: String )
	{
		let data: &[u8] = s.as_bytes();
		let mut p:i32 = 0;
		let mut pe:i32 = s.len() as i32;
		let mut eof:i32 = s.len() as i32;
		let mut cs: i32 = 0;
		let mut buffer = String::new();
		
	}@
	{
		cs = cast(int)gotocallret_start;
		top = 0;
	}
	host( "working/gotocallret3_rust.rl", 74 ) @{
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index u8 _keys;
		index s8 _ckeys;
		int _cpc;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						index s8 __acts;
						uint __nacts;
						__acts = offset( _gotocallret_actions, _gotocallret_eof_actions[cs] );
						__nacts = cast(uint)deref( _gotocallret_actions, __acts );
						__acts += 1;
						while ( __nacts > 0 ) {
							switch ( deref( _gotocallret_actions, __acts ) ) {
								case 2 {
									host( "working/gotocallret3_rust.rl", 20 ) ${print!( "{}", "error: failed to recover\n" );
									}$
								}
								case 3 {
									host( "working/gotocallret3_rust.rl", 30 ) ${${p = p - 1; }$${top-= 1;cs = stack[top]; }$}$
								}
								case 8 {
									host( "working/gotocallret3_rust.rl", 57 ) ${${p = p - 1; }$${cs = 3;}$}$
								}
							}
							__nacts -= 1;
							__acts += 1;
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _gotocallret_trans_keys, _gotocallret_key_offsets[cs] );
					_trans = cast(uint)_gotocallret_index_offsets[cs];
					_have = 0;
					
					_klen = cast(int)_gotocallret_single_lengths[cs];
					if ( _klen > 0 ) {
						index u8 _lower;
						index u8 _mid;
						index u8 _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _gotocallret_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _gotocallret_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_gotocallret_range_lengths[cs];
						if ( _klen > 0 ) {
							index u8 _lower;
							index u8 _mid;
							index u8 _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _gotocallret_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _gotocallret_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _gotocallret_cond_keys, _gotocallret_trans_offsets[_trans] );
					_klen = cast(int)_gotocallret_trans_lengths[_trans];
					_cond = cast(uint)_gotocallret_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _gotocallret_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _gotocallret_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							cs = 0;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					cs = cast(int)_gotocallret_cond_targs[_cond];
					
					if ( _gotocallret_cond_actions[_cond] != 0 ) {
						_acts = offset( _gotocallret_actions, _gotocallret_cond_actions[_cond] );
						_nacts = cast(uint)deref( _gotocallret_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _gotocallret_actions, _acts ) )
							{
								case 0 {
									host( "working/gotocallret3_rust.rl", 17 ) ${print!( "{}", "error: garbling line\n" );
									}$
								}
								case 1 {
									host( "working/gotocallret3_rust.rl", 19 ) ${${cs = 7;}$}$
								}
								case 3 {
									host( "working/gotocallret3_rust.rl", 30 ) ${${p = p - 1; }$${top-= 1;cs = stack[top]; }$}$
								}
								case 4 {
									host( "working/gotocallret3_rust.rl", 38 ) ${if ( comm >= 97 )
										{
											${stack[top] = cs; top += 1;cs = 5;}$} 
										else {
											${stack[top] = cs; top += 1;cs = 6;}$}
									}$
								}
								case 5 {
									host( "working/gotocallret3_rust.rl", 49 ) ${comm = ={( deref( data, p ))}=;
									}$
								}
								case 6 {
									host( "working/gotocallret3_rust.rl", 50 ) ${print!( "{}", "prints\n" );
									}$
								}
								case 7 {
									host( "working/gotocallret3_rust.rl", 52 ) ${print!( "{}", "correct command\n" );
									}$
								}
								case 8 {
									host( "working/gotocallret3_rust.rl", 57 ) ${${p = p - 1; }$${cs = 3;}$}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}
			}
		}
	}
	host( "working/gotocallret3_rust.rl", 75 ) @{
		
		if ( cs >= gotocallret_first_final ) {
			println!( "ACCEPT" );
		}
		else {
			println!( "FAIL" );
		}
	}
	
	fn main()
	{
		unsafe { m( "lkajsdf\n".to_string() ); }
		unsafe { m( "2134\n".to_string() ); }
		unsafe { m( "(\n".to_string() ); }
		unsafe { m( "\n".to_string() ); }
		unsafe { m( "*234234()0909 092 -234aslkf09`1 11\n".to_string() ); }
		unsafe { m( "1\n".to_string() ); }
		unsafe { m( "909\n".to_string() ); }
		unsafe { m( "1 a\n".to_string() ); }
		unsafe { m( "11 1\n".to_string() ); }
		unsafe { m( "a 1\n".to_string() ); }
		unsafe { m( "aa a\n".to_string() ); }
		unsafe { m( "1 1\n".to_string() ); }
		unsafe { m( "1 123456\n".to_string() ); }
		unsafe { m( "a a\n".to_string() ); }
		unsafe { m( "a abcdef\n".to_string() ); }
		unsafe { m( "h".to_string() ); }
		unsafe { m( "a aa1".to_string() ); }
	}
	
}@