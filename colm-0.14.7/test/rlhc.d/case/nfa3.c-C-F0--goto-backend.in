host( "working/nfa3.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stddef.h>
	#include <stdint.h>
	#include <stdlib.h> 
	#include <stdbool.h>
	#include <string.h>
	#include <stdio.h>
	
	const char s[4096];
	
	struct nfa_stack
	{
		void *data;
		unsigned long sz;
	};
	
	struct nfa_bp_rec
	{
		long state;
		const char *p;
		long popTrans;
		long q_2;
	};
	
	
	
}@
array s8 _atoi_actions( 0, 9 ) = { 0, 0, 1, 2, 1, 3, 1, 0, 2, 3, 5, 2, 3, 6, 2, 3, 7, 3, 3, 9, 4, 0 };

array char _atoi_trans_keys( 0, 3 ) = { 1, 0, 3, 3, 1, 0, 0, 0, 1, 0, 1, 0, 2, 2, 1, 0, 0 };

array s8 _atoi_char_class( 0, 3 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0 };

array s8 _atoi_index_offsets( 0, 3 ) = { 0, 0, 1, 1, 2, 2, 2, 3, 0 };

array s8 _atoi_indices( 0, 3 ) = { 0, 2, 3, 0 };

array s8 _atoi_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _atoi_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, 0 };

array s8 _atoi_trans_offsets( 0, 3 ) = { 0, 1, 2, 3, 0 };

array s8 _atoi_cond_targs( 0, 7 ) = { 2, 0, 4, 7, 0 };

array s8 _atoi_cond_actions( 0, 6 ) = { 0, 0, 0, 6, 0 };

array s8 _atoi_nfa_targs( 0, 6 ) = { 0, 1, 3, 3, 6, 3, 5, 0 };

array s8 _atoi_nfa_offsets( 0, 3 ) = { 0, 0, 1, 0, 3, 0, 0, 0, 0 };

array s8 _atoi_nfa_push_actions( 0, 1 ) = { 0, 0, 1, 0, 1, 1, 1, 0 };

array s8 _atoi_nfa_pop_trans( 0, 7 ) = { 0, 0, 4, 0, 7, 6, 5, 0 };

value int atoi_start = 1;
value int atoi_first_final = 7;
value int atoi_error = 0;

value int atoi_en_main = 1;

host( "working/nfa3.rl", 55 ) @{
	
	int test( const char *p, bool a, bool b )
	{
		int len = strlen( p ) + 1;
		const char *pe = p + len;
		int cs;
		
		struct nfa_bp_rec *nfa_bp = (struct nfa_bp_rec*) s;
		long nfa_len = 0;
		long nfa_count = 0;
		
		long q_2 = 0;
		
		printf( "testing: %s %d %d\n", p, a, b );
		
	}@
	{
		cs = cast(int)atoi_start;
		nfa_len = 0;
	}
	
	{
		int _trans = 0;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				if ( _atoi_nfa_offsets[cs] ) {
					int alt = 0; 
					int new_recs = _atoi_nfa_targs[cast(int)_atoi_nfa_offsets[cs]];
					while ( alt < new_recs ) { 
						nfa_bp[nfa_len].state = _atoi_nfa_targs[cast(int)_atoi_nfa_offsets[cs] + 1 + alt];
						nfa_bp[nfa_len].p = p;
						nfa_bp[nfa_len].popTrans = cast(long)_atoi_nfa_offsets[cs] + 1 + alt;
						
						switch ( _atoi_nfa_push_actions[cast(int)_atoi_nfa_offsets[cs] + 1 + alt] ) {
							case 1 {
								host( "working/nfa3.rl", 34 ) ${ nfa_bp[nfa_len].q_2 = q_2; }$
							}
						}
						nfa_len += 1;
						alt += 1;
					}
				}
				_keys = offset( _atoi_trans_keys, (cs<<1) );
				_inds = offset( _atoi_indices, _atoi_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 97 && ( deref( data, p )) >= 46 )
				{
					int _ic = cast(int)_atoi_char_class[cast(int)( deref( data, p )) - 46];
					if ( _ic <= cast(int)deref( _atoi_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _atoi_trans_keys, _keys ) )
					_trans = cast(int)deref( _atoi_indices, _inds + cast(int)( _ic - cast(int)deref( _atoi_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_atoi_index_defaults[cs];
				}
				else {
					_trans = cast(int)_atoi_index_defaults[cs];
				}
				
				_cond = cast(uint)_atoi_trans_offsets[_trans];
				
				_cpc = 0;
				switch ( _atoi_trans_cond_spaces[_trans] ) {
					
				}
				_cond += cast(uint)_cpc;
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_atoi_cond_targs[_cond];
				
				if ( _atoi_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = offset( _atoi_actions, _atoi_cond_actions[_cond] );
				_nacts = cast(uint)deref( _atoi_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _atoi_actions, _acts ) )
					{
						case 0 {
							host( "working/nfa3.rl", 51 ) ${ printf( " --> MATCH\n" ); }$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
		if ( nfa_len > 0 ) {
			nfa_count += 1;
			nfa_len -= 1;
			p = nfa_bp[nfa_len].p;
			int _pop_test = 1;
			switch ( _atoi_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
				case 5 {
					_pop_test = host( "working/nfa3.rl", 35 ) ={ ({ q_2 = nfa_bp[nfa_len].q_2; 1; }) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/nfa3.rl", 37 ) ={ ({ 1; }) }=;
					
				}
				case 6 {
					_pop_test = host( "working/nfa3.rl", 35 ) ={ ({ q_2 = nfa_bp[nfa_len].q_2; 1; }) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/nfa3.rl", 38 ) ={ ({ ++q_2 < 2; }) }=;
					
				}
				case 7 {
					_pop_test = host( "working/nfa3.rl", 35 ) ={ ({ q_2 = nfa_bp[nfa_len].q_2; 1; }) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/nfa3.rl", 39 ) ={ ({ ++q_2 >= 2; }) }=;
					
				}
				case 4 {
					_pop_test = host( "working/nfa3.rl", 35 ) ={ ({ q_2 = nfa_bp[nfa_len].q_2; 1; }) }=;
					if ( !_pop_test ) break;
					_cpc = 0;
					if ( host( "working/nfa3.rl", 31 ) ={a}= ) _cpc += 1;
					if ( host( "working/nfa3.rl", 32 ) ={b}= ) _cpc += 2;
					_pop_test = _cpc == 1 || _cpc == 3;
					if ( !_pop_test ) break;
					_pop_test = host( "working/nfa3.rl", 36 ) ={ ({  q_2 = 0; 1; }) }=;
					
				}
			}
			if ( _pop_test ) {
				cs = nfa_bp[nfa_len].state;
				goto _resume;
			}
			goto _out;
		}
	}
	host( "working/nfa3.rl", 73 ) @{
		
		return 0;
	}
	
	int main()
	{
		test( "a.;", 0, 0 );
		test( "a.;", 0, 1 );
		test( "a.;", 1, 0 );
		test( "a.;", 1, 1 );
		test( "a..;", 0, 0 );
		test( "a..;", 0, 1 );
		test( "a..;", 1, 0 );
		test( "a..;", 1, 1 );
		test( "a...;", 0, 0 );
		test( "a...;", 0, 1 );
		test( "a...;", 1, 0 );
		test( "a...;", 1, 1 );
		return 0;
	}
	
}@