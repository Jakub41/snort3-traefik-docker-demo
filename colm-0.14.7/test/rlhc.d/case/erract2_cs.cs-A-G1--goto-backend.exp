using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
	
	
	
	
	
	
		static readonly sbyte  []_erract_eof_actions = { 0, 1, 3, 3, 3, 3, 5, 0, 0,  };
		static readonly sbyte  []_erract_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_erract_nfa_offsets = { 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_erract_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_erract_nfa_pop_trans = { 0, 0,  };
		static readonly int  erract_start  = 1;
		static readonly int  erract_first_final  = 7;
		static readonly int  erract_error  = 0;
		static readonly int  erract_en_main  = 1;
		int cs;
		
		void init()
		{
		
			{
				cs = (int)erract_start;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				if ( p == pe  )
				goto _test_eof;
				
				if ( cs == 0 )
				goto _out;
				
				_resume:
				switch ( cs  ) {
					case 1:
					if ( ( data[p ]) == '\u0068' )
					{
						goto ctr1;
					}
					
					{
						goto ctr0;
					}
					case 0:
					goto _out;
					case 2:
					if ( ( data[p ]) == '\u0065' )
					{
						goto ctr3;
					}
					
					{
						goto ctr2;
					}
					case 3:
					if ( ( data[p ]) == '\u006c' )
					{
						goto ctr4;
					}
					
					{
						goto ctr2;
					}
					case 4:
					if ( ( data[p ]) == '\u006c' )
					{
						goto ctr5;
					}
					
					{
						goto ctr2;
					}
					case 5:
					if ( ( data[p ]) == '\u006f' )
					{
						goto ctr6;
					}
					
					{
						goto ctr2;
					}
					case 6:
					if ( ( data[p ]) == '\u000a' )
					{
						goto ctr8;
					}
					
					{
						goto ctr7;
					}
					case 7:
					{
						goto ctr9;
					}
					
				}
				ctr9: cs = 0;
				goto _again;
				ctr0: cs = 0;
				goto f1;
				ctr2: cs = 0;
				goto f3;
				ctr7: cs = 0;
				goto f5;
				ctr1: cs = 2;
				goto _again;
				ctr3: cs = 3;
				goto _again;
				ctr4: cs = 4;
				goto _again;
				ctr5: cs = 5;
				goto _again;
				ctr6: cs = 6;
				goto _again;
				ctr8: cs = 7;
				goto _again;
				
				f1:
				{Console.Write( "err_start\n" );}
				{Console.Write( "err_all\n" );}
				
				goto _again;
				f3:
				{Console.Write( "err_all\n" );}
				{Console.Write( "err_middle\n" );}
				
				goto _again;
				f5:
				{Console.Write( "err_all\n" );}
				{Console.Write( "err_out\n" );}
				
				goto _again;
				
				_again:
				if ( cs == 0 )
				goto _out;
				
				p+= 1;
				if ( p != pe  )
				goto _resume;
				
				_test_eof: {}
				if ( p == eof  )
				{
					switch ( _erract_eof_actions[cs]  ) {
						case 1:
						{Console.Write( "err_start\n" );}
						{Console.Write( "eof_start\n" );}
						{Console.Write( "err_all\n" );}
						{Console.Write( "eof_all\n" );}
						
						break;
						case 3:
						{Console.Write( "err_all\n" );}
						{Console.Write( "err_middle\n" );}
						{Console.Write( "eof_all\n" );}
						{Console.Write( "eof_middle\n" );}
						
						break;
						case 5:
						{Console.Write( "err_all\n" );}
						{Console.Write( "err_out\n" );}
						{Console.Write( "eof_all\n" );}
						{Console.Write( "eof_out\n" );}
						
						break;
						
					}
				}
				
				
				_out: {}
			}
		}
		
		void finish( )
		{
			if ( cs >= erract_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"",
			"h",
			"x",
			"he",
			"hx",
			"hel",
			"hex",
			"hell",
			"helx",
			"hello",
			"hellx",
			"hello\n",
			"hellox",
		};
		
		
		static readonly int inplen = 13;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
