using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
	
	
	
	
	
	
		static readonly sbyte  []_erract_actions = { 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0,  };
		static readonly char  []_erract_trans_keys = { '\u0001', '\u0000', '\u0003', '\u0003', '\u0002', '\u0002', '\u0004', '\u0004', '\u0004', '\u0004', '\u0005', '\u0005', '\u0000', '\u0000', '\u0001', '\u0000', '\u0000',  };
		static readonly sbyte  []_erract_char_class = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0,  };
		static readonly sbyte  []_erract_index_offsets = { 0, 0, 1, 2, 3, 4, 5, 6, 0,  };
		static readonly sbyte  []_erract_indices = { 1, 3, 4, 5, 6, 8, 0,  };
		static readonly sbyte  []_erract_index_defaults = { 0, 0, 2, 2, 2, 2, 7, 9, 0,  };
		static readonly sbyte  []_erract_trans_cond_spaces = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  };
		static readonly sbyte  []_erract_cond_targs = { 0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0,  };
		static readonly sbyte  []_erract_cond_actions = { 1, 0, 4, 0, 0, 0, 0, 7, 0, 0, 0,  };
		static readonly sbyte  []_erract_eof_actions = { 0, 10, 15, 15, 15, 15, 20, 0, 0,  };
		static readonly sbyte  []_erract_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_erract_nfa_offsets = { 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_erract_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_erract_nfa_pop_trans = { 0, 0,  };
		static readonly int  erract_start  = 1;
		static readonly int  erract_first_final  = 7;
		static readonly int  erract_error  = 0;
		static readonly int  erract_en_main  = 1;
		int cs;
		
		void init()
		{
		
			{
				cs = (int)erract_start;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				uint _trans = 0;
				uint _have = 0;
				uint _cont = 1;
				int _acts;
				uint _nacts;
				int _keys;
				int _inds;
				while ( _cont == 1 )
				{
				
					if ( cs == 0 )
					_cont = 0;
					
					_have = 0;
					if ( p == pe  )
					{
						if ( p == eof  )
						{
							if ( _have == 0 )
							{
								int __acts;
								uint __nacts;
								__acts = _erract_eof_actions[cs] ;
								__nacts = (uint )_erract_actions[__acts ];
								__acts += 1;
								while ( __nacts > 0 )
								{
									switch ( _erract_actions[__acts ] ) {
										case 0:
										{Console.Write( "err_start\n" );}
										
										break;
										case 1:
										{Console.Write( "err_all\n" );}
										
										break;
										case 2:
										{Console.Write( "err_middle\n" );}
										
										break;
										case 3:
										{Console.Write( "err_out\n" );}
										
										break;
										case 4:
										{Console.Write( "eof_start\n" );}
										
										break;
										case 5:
										{Console.Write( "eof_all\n" );}
										
										break;
										case 6:
										{Console.Write( "eof_middle\n" );}
										
										break;
										case 7:
										{Console.Write( "eof_out\n" );}
										
										break;
										
									}
									__nacts -= 1;
									__acts += 1;
								}
								
							}
							
						}
						
						
						if ( _have == 0 )
						_cont = 0;
						
					}
					
					if ( _cont == 1 )
					{
						if ( _have == 0 )
						{
							_keys = (cs<<1) ;
							_inds = _erract_index_offsets[cs] ;
							if ( ( data[p ]) <= 111&& ( data[p ]) >= 10 )
							{
								int _ic = (int)_erract_char_class[(int)( data[p ]) - 10];
								if ( _ic <= (int)_erract_trans_keys[_keys+1]&& _ic >= (int)_erract_trans_keys[_keys ] )
								_trans = (uint )_erract_indices[_inds + (int)( _ic - (int)_erract_trans_keys[_keys ])  ];
								
								else
								_trans = (uint )_erract_index_defaults[cs];
								
							}
							
							else
							{
								_trans = (uint )_erract_index_defaults[cs];
							}
							
							
						}
						
						if ( _cont == 1 )
						{
							cs = (int)_erract_cond_targs[_trans];
							if ( _erract_cond_actions[_trans] != 0 )
							{
								_acts = _erract_cond_actions[_trans] ;
								_nacts = (uint )_erract_actions[_acts ];
								_acts += 1;
								while ( _nacts > 0 )
								{
									switch ( _erract_actions[_acts ] ) {
										case 0:
										{Console.Write( "err_start\n" );}
										
										break;
										case 1:
										{Console.Write( "err_all\n" );}
										
										break;
										case 2:
										{Console.Write( "err_middle\n" );}
										
										break;
										case 3:
										{Console.Write( "err_out\n" );}
										
										break;
										
									}
									_nacts -= 1;
									_acts += 1;
								}
								
							}
							
							
							if ( cs == 0 )
							_cont = 0;
							
							if ( _cont == 1 )
							p += 1;
							
						}
					}
					
				}
				
			}
		}
		
		void finish( )
		{
			if ( cs >= erract_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"",
			"h",
			"x",
			"he",
			"hx",
			"hel",
			"hex",
			"hell",
			"helx",
			"hello",
			"hellx",
			"hello\n",
			"hellox",
		};
		
		
		static readonly int inplen = 13;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
