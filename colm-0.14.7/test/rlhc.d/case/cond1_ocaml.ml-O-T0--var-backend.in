host( "working/cond1_ocaml.rl", 1 ) @{(*
	* @@LANG: ocaml
	* @@GENERATED: true
	*)
	
	let i = ref 0
	let j = ref 0
	let k = ref 0
	
	
	
	
	
	
}@
array s8 _foo_actions( 0, 6 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 0, 1, 2, 0 };

array s8 _foo_key_offsets( 0, 20 ) = { 0, 0, 2, 4, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 0 };

array int _foo_trans_keys( 0, 99 ) = { 48, 49, 48, 49, 48, 49, 97, 98, 97, 98, 97, 98, 99, 10, 99, 99, 99, 99, 99, 99, 0 };

array s8 _foo_single_lengths( 0, 2 ) = { 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0 };

array s8 _foo_range_lengths( 0, 1 ) = { 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _foo_index_offsets( 0, 31 ) = { 0, 0, 2, 4, 6, 9, 12, 15, 17, 19, 21, 23, 25, 27, 29, 31, 0 };

array s8 _foo_trans_cond_spaces( -1, 5 ) = { -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _foo_trans_offsets( 0, 39 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 };

array s8 _foo_trans_lengths( 0, 7 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _foo_cond_keys( 0, 7 ) = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 3, 4, 5, 6, 7, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _foo_cond_targs( 0, 15 ) = { 2, 0, 3, 0, 4, 0, 5, 7, 0, 6, 11, 7, 12, 9, 13, 10, 14, 0, 6, 7, 9, 10, 0, 8, 0, 15, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 8, 0, 0, 0 };

array s8 _foo_cond_actions( 0, 24 ) = { 7, 0, 9, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 13, 0, 5, 0, 21, 0, 1, 0, 15, 0, 18, 0, 24, 0, 0, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 15;
value int foo_error = 0;

value int foo_en_main = 1;

host( "working/cond1_ocaml.rl", 78 ) @{
	
	let exec data = 
	let buffer = String.create(1024) in 
	let blen :int ref = ref 0 in
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
}@
{
	cs = cast(int)foo_start;
}
host( "working/cond1_ocaml.rl", 86 ) @{
}@
{
	int _klen;
	uint _trans = 0;
	uint _cond = 0;
	uint _have = 0;
	uint _cont = 1;
	index s8 _acts;
	uint _nacts;
	index int _keys;
	index s8 _ckeys;
	int _cpc;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _foo_trans_keys, _foo_key_offsets[cs] );
				_trans = cast(uint)_foo_index_offsets[cs];
				_have = 0;
				
				_klen = cast(int)_foo_single_lengths[cs];
				if ( _klen > 0 ) {
					index int _lower;
					index int _mid;
					index int _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( _upper >= _lower && _have == 0 ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _foo_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _foo_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
				}
				
				if ( _have == 0 ) {
					_klen = cast(int)_foo_range_lengths[cs];
					if ( _klen > 0 ) {
						index int _lower;
						index int _mid;
						index int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _foo_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _foo_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								_have = 1;
							}
						}
						if ( _have == 0 )
						_trans += cast(uint)_klen;
					}
				}
				
				_ckeys = offset( _foo_cond_keys, _foo_trans_offsets[_trans] );
				_klen = cast(int)_foo_trans_lengths[_trans];
				_cond = cast(uint)_foo_trans_offsets[_trans];
				_have = 0;
				
				_cpc = 0;
				switch ( _foo_trans_cond_spaces[_trans] ) {
					
					case 0 {
						if ( host( "working/cond1_ocaml.rl", 13 ) ={i .contents != 0}= ) _cpc += 1;
					}
					case 1 {
						if ( host( "working/cond1_ocaml.rl", 14 ) ={j .contents != 0}= ) _cpc += 1;
					}
					case 2 {
						if ( host( "working/cond1_ocaml.rl", 15 ) ={k .contents != 0}= ) _cpc += 1;
					}
					case 3 {
						if ( host( "working/cond1_ocaml.rl", 13 ) ={i .contents != 0}= ) _cpc += 1;
						if ( host( "working/cond1_ocaml.rl", 14 ) ={j .contents != 0}= ) _cpc += 2;
					}
					case 4 {
						if ( host( "working/cond1_ocaml.rl", 14 ) ={j .contents != 0}= ) _cpc += 1;
						if ( host( "working/cond1_ocaml.rl", 15 ) ={k .contents != 0}= ) _cpc += 2;
					}
					case 5 {
						if ( host( "working/cond1_ocaml.rl", 13 ) ={i .contents != 0}= ) _cpc += 1;
						if ( host( "working/cond1_ocaml.rl", 14 ) ={j .contents != 0}= ) _cpc += 2;
						if ( host( "working/cond1_ocaml.rl", 15 ) ={k .contents != 0}= ) _cpc += 4;
					}
				}
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( _have == 0 && _lower <= _upper ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _foo_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _foo_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						cs = 0;
						_cont = 0;
					}
				}
			}
			if ( _cont == 1 ) {
				cs = cast(int)_foo_cond_targs[_cond];
				
				if ( _foo_cond_actions[_cond] != 0 ) {
					_acts = offset( _foo_actions, _foo_cond_actions[_cond] );
					_nacts = cast(uint)deref( _foo_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _foo_actions, _acts ) )
						{
							case 0 {
								host( "working/cond1_ocaml.rl", 16 ) ${print_string( "  one\n" );
								}$
							}
							case 1 {
								host( "working/cond1_ocaml.rl", 18 ) ${print_string( "  two\n" );
								}$
							}
							case 2 {
								host( "working/cond1_ocaml.rl", 20 ) ${print_string( "  three\n" );
								}$
							}
							case 3 {
								host( "working/cond1_ocaml.rl", 23 ) ${if ={( deref( data, p ))}= == 48  then
									begin
									i := 0;
									
									end 
									else
									begin
									i := 1;
									
									end
									;
								}$
							}
							case 4 {
								host( "working/cond1_ocaml.rl", 35 ) ${if ={( deref( data, p ))}= == 48  then
									begin
									j := 0;
									
									end 
									else
									begin
									j := 1;
									
									end
									;
								}$
							}
							case 5 {
								host( "working/cond1_ocaml.rl", 47 ) ${if ={( deref( data, p ))}= == 48  then
									begin
									k := 0;
									
									end 
									else
									begin
									k := 1;
									
									end
									;
								}$
							}
							case 6 {
								host( "working/cond1_ocaml.rl", 60 ) ${${p+= 1; _cont = 0; }$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}
		}
	}
}
host( "working/cond1_ocaml.rl", 87 ) @{
	if !cs >= foo_first_final then
	print_string "ACCEPT\n"
	else
	print_string "FAIL\n"
	;;
	
	let () =
	exec "000abc\n";
	exec "100abc\n";
	exec "010abc\n";
	exec "110abc\n";
	exec "001abc\n";
	exec "101abc\n";
	exec "011abc\n";
	exec "111abc\n";
	()
	;;
	
}@