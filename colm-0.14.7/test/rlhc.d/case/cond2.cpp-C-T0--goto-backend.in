host( "working/cond2.rl", 1 ) @{/* 
	* @@LANG: c++
	*/
	
	#include <iostream>
	#include <string.h>
	using std::cout;
	using std::endl;
	
	
	
}@
array s8 _foo_actions( 0, 2 ) = { 0, 1, 0, 1, 1, 2, 0, 1, 0 };

array s8 _foo_key_offsets( 0, 3 ) = { 0, 0, 3, 3, 0 };

array char _foo_trans_keys( 0, 122 ) = { 10, 97, 122, 10, 97, 122, 0 };

array s8 _foo_single_lengths( 0, 1 ) = { 0, 1, 0, 1, 0 };

array s8 _foo_range_lengths( 0, 1 ) = { 0, 1, 0, 1, 0 };

array s8 _foo_index_offsets( 0, 4 ) = { 0, 0, 3, 4, 0 };

array s8 _foo_trans_cond_spaces( -1, 2 ) = { 2, -1, -1, -1, 2, -1, -1, 0 };

array s8 _foo_trans_offsets( 0, 10 ) = { 0, 3, 4, 5, 6, 9, 10, 0 };

array s8 _foo_trans_lengths( 0, 3 ) = { 3, 1, 1, 1, 3, 1, 1, 0 };

array s8 _foo_cond_keys( 0, 3 ) = { 1, 2, 3, 0, 0, 0, 1, 2, 3, 0, 0, 0 };

array s8 _foo_cond_targs( 0, 3 ) = { 1, 2, 3, 1, 0, 0, 1, 2, 3, 1, 0, 0 };

array s8 _foo_cond_actions( 0, 5 ) = { 1, 3, 5, 0, 0, 0, 1, 3, 5, 0, 0, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 2;

value int foo_en_main = 1;

host( "working/cond2.rl", 27 ) @{
	
	void test( int i, int j, const char *str )
	{
		int cs = foo_start;
		const char *p = str;
		const char *pe = str + strlen( str );
		
		cout << "run:" << endl;
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _foo_trans_keys, _foo_key_offsets[cs] );
				_trans = cast(uint)_foo_index_offsets[cs];
				
				_klen = cast(int)_foo_single_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _foo_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _foo_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_foo_range_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _foo_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _foo_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _foo_cond_keys, _foo_trans_offsets[_trans] );
				_klen = cast(int)_foo_trans_lengths[_trans];
				_cond = cast(uint)_foo_trans_offsets[_trans];
				
				_cpc = 0;
				switch ( _foo_trans_cond_spaces[_trans] ) {
					
					case 0 {
						if ( host( "working/cond2.rl", 13 ) ={i}= ) _cpc += 1;
					}
					case 1 {
						if ( host( "working/cond2.rl", 14 ) ={j}= ) _cpc += 1;
					}
					case 2 {
						if ( host( "working/cond2.rl", 13 ) ={i}= ) _cpc += 1;
						if ( host( "working/cond2.rl", 14 ) ={j}= ) _cpc += 2;
					}
				}
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _foo_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _foo_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_foo_cond_targs[_cond];
				
				if ( _foo_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = offset( _foo_actions, _foo_cond_actions[_cond] );
				_nacts = cast(uint)deref( _foo_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( deref( _foo_actions, _acts ) )
					{
						case 0 {
							host( "working/cond2.rl", 16 ) ${ cout << "  one" << endl;}$
						}
						case 1 {
							host( "working/cond2.rl", 17 ) ${ cout << "  two" << endl;}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/cond2.rl", 36 ) @{
		if ( cs >= foo_first_final )
		cout << "  success" << endl;
		else
		cout << "  failure" << endl;
		cout << endl;
	}
	
	int main()
	{
		test( 0, 0, "hi\n\n" );
		test( 1, 0, "hi\n\n" );
		test( 0, 1, "hi\n" );
		test( 0, 1, "hi\n\n" );
		test( 1, 1, "hi\n" );
		test( 1, 1, "hi\n\n" );
		test( 1, 1, "hi\n\nx" );
		return 0;
	}
	
}@