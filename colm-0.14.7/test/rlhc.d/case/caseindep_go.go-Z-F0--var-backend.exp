package main
import "fmt"






var cs int;
var blen int;
var buffer [1024] byte;

var _indep_trans_keys [] byte  = [] byte  { 1, 0, 2, 3, 9, 9, 8, 8, 10, 10, 10, 10, 11, 11, 0, 0, 5, 9, 4, 8, 6, 10, 6, 10, 7, 11, 1, 0, 0 }
var _indep_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 1, 5, 1, 1, 1, 6, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1, 9, 1, 1, 1, 10, 1, 1, 11, 0  }
var _indep_index_offsets [] int8  = [] int8  { 0, 0, 2, 3, 4, 5, 6, 7, 8, 13, 18, 23, 28, 33, 0  }
var _indep_indices [] int8  = [] int8  { 0, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 9, 10, 1, 1, 1, 10, 11, 1, 1, 1, 11, 12, 1, 1, 1, 12, 7, 1, 1, 1, 7, 0  }
var _indep_index_defaults [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _indep_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _indep_cond_targs [] int8  = [] int8  { 2, 0, 8, 3, 4, 5, 6, 7, 13, 9, 10, 11, 12, 0  }
var _indep_cond_actions [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _indep_nfa_targs [] int8  = [] int8  { 0, 0  }
var _indep_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _indep_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _indep_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var indep_start  int  = 1
var indep_first_final  int  = 13
var indep_error  int  = 0
var indep_en_main  int  = 1
func prepare() {

	{
		cs = int(indep_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		var  _trans  uint   = 0
		var  _have  uint   = 0
		var  _cont  uint   = 1
		var  _keys int
		var  _inds int
		for _cont == 1  {
			{
			
				if cs == 0  {
					_cont = 0;
					
				}
				_have = 0;
				if p == pe  {
					{
						if _have == 0  {
							_cont = 0;
							
						}
					}
					
				}
				if _cont == 1  {
					{
						if _have == 0  {
							{
								_keys = int((cs<<1) );
								_inds = int(_indep_index_offsets[cs] );
								switch {
									case ( data[p ]) <= 111 && ( data[p ]) >= 10 :
									{
										var  _ic  int   = int(_indep_char_class[int(( data[p ]) )- 10])
										switch {
											case _ic <= int(_indep_trans_keys[_keys+1 ])&& _ic >= int(_indep_trans_keys[_keys ]):
											_trans = uint(_indep_indices[_inds + int(( _ic - int(_indep_trans_keys[_keys ]))  )]);
											
											default:
											_trans = uint(_indep_index_defaults[cs]);
											
										}
									}
									
									default:
									{
										_trans = uint(_indep_index_defaults[cs]);
									}
									
									
								}
							}
							
						}
						if _cont == 1  {
							{
								cs = int(_indep_cond_targs[_trans]);
								if cs == 0  {
									_cont = 0;
									
								}
								if _cont == 1  {
									p += 1;
									
								}
							}
						}
					}
					
				}
			}
			
		}
	}
}
func finish() {
	if cs >= indep_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"1hello\n",
	"1HELLO\n",
	"1HeLLo\n",
	"2hello\n",
	"2HELLO\n",
	"2HeLLo\n",
	"3hello\n",
	"3HELLO\n",
	"3HeLLo\n",
	"4hello\n",
	"4HELLO\n",
	"4HeLLo\n",
	"5hello\n",
	"5HELLO\n",
	"5HeLLo\n",
	"6hello\n",
	"6HELLO\n",
	"6HeLLo\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
