const _patact_actions = Int8[0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 2, 2, 6, 2, 2, 7, 2, 2, 17, 2, 2, 18, 0 , ]
const _patact_key_offsets = Int8[0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 25, 28, 32, 35, 41, 43, 45, 53, 56, 60, 63, 0 , ]
const _patact_trans_keys = UInt8[102, 111, 105, 108, 102, 111, 105, 108, 102, 111, 105, 108, 102, 111, 105, 108, 10, 32, 33, 50, 59, 48, 57, 97, 122, 32, 48, 57, 32, 50, 48, 57, 32, 97, 122, 10, 32, 48, 57, 97, 122, 48, 57, 97, 122, 10, 32, 33, 50, 48, 57, 97, 122, 32, 48, 57, 32, 50, 48, 57, 32, 97, 122, 59, 0 , ]
const _patact_single_lengths = Int8[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 2, 1, 2, 0, 0, 4, 1, 2, 1, 1, 0 , ]
const _patact_range_lengths = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0, 0 , ]
const _patact_index_offsets = Int8[0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 40, 43, 47, 50, 55, 57, 59, 66, 69, 73, 76, 0 , ]
const _patact_trans_cond_spaces = Int8[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , ]
const _patact_trans_offsets = Int8[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0 , ]
const _patact_trans_lengths = Int8[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , ]
const _patact_cond_keys = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _patact_cond_targs = Int8[2, 17, 3, 17, 4, 17, 17, 17, 6, 17, 7, 17, 8, 17, 17, 17, 10, 24, 11, 24, 12, 24, 24, 24, 14, 24, 15, 24, 16, 24, 24, 24, 17, 17, 17, 19, 17, 18, 20, 0, 1, 18, 17, 1, 18, 18, 17, 5, 20, 17, 21, 21, 22, 23, 0, 22, 21, 23, 21, 24, 24, 24, 26, 25, 27, 0, 9, 25, 24, 9, 25, 25, 24, 13, 27, 24, 28, 0, 17, 17, 17, 17, 17, 17, 17, 17, 24, 24, 24, 24, 24, 24, 24, 24, 17, 17, 17, 21, 21, 24, 24, 24, 0 , ]
const _patact_cond_actions = Int8[0, 47, 0, 47, 0, 47, 35, 47, 0, 45, 0, 45, 0, 45, 31, 45, 0, 27, 0, 27, 0, 27, 17, 27, 0, 25, 0, 25, 0, 25, 13, 25, 33, 33, 39, 58, 37, 58, 5, 0, 0, 58, 47, 0, 55, 58, 43, 0, 5, 41, 7, 7, 0, 0, 0, 0, 11, 0, 9, 15, 15, 19, 52, 52, 5, 0, 0, 52, 27, 0, 49, 52, 23, 0, 5, 21, 29, 0, 47, 47, 47, 47, 45, 45, 45, 45, 27, 27, 27, 27, 25, 25, 25, 25, 47, 43, 41, 11, 9, 27, 23, 21, 0 , ]
const _patact_to_state_actions = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0 , ]
const _patact_from_state_actions = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 3, 0 , ]
const _patact_eof_trans_indexed = Int8[0, 18, 18, 18, 18, 20, 20, 20, 20, 36, 36, 36, 36, 38, 38, 38, 38, 0, 18, 25, 26, 0, 32, 33, 0, 36, 42, 43, 0, 0 , ]
const _patact_eof_trans_direct = Int8[0, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 0, 95, 96, 97, 0, 98, 99, 0, 100, 101, 102, 0, 0 , ]
const _patact_nfa_targs = Int8[0, 0 , ]
const _patact_nfa_offsets = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _patact_nfa_push_actions = Int8[0, 0 , ]
const _patact_nfa_pop_trans = Int8[0, 0 , ]
const patact_start  = 17
const patact_first_final  = 17
const patact_error  = 0
const patact_en_other  = 21
const patact_en_exec_test  = 24
const patact_en_semi  = 28
const patact_en_main  = 17
function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	comm = 0;
	top = 0;
	stack = Int [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
	ts = 0;
	te = 0;
	act = 0;
	value = 0;
	
	cs = convert(Int, patact_start )
	ts = 0
	te = 0
	act = 0
	_klen= 0
	;
	_trans = 0;
	_cond = 0;
	_have = 0;
	_cont = 1;
	_acts = 0;
	_nacts= 0
	;
	_keys = 0;
	_ckeys = 0;
	_cpc= 0
	;
	while _cont == 1 
		if cs == 0 
			_cont = 0
			
		end
		_have = 0
		if p == pe 
			if p == eof 
				if _patact_eof_trans_direct[1+(cs)]> 0 
					_trans = convert(UInt, _patact_eof_trans_direct[1+(cs)] )- 1
					_cond = convert(UInt, _patact_trans_offsets[1+(_trans)] )
					_have = 1
					
				end
				if _have == 0 
					
				end
				
			end
			if _have == 0 
				_cont = 0
				
			end
			
		end
		if _cont == 1 
			if _have == 0 
				_acts = _patact_from_state_actions[1+(cs)]
				_nacts = convert(UInt, _patact_actions[1+(_acts )] )
				_acts += 1
				while _nacts > 0 
					if _patact_actions[1+(_acts )] == 1 
						{
							ts = p
							
						}
						
					end
					_nacts -= 1
					_acts += 1
					
				end
				_keys = _patact_key_offsets[1+(cs)]
				_trans = convert(UInt, _patact_index_offsets[1+(cs)] )
				_have = 0
				_klen = convert(Int, _patact_single_lengths[1+(cs)] )
				if _klen > 0 
					_lower = 0;
					_mid = 0;
					_upper = 0;
					_lower = _keys
					_upper = _keys + _klen - 1
					while _upper >= _lower && _have == 0 
						_mid = _lower + ((_upper-_lower)>> 1)
						if (data[1+(p )])< _patact_trans_keys[1+(_mid )]
							_upper = _mid - 1
							
						elseif (data[1+(p )])> _patact_trans_keys[1+(_mid )]
							_lower = _mid + 1
							
						else
							_trans += convert(UInt, (_mid - _keys) )
							_have = 1
							
						end
						
					end
					if _have == 0 
						_keys += _klen
						_trans += convert(UInt, _klen )
						
					end
					
				end
				if _have == 0 
					_klen = convert(Int, _patact_range_lengths[1+(cs)] )
					if _klen > 0 
						_lower = 0;
						_mid = 0;
						_upper = 0;
						_lower = _keys
						_upper = _keys + (_klen<<1)- 2
						while _have == 0 && _lower <= _upper 
							_mid = _lower + (((_upper-_lower)>> 1)& ~1)
							if (data[1+(p )])< _patact_trans_keys[1+(_mid )]
								_upper = _mid - 2
								
							elseif (data[1+(p )])> _patact_trans_keys[1+(_mid + 1 )]
								_lower = _mid + 2
								
							else
								_trans += convert(UInt, ((_mid - _keys)>>1) )
								_have = 1
								
							end
							
						end
						if _have == 0 
							_trans += convert(UInt, _klen )
							
						end
						
					end
					
				end
				_ckeys = _patact_trans_offsets[1+(_trans)]
				_klen = convert(Int, _patact_trans_lengths[1+(_trans)] )
				_cond = convert(UInt, _patact_trans_offsets[1+(_trans)] )
				_have = 0
				_cpc = 0
				_lower = 0;
				_mid = 0;
				_upper = 0;
				_lower = _ckeys
				_upper = _ckeys + _klen - 1
				while _have == 0 && _lower <= _upper 
					_mid = _lower + ((_upper-_lower)>> 1)
					if _cpc < convert(Int, _patact_cond_keys[1+(_mid )] )
						_upper = _mid - 1
						
					elseif _cpc > convert(Int, _patact_cond_keys[1+(_mid )] )
						_lower = _mid + 1
						
					else
						_cond += convert(UInt, (_mid - _ckeys) )
						_have = 1
						
					end
					
				end
				if _have == 0 
					cs = 0
					_cont = 0
					
				end
				
			end
			if _cont == 1 
				cs = convert(Int, _patact_cond_targs[1+(_cond)] )
				if _patact_cond_actions[1+(_cond)]!= 0 
					_acts = _patact_cond_actions[1+(_cond)]
					_nacts = convert(UInt, _patact_actions[1+(_acts )] )
					_acts += 1
					while _nacts > 0 
						if _patact_actions[1+(_acts )] == 2 
							{
								te = p+1
								
							}
							
						elseif _patact_actions[1+(_acts )] == 3 
							{
								te = p+1
								print( "space\n" );
								
							}
							
						elseif _patact_actions[1+(_acts )] == 4 
							{
								te = p
								p = p - 1
								print( "word\n" );
								
							}
							
						elseif _patact_actions[1+(_acts )] == 5 
							{
								te = p
								p = p - 1
								print( "num\n" );
								
							}
							
						elseif _patact_actions[1+(_acts )] == 6 
							{
								act = 7
								
							}
							
						elseif _patact_actions[1+(_acts )] == 7 
							{
								act = 8
								
							}
							
						elseif _patact_actions[1+(_acts )] == 8 
							{
								te = p+1
								print( "word (c/lbh)\n" );
								
							}
							
						elseif _patact_actions[1+(_acts )] == 9 
							{
								te = p+1
								print( "space\n" );
								
							}
							
						elseif _patact_actions[1+(_acts )] == 10 
							{
								te = p+1
								print( "num (c/switch)\n" );
								
							}
							
						elseif _patact_actions[1+(_acts )] == 11 
							{
								te = p+1
								
							}
							
						elseif _patact_actions[1+(_acts )] == 12 
							{
								te = p
								p = p - 1
								print( "word (w/lbh)\n" );
								{
									p = ((te-1))-1
									
								}
								
								{
									cs = 21
									
								}
								
							}
							
						elseif _patact_actions[1+(_acts )] == 13 
							{
								te = p
								p = p - 1
								print( "num (w/switch)\n" );
								{
									p = ((te-1))-1
									
								}
								
								{
									cs = 21
									
								}
								
							}
							
						elseif _patact_actions[1+(_acts )] == 14 
							{
								p = ((te))-1
								print( "word (w/lbh)\n" );
								{
									p = ((te-1))-1
									
								}
								
								{
									cs = 21
									
								}
								
							}
							
						elseif _patact_actions[1+(_acts )] == 15 
							{
								if act  == 7 
									p = ((te))-1
									print( "num (w/switch)\n" );
									
								elseif act  == 8 
									p = ((te))-1
									print( "num (w/switch)\n" );
									{
										p = ((te-1))-1
										
									}
									
									{
										cs = 21
										
									}
									
								end
								
							}
							
							
						elseif _patact_actions[1+(_acts )] == 16 
							{
								te = p+1
								print( "in semi\n" );
								{
									cs = 17
									
								}
								
							}
							
						elseif _patact_actions[1+(_acts )] == 17 
							{
								act = 15
								
							}
							
						elseif _patact_actions[1+(_acts )] == 18 
							{
								act = 16
								
							}
							
						elseif _patact_actions[1+(_acts )] == 19 
							{
								te = p+1
								print( "word (c/lbh)\n" );
								
							}
							
						elseif _patact_actions[1+(_acts )] == 20 
							{
								te = p+1
								print( "space\n" );
								
							}
							
						elseif _patact_actions[1+(_acts )] == 21 
							{
								te = p+1
								print( "num (c/switch)\n" );
								
							}
							
						elseif _patact_actions[1+(_acts )] == 22 
							{
								te = p+1
								print( "going to semi\n" );
								{
									p = p - 1
									
								}
								{
									cs = 28
									
								}
								
							}
							
						elseif _patact_actions[1+(_acts )] == 23 
							{
								te = p+1
								print( "immdiate\n" );
								{
									cs = 24
									
								}
								
							}
							
						elseif _patact_actions[1+(_acts )] == 24 
							{
								te = p
								p = p - 1
								print( "word (w/lbh)\n" );
								{
									p = p - 1
									
								}
								{
									cs = 21
									
								}
								
							}
							
						elseif _patact_actions[1+(_acts )] == 25 
							{
								te = p
								p = p - 1
								print( "num (w/switch)\n" );
								{
									p = p - 1
									
								}
								{
									cs = 21
									
								}
								
							}
							
						elseif _patact_actions[1+(_acts )] == 26 
							{
								p = ((te))-1
								print( "word (w/lbh)\n" );
								{
									p = p - 1
									
								}
								{
									cs = 21
									
								}
								
							}
							
						elseif _patact_actions[1+(_acts )] == 27 
							{
								if act  == 15 
									p = ((te))-1
									print( "num (w/switch)\n" );
									
								elseif act  == 16 
									p = ((te))-1
									print( "num (w/switch)\n" );
									{
										p = p - 1
										
									}
									{
										cs = 21
										
									}
									
								end
								
							}
							
							
						end
						_nacts -= 1
						_acts += 1
						
					end
					
				end
				_acts = _patact_to_state_actions[1+(cs)]
				_nacts = convert(UInt, _patact_actions[1+(_acts )] )
				_acts += 1
				while _nacts > 0 
					if _patact_actions[1+(_acts )] == 0 
						{
							ts = 0
							
						}
						
					end
					_nacts -= 1
					_acts += 1
					
				end
				if cs == 0 
					_cont = 0
					
				end
				if _cont == 1 
					p += 1
					
				end
				
			end
			
		end
		
	end
	if ( cs >= patact_first_final )
		println( "ACCEPT" );
	else
		println( "FAIL" );
	end
end

m( "abcd foix\n" );
m( "abcd\nanother\n" );
m( "123 foix\n" );
m( "!abcd foix\n" );
m( "!abcd\nanother\n" );
m( "!123 foix\n" );
m( ";" );
