static _indep_key_offsets: [i8 ; 16] = [ 0, 0, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 0 , 0 ];
static _indep_trans_keys: [u8 ; 22] = [ 49, 51, 52, 54, 104, 101, 108, 108, 111, 10, 72, 104, 69, 101, 76, 108, 76, 108, 79, 111, 0 , 0 ];
static _indep_single_lengths: [i8 ; 16] = [ 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0 , 0 ];
static _indep_range_lengths: [i8 ; 16] = [ 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _indep_index_offsets: [i8 ; 16] = [ 0, 0, 3, 5, 7, 9, 11, 13, 15, 18, 21, 24, 27, 30, 0 , 0 ];
static _indep_trans_cond_spaces: [i8 ; 33] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _indep_trans_offsets: [i8 ; 33] = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 , 0 ];
static _indep_trans_lengths: [i8 ; 33] = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 0 ];
static _indep_cond_keys: [i8 ; 33] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _indep_cond_targs: [i8 ; 33] = [ 2, 8, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 13, 0, 9, 9, 0, 10, 10, 0, 11, 11, 0, 12, 12, 0, 7, 7, 0, 0, 0 , 0 ];
static _indep_cond_actions: [i8 ; 33] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _indep_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _indep_nfa_offsets: [i8 ; 16] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _indep_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _indep_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static indep_start : i32 = 1;
static indep_first_final : i32 = 13;
static indep_error : i32 = 0;
static indep_en_main : i32 = 1;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( indep_start ) as i32;
	}
	
	{
		let mut _klen = 0;
		let mut _keys :i32 = 0;
		let mut _ckeys :i32 = 0;
		let mut _cpc = 0;
		let mut _trans = 0;
		let mut _cond  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_keys = ( _indep_key_offsets[(cs) as usize] ) as i32;
							_trans = ( _indep_index_offsets[(cs) as usize] ) as u32;
							_have = 0;
							_klen = ( _indep_single_lengths[(cs) as usize] ) as i32;
							if ( _klen > 0  ) {
								{
									let mut _lower :i32 = 0;
									let mut _mid :i32 = 0;
									let mut _upper :i32 = 0;
									_lower = _keys;
									_upper = _keys + _klen - 1;
									while ( _upper >= _lower && _have == 0  )
									{
										_mid = _lower + ((_upper-_lower) >> 1);
										if ( ( data[(p ) as usize]
										) < _indep_trans_keys[(_mid ) as usize]
										) {
											_upper = _mid - 1;
											
										}
										else if ( ( data[(p ) as usize]
										) > _indep_trans_keys[(_mid ) as usize]
										) {
											_lower = _mid + 1;
											
										}
										else {
											{
												_trans += ( (_mid - _keys) ) as u32;
												_have = 1;
											}
											
										}
									}
									
									if ( _have == 0  ) {
										{
											_keys += _klen;
											_trans += ( _klen ) as u32;
										}
										
									}
								}
								
								
							}
							if ( _have == 0  ) {
								{
									_klen = ( _indep_range_lengths[(cs) as usize] ) as i32;
									if ( _klen > 0  ) {
										{
											let mut _lower :i32 = 0;
											let mut _mid :i32 = 0;
											let mut _upper :i32 = 0;
											_lower = _keys;
											_upper = _keys + (_klen<<1) - 2;
											while ( _have == 0 && _lower <= _upper  )
											{
												_mid = _lower + (((_upper-_lower) >> 1) & !1
												);
												if ( ( data[(p ) as usize]
												) < _indep_trans_keys[(_mid ) as usize]
												) {
													_upper = _mid - 2;
													
												}
												else if ( ( data[(p ) as usize]
												) > _indep_trans_keys[(_mid + 1 ) as usize]
												) {
													_lower = _mid + 2;
													
												}
												else {
													{
														_trans += ( ((_mid - _keys)>>1) ) as u32;
														_have = 1;
													}
													
												}
											}
											
											if ( _have == 0  ) {
												_trans += ( _klen ) as u32;
												
											}
										}
										
									}
								}
								
								
							}
							_ckeys = ( _indep_trans_offsets[(_trans) as usize] ) as i32;
							_klen = ( _indep_trans_lengths[(_trans) as usize] ) as i32;
							_cond = ( _indep_trans_offsets[(_trans) as usize] ) as u32;
							_have = 0;
							_cpc = 0;
							{
								let mut _lower :i32 = 0;
								let mut _mid :i32 = 0;
								let mut _upper :i32 = 0;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( _cpc < ( _indep_cond_keys[(_mid ) as usize]
									) as i32 ) {
										_upper = _mid - 1;
										
									}
									else if ( _cpc > ( _indep_cond_keys[(_mid ) as usize]
									) as i32 ) {
										_lower = _mid + 1;
										
									}
									else {
										{
											_cond += ( (_mid - _ckeys) ) as u32;
											_have = 1;
										}
										
									}
								}
								
								if ( _have == 0  ) {
									{
										cs = 0;
										_cont = 0;
									}
									
								}
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _indep_cond_targs[(_cond) as usize] ) as i32;
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= indep_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "1hello\n".to_string() ); }
	unsafe { m( "1HELLO\n".to_string() ); }
	unsafe { m( "1HeLLo\n".to_string() ); }
	unsafe { m( "2hello\n".to_string() ); }
	unsafe { m( "2HELLO\n".to_string() ); }
	unsafe { m( "2HeLLo\n".to_string() ); }
	unsafe { m( "3hello\n".to_string() ); }
	unsafe { m( "3HELLO\n".to_string() ); }
	unsafe { m( "3HeLLo\n".to_string() ); }
	unsafe { m( "4hello\n".to_string() ); }
	unsafe { m( "4HELLO\n".to_string() ); }
	unsafe { m( "4HeLLo\n".to_string() ); }
	unsafe { m( "5hello\n".to_string() ); }
	unsafe { m( "5HELLO\n".to_string() ); }
	unsafe { m( "5HeLLo\n".to_string() ); }
	unsafe { m( "6hello\n".to_string() ); }
	unsafe { m( "6HELLO\n".to_string() ); }
	unsafe { m( "6HeLLo\n".to_string() ); }
}

