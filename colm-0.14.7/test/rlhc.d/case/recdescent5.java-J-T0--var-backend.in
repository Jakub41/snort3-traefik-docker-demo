host( "working/recdescent5.rl", 1 ) @{/*
	* @@LANG: java
	*/
	
	class recdescent5
	{
		
		
	}@
	array s8 _recdescent_actions( 0, 3 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 2, 1, 0, 2, 1, 2, 2, 1, 3, 0 };
	
	array s8 _recdescent_key_offsets( 0, 25 ) = { 0, 0, 1, 13, 25, 0 };
	
	array char _recdescent_trans_keys( 0, 125 ) = { u(125), u(32), u(95), u(123), u(125), u(9), u(10), u(48), u(57), u(65), u(90), u(97), u(122), u(32), u(95), u(123), u(125), u(9), u(10), u(48), u(57), u(65), u(90), u(97), u(122), u(32), u(95), u(123), u(125), u(9), u(10), u(48), u(57), u(65), u(90), u(97), u(122), u(0) };
	
	array s8 _recdescent_single_lengths( 0, 4 ) = { 0, 1, 4, 4, 4, 0 };
	
	array s8 _recdescent_range_lengths( 0, 4 ) = { 0, 0, 4, 4, 4, 0 };
	
	array s8 _recdescent_index_offsets( 0, 20 ) = { 0, 0, 2, 11, 20, 0 };
	
	array s8 _recdescent_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _recdescent_trans_offsets( 0, 28 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 0 };
	
	array s8 _recdescent_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
	
	array s8 _recdescent_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _recdescent_cond_targs( 0, 4 ) = { 2, 0, 2, 4, 1, 2, 2, 3, 4, 4, 0, 2, 4, 1, 2, 2, 3, 4, 4, 0, 2, 4, 1, 2, 2, 3, 4, 4, 0, 0 };
	
	array s8 _recdescent_cond_actions( 0, 15 ) = { 0, 0, 0, 1, 5, 7, 0, 1, 1, 1, 0, 3, 9, 12, 15, 3, 0, 9, 9, 0, 3, 0, 12, 15, 3, 9, 0, 0, 0, 0 };
	
	array s8 _recdescent_eof_actions( 0, 3 ) = { 0, 0, 0, 3, 3, 0 };
	
	array s8 _recdescent_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _recdescent_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };
	
	array s8 _recdescent_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _recdescent_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int recdescent_start = 2;
	value int recdescent_first_final = 2;
	value int recdescent_error = 0;
	
	value int recdescent_en_main = 2;
	
	host( "working/recdescent5.rl", 72 ) @{
		
		static void test( char data[] )
		{
			int cs, p = 0, pe = data.length, eof = data.length, item = 0;
			int stack[] = new int[1024];
			int stack_size = 1;
			int top;
			
		}@
		{
			cs = cast(int)recdescent_start;
			top = 0;
		}
		host( "working/recdescent5.rl", 81 ) @{
		}@
		{
			int _klen;
			uint _trans = 0;
			uint _cond = 0;
			uint _have = 0;
			uint _cont = 1;
			index s8 _acts;
			uint _nacts;
			index char _keys;
			index s8 _ckeys;
			int _cpc;
			while ( _cont == 1 ) {
				
				if ( cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( p == eof )
					{
						if ( _have == 0 ) {
							index s8 __acts;
							uint __nacts;
							__acts = offset( _recdescent_actions, _recdescent_eof_actions[cs] );
							__nacts = cast(uint)deref( _recdescent_actions, __acts );
							__acts += 1;
							while ( __nacts > 0 ) {
								switch ( deref( _recdescent_actions, __acts ) ) {
									case 1 {
										host( "working/recdescent5.rl", 31 ) ${
											String item_data = new String ( data, item, p-item );
											System.out.print( "item: " );
											System.out.print( item_data );
											System.out.print( "\n" );
										}$
									}
								}
								__nacts -= 1;
								__acts += 1;
							}
						}
					}
					
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						_keys = offset( _recdescent_trans_keys, _recdescent_key_offsets[cs] );
						_trans = cast(uint)_recdescent_index_offsets[cs];
						_have = 0;
						
						_klen = cast(int)_recdescent_single_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0 ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( deref( data, p )) < deref( _recdescent_trans_keys, _mid ) )
								_upper = _mid - 1;
								else if ( ( deref( data, p )) > deref( _recdescent_trans_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_trans += cast(uint)(_mid - _keys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								_keys += _klen;
								_trans += cast(uint)_klen;
							}
						}
						
						if ( _have == 0 ) {
							_klen = cast(int)_recdescent_range_lengths[cs];
							if ( _klen > 0 ) {
								index char _lower;
								index char _mid;
								index char _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper ) {
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( deref( data, p )) < deref( _recdescent_trans_keys, _mid ) )
									_upper = _mid - 2;
									else if ( ( deref( data, p )) > deref( _recdescent_trans_keys, _mid + 1 ) )
									_lower = _mid + 2;
									else {
										_trans += cast(uint)((_mid - _keys)>>1);
										_have = 1;
									}
								}
								if ( _have == 0 )
								_trans += cast(uint)_klen;
							}
						}
						
						_ckeys = offset( _recdescent_cond_keys, _recdescent_trans_offsets[_trans] );
						_klen = cast(int)_recdescent_trans_lengths[_trans];
						_cond = cast(uint)_recdescent_trans_offsets[_trans];
						_have = 0;
						
						_cpc = 0;
						{
							index s8 _lower;
							index s8 _mid;
							index s8 _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < cast(int)deref( _recdescent_cond_keys, _mid ) )
								_upper = _mid - 1;
								else if ( _cpc > cast(int)deref( _recdescent_cond_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_cond += cast(uint)(_mid - _ckeys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								cs = 0;
								_cont = 0;
							}
						}
					}
					if ( _cont == 1 ) {
						cs = cast(int)_recdescent_cond_targs[_cond];
						
						if ( _recdescent_cond_actions[_cond] != 0 ) {
							_acts = offset( _recdescent_actions, _recdescent_cond_actions[_cond] );
							_nacts = cast(uint)deref( _recdescent_actions, _acts );
							_acts += 1;
							while ( _nacts > 0 )
							{
								switch ( deref( _recdescent_actions, _acts ) )
								{
									case 0 {
										host( "working/recdescent5.rl", 28 ) ${ item = p; }$
									}
									case 1 {
										host( "working/recdescent5.rl", 31 ) ${
											String item_data = new String ( data, item, p-item );
											System.out.print( "item: " );
											System.out.print( item_data );
											System.out.print( "\n" );
										}$
									}
									case 2 {
										host( "working/recdescent5.rl", 39 ) ${
											System.out.print( "calling main\n" );
											${host( "working/recdescent5.rl", 10 ) ${ 
													if ( top == stack_size ) {
														System.out.print( "growing stack\n" );
														stack_size = top * 2;
														// Don't actually bother to resize here, but we do print messages.
														//stack = (int*)realloc( stack, sizeof(int)*stack_size );
													}
												}$stack[top] = cs; top += 1;cs = 2;}$}$
									}
									case 3 {
										host( "working/recdescent5.rl", 45 ) ${
											if ( top == 0 ) {
												System.out.print( "STRAY CLOSE\n" );
												${p+= 1; _cont = 0; }$
											}
											else {
												System.out.print( "returning from main\n" );
												${p = p - 1; }$
												${top-= 1;cs = stack[top]; host( "working/recdescent5.rl", 19 ) ${ 
														if ( stack_size > (top * 4) ) {
															stack_size = top * 2;
															// Don't actually bother to resize here, but we do print messages.
															//stack = (int*)realloc( stack, sizeof(int)*stack_size );
															System.out.print( "shrinking stack\n" );
														}
													}$}$
											}
										}$
									}
								}
								_nacts -= 1;
								_acts += 1;
							}
						}
						
						if ( cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}
				}
			}
		}
		host( "working/recdescent5.rl", 82 ) @{
			
			if ( cs == recdescent_error )
			System.out.println( "SCANNER ERROR" );
		}
		
		public static void main( String args[] )
		{
			test( "88 foo { 99 {{{{}}}}{ } }".toCharArray() );
			test( "76 } sadf".toCharArray() );
	}
}

}@