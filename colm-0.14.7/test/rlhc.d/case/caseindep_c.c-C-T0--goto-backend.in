host( "working/caseindep_c.rl", 1 ) @{/*
	* @@LANG: c
	* @@GENERATED: true
	*/
	
	#include <string.h>
	#include <stdio.h>
	
	
	
	
	
	
	
}@
array s8 _indep_key_offsets( 0, 20 ) = { 0, 0, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 0 };

array char _indep_trans_keys( 0, 111 ) = { 49, 51, 52, 54, 104, 101, 108, 108, 111, 10, 72, 104, 69, 101, 76, 108, 76, 108, 79, 111, 0 };

array s8 _indep_single_lengths( 0, 2 ) = { 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0 };

array s8 _indep_range_lengths( 0, 2 ) = { 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _indep_index_offsets( 0, 30 ) = { 0, 0, 3, 5, 7, 9, 11, 13, 15, 18, 21, 24, 27, 30, 0 };

array s8 _indep_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _indep_trans_offsets( 0, 30 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 };

array s8 _indep_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _indep_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _indep_cond_targs( 0, 13 ) = { 2, 8, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 13, 0, 9, 9, 0, 10, 10, 0, 11, 11, 0, 12, 12, 0, 7, 7, 0, 0, 0 };

array s8 _indep_cond_actions( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _indep_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _indep_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _indep_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _indep_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int indep_start = 1;
value int indep_first_final = 13;
value int indep_error = 0;

value int indep_en_main = 1;

host( "working/caseindep_c.rl", 27 ) @{
	int cs;
	int blen;
	char buffer[1024];
	
	void init()
	{
	}@
	{
		cs = cast(int)indep_start;
	}
	host( "working/caseindep_c.rl", 34 ) @{
	}
	
	void exec( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _indep_trans_keys, _indep_key_offsets[cs] );
				_trans = cast(uint)_indep_index_offsets[cs];
				
				_klen = cast(int)_indep_single_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _indep_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _indep_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_indep_range_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _indep_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _indep_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _indep_cond_keys, _indep_trans_offsets[_trans] );
				_klen = cast(int)_indep_trans_lengths[_trans];
				_cond = cast(uint)_indep_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _indep_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _indep_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_indep_cond_targs[_cond];
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/caseindep_c.rl", 41 ) @{
	}
	
	void finish( )
	{
		if ( cs >= indep_first_final )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	char *inp[] = {
		"1hello\n",
		"1HELLO\n",
		"1HeLLo\n",
		"2hello\n",
		"2HELLO\n",
		"2HeLLo\n",
		"3hello\n",
		"3HELLO\n",
		"3HeLLo\n",
		"4hello\n",
		"4HELLO\n",
		"4HeLLo\n",
		"5hello\n",
		"5HELLO\n",
		"5HeLLo\n",
		"6hello\n",
		"6HELLO\n",
		"6HeLLo\n",
	};
	
	int inplen = 18;
	
	int main( )
	{
		int i;
		for ( i = 0; i < inplen; i++ ) {
			init();
			exec( inp[i], strlen(inp[i]) );
			finish();
		}
		return 0;
	}
	
}@