host( "working/rpn1.rl", 1 ) @{(*
	* @@LANG: ocaml
	*)
	
	let id x = x
	let fail fmt = Printf.ksprintf failwith fmt
	let pr fmt = Printf.ksprintf print_endline fmt
	
	let failed fmt = Printf.ksprintf (fun s -> prerr_endline s; exit 1) fmt
	let test' show f x y = if f x <> y then failed "FAILED: test %S" (show x)
	let case = ref 0
	let test f x y = incr case; if f x <> y then failed "FAILED: case %d" !case
	let error f x = match try Some (f x) with _ -> None with Some _ -> failed "FAILED: fail %S" x | None -> ()
	
	(*
	// -*-go-*-
	//
	// Reverse Polish Notation Calculator
	// Copyright (c) 2010 J.A. Roberts Tunney
	// MIT License
	//
	// To compile:
	//
	//   ragel -Z -G2 -o rpn.go rpn.rl
	//   6g -o rpn.6 rpn.go
	//   6l -o rpn rpn.6
	//   ./rpn
	//
	// To show a diagram of your state machine:
	//
	//   ragel -V -G2 -p -o rpn.dot rpn.rl
	//   dot -Tpng -o rpn.png rpn.dot
	//   chrome rpn.png
	//
	*)
	
	
}@
array s8 _rpn_actions( 0, 7 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 0 };

array s8 _rpn_key_offsets( 0, 23 ) = { 0, 0, 3, 8, 10, 12, 13, 16, 19, 20, 23, 0 };

array int _rpn_trans_keys( 0, 115 ) = { 32, 9, 13, 32, 9, 13, 48, 57, 98, 100, 98, 115, 97, 32, 9, 13, 32, 9, 13, 100, 32, 9, 13, 32, 42, 43, 45, 47, 97, 9, 13, 48, 57, 0 };

array s8 _rpn_single_lengths( 0, 6 ) = { 0, 1, 1, 2, 2, 1, 1, 1, 1, 1, 6, 0 };

array s8 _rpn_range_lengths( 0, 2 ) = { 0, 1, 2, 0, 0, 0, 1, 1, 0, 1, 2, 0 };

array s8 _rpn_index_offsets( 0, 26 ) = { 0, 0, 3, 7, 10, 13, 15, 18, 21, 23, 26, 0 };

array s8 _rpn_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _rpn_trans_offsets( 0, 34 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 0 };

array s8 _rpn_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _rpn_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _rpn_cond_targs( 0, 10 ) = { 10, 10, 0, 10, 10, 2, 0, 4, 8, 0, 5, 7, 0, 6, 0, 10, 10, 0, 10, 10, 0, 9, 0, 10, 10, 0, 10, 1, 1, 1, 1, 3, 10, 2, 0, 0 };

array s8 _rpn_cond_actions( 0, 15 ) = { 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 15, 0, 13, 13, 0, 0, 0, 5, 5, 0, 0, 9, 5, 7, 11, 0, 0, 1, 0, 0 };

array s8 _rpn_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _rpn_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _rpn_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _rpn_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int rpn_start = 10;
value int rpn_first_final = 10;
value int rpn_error = 0;

value int rpn_en_main = 10;

host( "working/rpn1.rl", 39 ) @{
	
	let fail fmt = Printf.ksprintf failwith fmt
	
	let rpn data =
	let (cs, p, pe) = (ref 0, ref 0, ref (String.length data)) in
	let mark = ref 0 in
	let st = Stack.create () in
	
}@
{
	cs = cast(int)rpn_start;
}

{
	int _klen;
	uint _trans = 0;
	uint _cond = 0;
	uint _have = 0;
	uint _cont = 1;
	index s8 _acts;
	uint _nacts;
	index int _keys;
	index s8 _ckeys;
	int _cpc;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _rpn_trans_keys, _rpn_key_offsets[cs] );
				_trans = cast(uint)_rpn_index_offsets[cs];
				_have = 0;
				
				_klen = cast(int)_rpn_single_lengths[cs];
				if ( _klen > 0 ) {
					index int _lower;
					index int _mid;
					index int _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( _upper >= _lower && _have == 0 ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _rpn_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _rpn_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
				}
				
				if ( _have == 0 ) {
					_klen = cast(int)_rpn_range_lengths[cs];
					if ( _klen > 0 ) {
						index int _lower;
						index int _mid;
						index int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _rpn_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _rpn_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								_have = 1;
							}
						}
						if ( _have == 0 )
						_trans += cast(uint)_klen;
					}
				}
				
				_ckeys = offset( _rpn_cond_keys, _rpn_trans_offsets[_trans] );
				_klen = cast(int)_rpn_trans_lengths[_trans];
				_cond = cast(uint)_rpn_trans_offsets[_trans];
				_have = 0;
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( _have == 0 && _lower <= _upper ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _rpn_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _rpn_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						cs = 0;
						_cont = 0;
					}
				}
			}
			if ( _cont == 1 ) {
				cs = cast(int)_rpn_cond_targs[_cond];
				
				if ( _rpn_cond_actions[_cond] != 0 ) {
					_acts = offset( _rpn_actions, _rpn_cond_actions[_cond] );
					_nacts = cast(uint)deref( _rpn_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _rpn_actions, _acts ) )
						{
							case 0 {
								host( "working/rpn1.rl", 48 ) ${ mark := !p }$
							}
							case 1 {
								host( "working/rpn1.rl", 49 ) ${ Stack.push (int_of_string (String.sub data !mark (!p - !mark))) st }$
							}
							case 2 {
								host( "working/rpn1.rl", 50 ) ${ let y = Stack.pop st in let x = Stack.pop st in Stack.push (x + y) st }$
							}
							case 3 {
								host( "working/rpn1.rl", 51 ) ${ let y = Stack.pop st in let x = Stack.pop st in Stack.push (x - y) st }$
							}
							case 4 {
								host( "working/rpn1.rl", 52 ) ${ let y = Stack.pop st in let x = Stack.pop st in Stack.push (x * y) st }$
							}
							case 5 {
								host( "working/rpn1.rl", 53 ) ${ let y = Stack.pop st in let x = Stack.pop st in Stack.push (x / y) st }$
							}
							case 6 {
								host( "working/rpn1.rl", 54 ) ${ Stack.push (abs (Stack.pop st)) st }$
							}
							case 7 {
								host( "working/rpn1.rl", 55 ) ${ Stack.push 666 st }$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}
		}
	}
}
host( "working/rpn1.rl", 71 ) @{
	
	if !cs < rpn_first_final then
	begin
	if !p = !pe then
	fail "unexpected eof"
	else
	fail "error at position %d" !p
	end;
	
	if Stack.is_empty st then
	fail "rpn stack empty on result"
	else
	Stack.pop st
	
	(* ////////////////////////////////////////////////////////////////////// *)
	
	let rpnTests = [
	("666\n", 666);
	("666 111\n", 111);
	("4 3 add\n", 7);
	("4 3 +\n", 7);
	("4 3 -\n", 1);
	("4 3 *\n", 12);
	("6 2 /\n", 3);
	("0 3 -\n", -3);
	("0 3 - abs\n", 3);
	(" 2  2 + 3 - \n", 1);
	("10 7 3 2 * - +\n", 11);
	("abba abba add\n", 1332);
	]
	
	let rpnFailTests = [
	("\n")
	]
	
	let () =
	List.iter (fun (s,x) -> test rpn s x) rpnTests;
	List.iter (fun s -> error rpn s) rpnFailTests
	
}@