host( "working/call1.rl", 1 ) @{/*
	* @@LANG: c
	* @@PROHIBIT_FEATFLAGS: --var-backend
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	int num = 0;
	
	struct test
	{
		int cs, top, stack[32];
	};
	
	
	
}@
array s8 _test_actions( 0, 3 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 };

array char _test_trans_keys( 0, 13 ) = { 1, 0, 3, 6, 2, 4, 0, 0, 5, 5, 2, 2, 8, 11, 12, 12, 12, 12, 11, 11, 12, 12, 4, 4, 9, 9, 8, 8, 13, 13, 8, 8, 10, 10, 1, 0, 11, 11, 7, 7, 7, 7, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0 };

array s8 _test_char_class( 0, 13 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 8, 1, 1, 1, 1, 1, 9, 1, 1, 10, 11, 1, 1, 12, 1, 1, 1, 13, 0 };

array s8 _test_index_offsets( 0, 27 ) = { 0, 0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 27, 27, 27, 0 };

array s8 _test_indices( 0, 21 ) = { 0, 0, 1, 2, 3, 0, 0, 4, 5, 6, 7, 1, 1, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 19, 20, 21, 0 };

array s8 _test_index_defaults( 0, 22 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 22, 1, 1, 1, 1, 0 };

array s8 _test_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _test_cond_targs( 0, 25 ) = { 2, 0, 4, 3, 23, 5, 6, 7, 12, 8, 9, 10, 11, 3, 14, 15, 16, 17, 24, 19, 20, 21, 25, 0 };

array s8 _test_cond_actions( 0, 7 ) = { 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0 };

array s8 _test_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _test_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _test_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _test_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int test_start = 1;
value int test_first_final = 23;
value int test_error = 0;

value int test_en_even = 13;
value int test_en_odd = 18;
value int test_en_fail = 22;
value int test_en_main = 1;

host( "working/call1.rl", 43 ) @{
	
	void test_init( struct test *fsm )
	{
		num = 0;
	}@
	{
		host( "-", 1 ) @{fsm->}@ -> cs = cast(int)test_start;
		host( "-", 1 ) @{fsm->}@ -> top = 0;
	}
	host( "working/call1.rl", 48 ) @{
	}
	
	void test_execute( struct test *fsm, const char *data, int len )
	{
		const char *p = data;
		const char *pe = data+len;
		
	}@
	{
		int _trans = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( host( "-", 1 ) @{fsm->}@ -> cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _test_trans_keys, (host( "-", 1 ) @{fsm->}@ -> cs<<1) );
				_inds = offset( _test_indices, _test_index_offsets[host( "-", 1 ) @{fsm->}@ -> cs] );
				
				if ( ( deref( data, p )) <= 118 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_test_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _test_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _test_trans_keys, _keys ) )
					_trans = cast(int)deref( _test_indices, _inds + cast(int)( _ic - cast(int)deref( _test_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_test_index_defaults[host( "-", 1 ) @{fsm->}@ -> cs];
				}
				else {
					_trans = cast(int)_test_index_defaults[host( "-", 1 ) @{fsm->}@ -> cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				host( "-", 1 ) @{fsm->}@ -> cs = cast(int)_test_cond_targs[_trans];
				
				if ( _test_cond_actions[_trans] == 0 )
				goto _again;
				
				_acts = offset( _test_actions, _test_cond_actions[_trans] );
				_nacts = cast(uint)deref( _test_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _test_actions, _acts ) )
					{
						case 0 {
							host( "working/call1.rl", 20 ) ${
								if ( num & 1 )
								${host( "-", 1 ) @{fsm->}@ -> stack[host( "-", 1 ) @{fsm->}@ -> top] = host( "-", 1 ) @{fsm->}@ -> cs; host( "-", 1 ) @{fsm->}@ -> top += 1;host( "-", 1 ) @{fsm->}@ -> cs = host( "-", 1 ) ={18}=; goto _again;}$
								else
								${host( "-", 1 ) @{fsm->}@ -> stack[host( "-", 1 ) @{fsm->}@ -> top] = host( "-", 1 ) @{fsm->}@ -> cs; host( "-", 1 ) @{fsm->}@ -> top += 1;host( "-", 1 ) @{fsm->}@ -> cs = 13; goto _again;}$}$
						}
						case 1 {
							host( "working/call1.rl", 28 ) ${${p = p - 1; }$ ${host( "-", 1 ) @{fsm->}@ -> top -= 1;host( "-", 1 ) @{fsm->}@ -> cs = host( "-", 1 ) @{fsm->}@ -> stack[host( "-", 1 ) @{fsm->}@ -> top];goto _again;}$}$
						}
						case 2 {
							host( "working/call1.rl", 29 ) ${${p = p - 1; }$ ${host( "-", 1 ) @{fsm->}@ -> top -= 1;host( "-", 1 ) @{fsm->}@ -> cs = host( "-", 1 ) @{fsm->}@ -> stack[host( "-", 1 ) @{fsm->}@ -> top];goto _again;}$}$
						}
						case 3 {
							host( "working/call1.rl", 30 ) ${ num = num * 10 + (={( deref( data, p ))}= - '0'); }$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				if ( host( "-", 1 ) @{fsm->}@ -> cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/call1.rl", 56 ) @{
	}
	
	int test_finish( struct test *fsm )
	{
		if ( fsm->cs == test_error )
		return -1;
		if ( fsm->cs >= test_first_final )
		return 1;
		return 0;
	}
	
	#define BUFSIZE 1024
	
	void test( char *buf )
	{   
		struct test test;
		test_init( &test );
		test_execute( &test, buf, strlen(buf) );
		if ( test_finish( &test ) > 0 )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	int main()
	{
		test( "78 even\n" );
		test( "89 odd\n" );
		test( "1 even\n" );
		test( "0 odd\n" );
		test( "OA ok\n" );
		test( "OA error1\n" );
		test( "OA error2\n" );
		
		return 0;
	}
	
	
}@