host( "working/erract2_rust.rl", 1 ) @{//
	// @@LANG: rust
	// @@GENERATED: true
	//
	
	
	
	
	
	
	
	
}@
array s8 _erract_actions( 0, 7 ) = { 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0 };

array u8 _erract_trans_keys( 0, 5 ) = { 1, 0, 3, 3, 2, 2, 4, 4, 4, 4, 5, 5, 0, 0, 1, 0, 0 };

array s8 _erract_char_class( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 };

array s8 _erract_index_offsets( 0, 6 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 0 };

array s8 _erract_indices( 0, 8 ) = { 1, 3, 4, 5, 6, 8, 0 };

array s8 _erract_index_defaults( 0, 9 ) = { 0, 0, 2, 2, 2, 2, 7, 9, 0 };

array s8 _erract_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _erract_cond_targs( 0, 7 ) = { 0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0 };

array s8 _erract_cond_actions( 0, 7 ) = { 1, 0, 4, 0, 0, 0, 0, 7, 0, 0, 0 };

array s8 _erract_eof_actions( 0, 20 ) = { 0, 10, 15, 15, 15, 15, 20, 0, 0 };

array s8 _erract_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int erract_start = 1;
value int erract_first_final = 7;
value int erract_error = 0;

value int erract_en_main = 1;

host( "working/erract2_rust.rl", 39 ) @{
	
	unsafe fn m( s: String )
	{
		let data: &[u8] = s.as_bytes();
		let mut p:i32 = 0;
		let mut pe:i32 = s.len() as i32;
		let mut eof:i32 = s.len() as i32;
		let mut cs: i32 = 0;
		let mut buffer = String::new();
		
	}@
	{
		cs = cast(int)erract_start;
	}
	host( "working/erract2_rust.rl", 50 ) @{
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index u8 _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						index s8 __acts;
						uint __nacts;
						__acts = offset( _erract_actions, _erract_eof_actions[cs] );
						__nacts = cast(uint)deref( _erract_actions, __acts );
						__acts += 1;
						while ( __nacts > 0 ) {
							switch ( deref( _erract_actions, __acts ) ) {
								case 0 {
									host( "working/erract2_rust.rl", 12 ) ${print!( "{}", "err_start\n" );
									}$
								}
								case 1 {
									host( "working/erract2_rust.rl", 14 ) ${print!( "{}", "err_all\n" );
									}$
								}
								case 2 {
									host( "working/erract2_rust.rl", 16 ) ${print!( "{}", "err_middle\n" );
									}$
								}
								case 3 {
									host( "working/erract2_rust.rl", 18 ) ${print!( "{}", "err_out\n" );
									}$
								}
								case 4 {
									host( "working/erract2_rust.rl", 21 ) ${print!( "{}", "eof_start\n" );
									}$
								}
								case 5 {
									host( "working/erract2_rust.rl", 23 ) ${print!( "{}", "eof_all\n" );
									}$
								}
								case 6 {
									host( "working/erract2_rust.rl", 25 ) ${print!( "{}", "eof_middle\n" );
									}$
								}
								case 7 {
									host( "working/erract2_rust.rl", 27 ) ${print!( "{}", "eof_out\n" );
									}$
								}
							}
							__nacts -= 1;
							__acts += 1;
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _erract_trans_keys, (cs<<1) );
					_inds = offset( _erract_indices, _erract_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 111 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_erract_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _erract_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _erract_trans_keys, _keys ) )
						_trans = cast(uint)deref( _erract_indices, _inds + cast(int)( _ic - cast(int)deref( _erract_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_erract_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_erract_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_erract_cond_targs[_trans];
					
					if ( _erract_cond_actions[_trans] != 0 ) {
						_acts = offset( _erract_actions, _erract_cond_actions[_trans] );
						_nacts = cast(uint)deref( _erract_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _erract_actions, _acts ) )
							{
								case 0 {
									host( "working/erract2_rust.rl", 12 ) ${print!( "{}", "err_start\n" );
									}$
								}
								case 1 {
									host( "working/erract2_rust.rl", 14 ) ${print!( "{}", "err_all\n" );
									}$
								}
								case 2 {
									host( "working/erract2_rust.rl", 16 ) ${print!( "{}", "err_middle\n" );
									}$
								}
								case 3 {
									host( "working/erract2_rust.rl", 18 ) ${print!( "{}", "err_out\n" );
									}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/erract2_rust.rl", 51 ) @{
		
		if ( cs >= erract_first_final ) {
			println!( "ACCEPT" );
		}
		else {
			println!( "FAIL" );
		}
	}
	
	fn main()
	{
		unsafe { m( "".to_string() ); }
		unsafe { m( "h".to_string() ); }
		unsafe { m( "x".to_string() ); }
		unsafe { m( "he".to_string() ); }
		unsafe { m( "hx".to_string() ); }
		unsafe { m( "hel".to_string() ); }
		unsafe { m( "hex".to_string() ); }
		unsafe { m( "hell".to_string() ); }
		unsafe { m( "helx".to_string() ); }
		unsafe { m( "hello".to_string() ); }
		unsafe { m( "hellx".to_string() ); }
		unsafe { m( "hello\n".to_string() ); }
		unsafe { m( "hellox".to_string() ); }
	}
	
}@