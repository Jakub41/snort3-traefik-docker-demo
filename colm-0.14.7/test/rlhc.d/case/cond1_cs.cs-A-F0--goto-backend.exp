using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
		int i;
		int j;
		int k;
		
		
		
		
		static readonly sbyte  []_foo_actions = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 0, 1, 2, 0,  };
		static readonly char  []_foo_trans_keys = { '\u0001', '\u0000', '\u0002', '\u0002', '\u0002', '\u0002', '\u0002', '\u0002', '\u0003', '\u0004', '\u0003', '\u0004', '\u0003', '\u0004', '\u0005', '\u0005', '\u0000', '\u0000', '\u0005', '\u0005', '\u0005', '\u0005', '\u0005', '\u0005', '\u0005', '\u0005', '\u0005', '\u0005', '\u0005', '\u0005', '\u0001', '\u0000', '\u0000',  };
		static readonly sbyte  []_foo_char_class = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 0,  };
		static readonly sbyte  []_foo_index_offsets = { 0, 0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0,  };
		static readonly sbyte  []_foo_indices = { 0, 2, 3, 4, 5, 6, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0,  };
		static readonly sbyte  []_foo_index_defaults = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,  };
		static readonly sbyte  []_foo_trans_cond_spaces = { -1, -1, -1, -1, -1, 1, -1, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, 0,  };
		static readonly sbyte  []_foo_trans_offsets = { 0, 1, 2, 3, 4, 5, 7, 8, 16, 20, 21, 22, 23, 24, 25, 26, 27, 0,  };
		static readonly sbyte  []_foo_cond_targs = { 2, 0, 3, 4, 5, 0, 7, 6, 0, 11, 7, 12, 9, 13, 10, 14, 0, 7, 9, 10, 8, 15, 8, 8, 8, 8, 8, 8, 0,  };
		static readonly sbyte  []_foo_cond_actions = { 7, 0, 9, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 13, 5, 21, 1, 15, 18, 24, 0,  };
		static readonly sbyte  []_foo_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_foo_nfa_offsets = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_foo_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_foo_nfa_pop_trans = { 0, 0,  };
		static readonly int  foo_start  = 1;
		static readonly int  foo_first_final  = 15;
		static readonly int  foo_error  = 0;
		static readonly int  foo_en_main  = 1;
		int cs;
		
		void init()
		{
		
			{
				cs = (int)foo_start;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				int _trans = 0;
				uint _cond = 0;
				int _acts;
				uint _nacts;
				int _keys;
				int _inds;
				int _cpc;
				int _nbreak;
				if ( p == pe  )
				goto _test_eof;
				
				if ( cs == 0 )
				goto _out;
				
				_resume :
				_keys = (cs<<1) ;
				_inds = _foo_index_offsets[cs] ;
				if ( ( data[p ]) <= 99&& ( data[p ]) >= 10 )
				{
					int _ic = (int)_foo_char_class[(int)( data[p ]) - 10];
					if ( _ic <= (int)_foo_trans_keys[_keys+1]&& _ic >= (int)_foo_trans_keys[_keys ] )
					_trans = (int)_foo_indices[_inds + (int)( _ic - (int)_foo_trans_keys[_keys ])  ];
					
					else
					_trans = (int)_foo_index_defaults[cs];
					
				}
				
				else
				{
					_trans = (int)_foo_index_defaults[cs];
				}
				
				
				_cond = (uint )_foo_trans_offsets[_trans];
				_cpc = 0;
				switch ( _foo_trans_cond_spaces[_trans]  ) {
					case 1:
					if ( (j != 0) )
					_cpc += 1;
					
					
					break;
					case 4:
					if ( (j != 0) )
					_cpc += 1;
					
					if ( (k != 0) )
					_cpc += 2;
					
					
					break;
					case 5:
					if ( (i != 0) )
					_cpc += 1;
					
					if ( (j != 0) )
					_cpc += 2;
					
					if ( (k != 0) )
					_cpc += 4;
					
					
					break;
					
				}
				_cond += (uint )_cpc;
				goto _match_cond;
				
				_match_cond :
				cs = (int)_foo_cond_targs[_cond];
				if ( _foo_cond_actions[_cond] == 0 )
				goto _again;
				
				
				_nbreak = 0;
				_acts = _foo_cond_actions[_cond] ;
				_nacts = (uint )_foo_actions[_acts ];
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( _foo_actions[_acts ] ) {
						case 0:
						{Console.Write( "  one\n" );}
						
						break;
						case 1:
						{Console.Write( "  two\n" );}
						
						break;
						case 2:
						{Console.Write( "  three\n" );}
						
						break;
						case 3:
						{if ( (( data[p ])) == 48 )
							{
								i = 0;
								
							} 
							else {
								i = 1;
								
							}
						}
						
						break;
						case 4:
						{if ( (( data[p ])) == 48 )
							{
								j = 0;
								
							} 
							else {
								j = 1;
								
							}
						}
						
						break;
						case 5:
						{if ( (( data[p ])) == 48 )
							{
								k = 0;
								
							} 
							else {
								k = 1;
								
							}
						}
						
						break;
						case 6:
						{{p += 1;
								_nbreak = 1;
							}}
						
						break;
						
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
				if ( _nbreak == 1 )
				goto _out;
				
				
				
				_again :
				if ( cs == 0 )
				goto _out;
				
				p += 1;
				if ( p != pe  )
				goto _resume;
				
				
				_test_eof :
				{}
				
				_out :
				{}
				
			}
		}
		
		void finish( )
		{
			if ( cs >= foo_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"000abc\n",
			"100abc\n",
			"010abc\n",
			"110abc\n",
			"001abc\n",
			"101abc\n",
			"011abc\n",
			"111abc\n",
		};
		
		
		static readonly int inplen = 8;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
