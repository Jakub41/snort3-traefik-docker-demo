#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_patact_actions 
	private :_patact_actions, :_patact_actions=
end
self._patact_actions = [
0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 2, 2, 6, 2, 2, 7, 2, 2, 17, 2, 2, 18, 0 , 
]

class << self
	attr_accessor :_patact_key_offsets 
	private :_patact_key_offsets, :_patact_key_offsets=
end
self._patact_key_offsets = [
0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 25, 28, 32, 35, 41, 43, 45, 53, 56, 60, 63, 0 , 
]

class << self
	attr_accessor :_patact_trans_keys 
	private :_patact_trans_keys, :_patact_trans_keys=
end
self._patact_trans_keys = [
102, 111, 105, 108, 102, 111, 105, 108, 102, 111, 105, 108, 102, 111, 105, 108, 10, 32, 33, 50, 59, 48, 57, 97, 122, 32, 48, 57, 32, 50, 48, 57, 32, 97, 122, 10, 32, 48, 57, 97, 122, 48, 57, 97, 122, 10, 32, 33, 50, 48, 57, 97, 122, 32, 48, 57, 32, 50, 48, 57, 32, 97, 122, 59, 0 , 
]

class << self
	attr_accessor :_patact_single_lengths 
	private :_patact_single_lengths, :_patact_single_lengths=
end
self._patact_single_lengths = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 2, 1, 2, 0, 0, 4, 1, 2, 1, 1, 0 , 
]

class << self
	attr_accessor :_patact_range_lengths 
	private :_patact_range_lengths, :_patact_range_lengths=
end
self._patact_range_lengths = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0, 0 , 
]

class << self
	attr_accessor :_patact_index_offsets 
	private :_patact_index_offsets, :_patact_index_offsets=
end
self._patact_index_offsets = [
0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 40, 43, 47, 50, 55, 57, 59, 66, 69, 73, 76, 0 , 
]

class << self
	attr_accessor :_patact_trans_cond_spaces 
	private :_patact_trans_cond_spaces, :_patact_trans_cond_spaces=
end
self._patact_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_patact_trans_offsets 
	private :_patact_trans_offsets, :_patact_trans_offsets=
end
self._patact_trans_offsets = [
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 0 , 
]

class << self
	attr_accessor :_patact_trans_lengths 
	private :_patact_trans_lengths, :_patact_trans_lengths=
end
self._patact_trans_lengths = [
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_patact_cond_keys 
	private :_patact_cond_keys, :_patact_cond_keys=
end
self._patact_cond_keys = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_patact_cond_targs 
	private :_patact_cond_targs, :_patact_cond_targs=
end
self._patact_cond_targs = [
2, 17, 3, 17, 4, 17, 17, 17, 6, 17, 7, 17, 8, 17, 17, 17, 10, 24, 11, 24, 12, 24, 24, 24, 14, 24, 15, 24, 16, 24, 24, 24, 17, 17, 17, 19, 17, 18, 20, 0, 1, 18, 17, 1, 18, 18, 17, 5, 20, 17, 21, 21, 22, 23, 0, 22, 21, 23, 21, 24, 24, 24, 26, 25, 27, 0, 9, 25, 24, 9, 25, 25, 24, 13, 27, 24, 28, 0, 17, 17, 17, 17, 17, 17, 17, 17, 24, 24, 24, 24, 24, 24, 24, 24, 17, 17, 17, 21, 21, 24, 24, 24, 0 , 
]

class << self
	attr_accessor :_patact_cond_actions 
	private :_patact_cond_actions, :_patact_cond_actions=
end
self._patact_cond_actions = [
0, 47, 0, 47, 0, 47, 35, 47, 0, 45, 0, 45, 0, 45, 31, 45, 0, 27, 0, 27, 0, 27, 17, 27, 0, 25, 0, 25, 0, 25, 13, 25, 33, 33, 39, 58, 37, 58, 5, 0, 0, 58, 47, 0, 55, 58, 43, 0, 5, 41, 7, 7, 0, 0, 0, 0, 11, 0, 9, 15, 15, 19, 52, 52, 5, 0, 0, 52, 27, 0, 49, 52, 23, 0, 5, 21, 29, 0, 47, 47, 47, 47, 45, 45, 45, 45, 27, 27, 27, 27, 25, 25, 25, 25, 47, 43, 41, 11, 9, 27, 23, 21, 0 , 
]

class << self
	attr_accessor :_patact_to_state_actions 
	private :_patact_to_state_actions, :_patact_to_state_actions=
end
self._patact_to_state_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0 , 
]

class << self
	attr_accessor :_patact_from_state_actions 
	private :_patact_from_state_actions, :_patact_from_state_actions=
end
self._patact_from_state_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 3, 0 , 
]

class << self
	attr_accessor :_patact_eof_trans_indexed 
	private :_patact_eof_trans_indexed, :_patact_eof_trans_indexed=
end
self._patact_eof_trans_indexed = [
0, 18, 18, 18, 18, 20, 20, 20, 20, 36, 36, 36, 36, 38, 38, 38, 38, 0, 18, 25, 26, 0, 32, 33, 0, 36, 42, 43, 0, 0 , 
]

class << self
	attr_accessor :_patact_eof_trans_direct 
	private :_patact_eof_trans_direct, :_patact_eof_trans_direct=
end
self._patact_eof_trans_direct = [
0, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 0, 95, 96, 97, 0, 98, 99, 0, 100, 101, 102, 0, 0 , 
]

class << self
	attr_accessor :_patact_nfa_targs 
	private :_patact_nfa_targs, :_patact_nfa_targs=
end
self._patact_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_patact_nfa_offsets 
	private :_patact_nfa_offsets, :_patact_nfa_offsets=
end
self._patact_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_patact_nfa_push_actions 
	private :_patact_nfa_push_actions, :_patact_nfa_push_actions=
end
self._patact_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_patact_nfa_pop_trans 
	private :_patact_nfa_pop_trans, :_patact_nfa_pop_trans=
end
self._patact_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :patact_start 
end
self.patact_start  = 17;

class << self
	attr_accessor :patact_first_final 
end
self.patact_first_final  = 17;

class << self
	attr_accessor :patact_error 
end
self.patact_error  = 0;

class << self
	attr_accessor :patact_en_other 
end
self.patact_en_other  = 21;

class << self
	attr_accessor :patact_en_exec_test 
end
self.patact_en_exec_test  = 24;

class << self
	attr_accessor :patact_en_semi 
end
self.patact_en_semi  = 28;

class << self
	attr_accessor :patact_en_main 
end
self.patact_en_main  = 17;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	comm = 1
	top = 1
	stack = Array.new
	ts = 1
	te = 1
	act = 1
	value = 1
	begin
		cs = patact_start;
		ts = 0;
		te = 0;
		act = 0;
		
	end
	begin
		_klen= 0
		;
		_trans = 0;
		_cond = 0;
		_have = 0;
		_cont = 1;
		_acts = 0;
		_nacts= 0
		;
		_keys = 0;
		_ckeys = 0;
		_cpc= 0
		;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( p == eof  )
							begin
								if ( _patact_eof_trans_direct[cs] > 0  )
									begin
										_trans = _patact_eof_trans_direct[cs] - 1;
										_cond = _patact_trans_offsets[_trans];
										_have = 1;
										
									end
									
								end
								if ( _have == 0  )
									begin
									
									end
									
								end
								
							end
							
						end
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_acts = _patact_from_state_actions[cs] ;
								_nacts = _patact_actions[_acts ];
								_acts += 1;
								while ( _nacts > 0  )
									begin
										case  _patact_actions[_acts ] 
										when -2 then
										begin
										end
										when 1  then
										begin
											begin
												begin
													ts = p;
													
												end
												
											end
											
											
										end
									end
									_nacts -= 1;
									_acts += 1;
									
								end
								
							end
							_keys = _patact_key_offsets[cs] ;
							_trans = _patact_index_offsets[cs];
							_have = 0;
							_klen = _patact_single_lengths[cs];
							if ( _klen > 0  )
								begin
									_lower = 0;
									_mid = 0;
									_upper = 0;
									_lower = _keys;
									_upper = _keys + _klen - 1;
									while ( _upper >= _lower && _have == 0  )
										begin
											_mid = _lower + ((_upper-_lower) >> 1);
											if ( ( data[p ].ord) < _patact_trans_keys[_mid ] )
												_upper = _mid - 1;
												
												elsif ( ( data[p ].ord) > _patact_trans_keys[_mid ] )
												_lower = _mid + 1;
												
												else
												begin
													_trans += (_mid - _keys);
													_have = 1;
													
												end
												
											end
											
										end
										
									end
									if ( _have == 0  )
										begin
											_keys += _klen;
											_trans += _klen;
											
										end
										
									end
									
								end
								
							end
							if ( _have == 0  )
								begin
									_klen = _patact_range_lengths[cs];
									if ( _klen > 0  )
										begin
											_lower = 0;
											_mid = 0;
											_upper = 0;
											_lower = _keys;
											_upper = _keys + (_klen<<1) - 2;
											while ( _have == 0 && _lower <= _upper  )
												begin
													_mid = _lower + (((_upper-_lower) >> 1) & ~1);
													if ( ( data[p ].ord) < _patact_trans_keys[_mid ] )
														_upper = _mid - 2;
														
														elsif ( ( data[p ].ord) > _patact_trans_keys[_mid + 1 ] )
														_lower = _mid + 2;
														
														else
														begin
															_trans += ((_mid - _keys)>>1);
															_have = 1;
															
														end
														
													end
													
												end
												
											end
											if ( _have == 0  )
												_trans += _klen;
												
											end
											
										end
										
									end
									
								end
								
							end
							_ckeys = _patact_trans_offsets[_trans] ;
							_klen = _patact_trans_lengths[_trans];
							_cond = _patact_trans_offsets[_trans];
							_have = 0;
							_cpc = 0;
							begin
								_lower = 0;
								_mid = 0;
								_upper = 0;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper  )
									begin
										_mid = _lower + ((_upper-_lower) >> 1);
										if ( _cpc < _patact_cond_keys[_mid ] )
											_upper = _mid - 1;
											
											elsif ( _cpc > _patact_cond_keys[_mid ] )
											_lower = _mid + 1;
											
											else
											begin
												_cond += (_mid - _ckeys);
												_have = 1;
												
											end
											
										end
										
									end
									
								end
								if ( _have == 0  )
									begin
										cs = 0;
										_cont = 0;
										
									end
									
								end
								
							end
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _patact_cond_targs[_cond];
							if ( _patact_cond_actions[_cond] != 0  )
								begin
									_acts = _patact_cond_actions[_cond] ;
									_nacts = _patact_actions[_acts ];
									_acts += 1;
									while ( _nacts > 0  )
										begin
											case  _patact_actions[_acts ] 
											when -2 then
											begin
											end
											when 2  then
											begin
												begin
													begin
														te = p+1;
														
													end
													
												end
												
											end
											when 3  then
											begin
												begin
													begin
														te = p+1;
														begin
															print( "space\n" );
															
														end
														
													end
													
												end
												
											end
											when 4  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															print( "word\n" );
															
														end
														
													end
													
												end
												
											end
											when 5  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															print( "num\n" );
															
														end
														
													end
													
												end
												
											end
											when 6  then
											begin
												begin
													begin
														act = 7;
														
													end
													
												end
												
											end
											when 7  then
											begin
												begin
													begin
														act = 8;
														
													end
													
												end
												
											end
											when 8  then
											begin
												begin
													begin
														te = p+1;
														begin
															print( "word (c/lbh)\n" );
															
														end
														
													end
													
												end
												
											end
											when 9  then
											begin
												begin
													begin
														te = p+1;
														begin
															print( "space\n" );
															
														end
														
													end
													
												end
												
											end
											when 10  then
											begin
												begin
													begin
														te = p+1;
														begin
															print( "num (c/switch)\n" );
															
														end
														
													end
													
												end
												
											end
											when 11  then
											begin
												begin
													begin
														te = p+1;
														
													end
													
												end
												
											end
											when 12  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															print( "word (w/lbh)\n" );
															begin
																p = (( te-1))-1;
																
															end
															
															begin
																cs = 21;
																
															end
															
														end
														
													end
													
												end
												
											end
											when 13  then
											begin
												begin
													begin
														te = p;
														p = p - 1;
														begin
															print( "num (w/switch)\n" );
															begin
																p = (( te-1))-1;
																
															end
															
															begin
																cs = 21;
																
															end
															
														end
														
													end
													
												end
												
											end
											when 14  then
											begin
												begin
													begin
														p = ((te))-1;
														begin
															print( "word (w/lbh)\n" );
															begin
																p = (( te-1))-1;
																
															end
															
															begin
																cs = 21;
																
															end
															
														end
														
													end
													
												end
												
											end
											when 15  then
											begin
												begin
													begin
														case  act  
														when -2 then
														begin
														end
														when 7  then
														begin
															p = ((te))-1;
															begin
																print( "num (w/switch)\n" );
																
															end
															
														end
														when 8  then
														begin
															p = ((te))-1;
															begin
																print( "num (w/switch)\n" );
																begin
																	p = (( te-1))-1;
																	
																end
																
																begin
																	cs = 21;
																	
																end
																
															end
															
															
														end
													end
													
												end
												
												
											end
											
										end
										when 16  then
										begin
											begin
												begin
													te = p+1;
													begin
														print( "in semi\n" );
														begin
															cs = 17;
															
														end
														
													end
													
												end
												
											end
											
										end
										when 17  then
										begin
											begin
												begin
													act = 15;
													
												end
												
											end
											
										end
										when 18  then
										begin
											begin
												begin
													act = 16;
													
												end
												
											end
											
										end
										when 19  then
										begin
											begin
												begin
													te = p+1;
													begin
														print( "word (c/lbh)\n" );
														
													end
													
												end
												
											end
											
										end
										when 20  then
										begin
											begin
												begin
													te = p+1;
													begin
														print( "space\n" );
														
													end
													
												end
												
											end
											
										end
										when 21  then
										begin
											begin
												begin
													te = p+1;
													begin
														print( "num (c/switch)\n" );
														
													end
													
												end
												
											end
											
										end
										when 22  then
										begin
											begin
												begin
													te = p+1;
													begin
														print( "going to semi\n" );
														begin
															p = p - 1;
															
														end
														begin
															cs = 28;
															
														end
														
													end
													
												end
												
											end
											
										end
										when 23  then
										begin
											begin
												begin
													te = p+1;
													begin
														print( "immdiate\n" );
														begin
															cs = 24;
															
														end
														
													end
													
												end
												
											end
											
										end
										when 24  then
										begin
											begin
												begin
													te = p;
													p = p - 1;
													begin
														print( "word (w/lbh)\n" );
														begin
															p = p - 1;
															
														end
														begin
															cs = 21;
															
														end
														
													end
													
												end
												
											end
											
										end
										when 25  then
										begin
											begin
												begin
													te = p;
													p = p - 1;
													begin
														print( "num (w/switch)\n" );
														begin
															p = p - 1;
															
														end
														begin
															cs = 21;
															
														end
														
													end
													
												end
												
											end
											
										end
										when 26  then
										begin
											begin
												begin
													p = ((te))-1;
													begin
														print( "word (w/lbh)\n" );
														begin
															p = p - 1;
															
														end
														begin
															cs = 21;
															
														end
														
													end
													
												end
												
											end
											
										end
										when 27  then
										begin
											begin
												begin
													case  act  
													when -2 then
													begin
													end
													when 15  then
													begin
														p = ((te))-1;
														begin
															print( "num (w/switch)\n" );
															
														end
														
													end
													when 16  then
													begin
														p = ((te))-1;
														begin
															print( "num (w/switch)\n" );
															begin
																p = p - 1;
																
															end
															begin
																cs = 21;
																
															end
															
														end
														
														
													end
												end
												
											end
											
											
										end
										
										
									end
								end
								_nacts -= 1;
								_acts += 1;
								
							end
							
						end
						
					end
					
				end
				_acts = _patact_to_state_actions[cs] ;
				_nacts = _patact_actions[_acts ];
				_acts += 1;
				while ( _nacts > 0  )
					begin
						case  _patact_actions[_acts ] 
						when -2 then
						begin
						end
						when 0  then
						begin
							begin
								begin
									ts = 0;
									
								end
								
							end
							
							
						end
					end
					_nacts -= 1;
					_acts += 1;
					
				end
				
			end
			if ( cs == 0  )
				_cont = 0;
				
			end
			if ( _cont == 1  )
				p += 1;
				
			end
			
		end
		
	end
	
end

end

end

end

end
if cs >= patact_first_final
puts "ACCEPT"
else
puts "FAIL"
end
end

inp = [
"abcd foix\n",
"abcd\nanother\n",
"123 foix\n",
"!abcd foix\n",
"!abcd\nanother\n",
"!123 foix\n",
";",
]

inplen = 7

inp.each { |str| run_machine(str) }

