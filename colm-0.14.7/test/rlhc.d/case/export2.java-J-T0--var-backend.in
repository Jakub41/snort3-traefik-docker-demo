host( "working/export2.rl", 1 ) @{/*
	* @@LANG: java
	*/
	
	class export2
	{
		
		
	}@
	export char test_ex_c1 99;
	export char test_ex_c2 122;
	export char test_ex_c3 116;
	
	host( "working/export2.rl", 24 ) @{
	}@
	array s8 _test_actions( 0, 2 ) = { 0, 1, 0, 1, 1, 1, 2, 0 };
	
	array s8 _test_key_offsets( 0, 10 ) = { 0, 0, 3, 5, 10, 10, 0 };
	
	array char _test_trans_keys( 0, 122 ) = { u(10), u(48), u(57), u(10), u(46), u(10), u(65), u(90), u(97), u(122), u(99), u(116), u(122), u(0) };
	
	array s8 _test_single_lengths( 0, 3 ) = { 0, 1, 2, 1, 0, 3, 0 };
	
	array s8 _test_range_lengths( 0, 2 ) = { 0, 1, 0, 2, 0, 0, 0 };
	
	array s8 _test_index_offsets( 0, 11 ) = { 0, 0, 3, 6, 10, 11, 0 };
	
	array s8 _test_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _test_trans_offsets( 0, 14 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 };
	
	array s8 _test_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
	
	array s8 _test_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _test_cond_targs( 0, 5 ) = { 5, 1, 0, 5, 2, 0, 5, 3, 3, 0, 4, 1, 2, 3, 0, 0 };
	
	array s8 _test_cond_actions( 0, 5 ) = { 1, 0, 0, 5, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _test_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _test_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _test_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _test_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int test_start = 4;
	value int test_first_final = 4;
	value int test_error = 0;
	
	value int test_en_commands = 5;
	value int test_en_other = 4;
	
	host( "working/export2.rl", 25 ) @{
		
		static void test( char data[] )
		{
			int cs = test_en_commands, p = 0, pe = data.length;
			int top;
			
		}@
		{
		}
		host( "working/export2.rl", 32 ) @{
		}@
		{
			int _klen;
			uint _trans = 0;
			uint _cond = 0;
			uint _have = 0;
			uint _cont = 1;
			index s8 _acts;
			uint _nacts;
			index char _keys;
			index s8 _ckeys;
			int _cpc;
			while ( _cont == 1 ) {
				
				if ( cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						_keys = offset( _test_trans_keys, _test_key_offsets[cs] );
						_trans = cast(uint)_test_index_offsets[cs];
						_have = 0;
						
						_klen = cast(int)_test_single_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0 ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( deref( data, p )) < deref( _test_trans_keys, _mid ) )
								_upper = _mid - 1;
								else if ( ( deref( data, p )) > deref( _test_trans_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_trans += cast(uint)(_mid - _keys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								_keys += _klen;
								_trans += cast(uint)_klen;
							}
						}
						
						if ( _have == 0 ) {
							_klen = cast(int)_test_range_lengths[cs];
							if ( _klen > 0 ) {
								index char _lower;
								index char _mid;
								index char _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper ) {
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( deref( data, p )) < deref( _test_trans_keys, _mid ) )
									_upper = _mid - 2;
									else if ( ( deref( data, p )) > deref( _test_trans_keys, _mid + 1 ) )
									_lower = _mid + 2;
									else {
										_trans += cast(uint)((_mid - _keys)>>1);
										_have = 1;
									}
								}
								if ( _have == 0 )
								_trans += cast(uint)_klen;
							}
						}
						
						_ckeys = offset( _test_cond_keys, _test_trans_offsets[_trans] );
						_klen = cast(int)_test_trans_lengths[_trans];
						_cond = cast(uint)_test_trans_offsets[_trans];
						_have = 0;
						
						_cpc = 0;
						{
							index s8 _lower;
							index s8 _mid;
							index s8 _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < cast(int)deref( _test_cond_keys, _mid ) )
								_upper = _mid - 1;
								else if ( _cpc > cast(int)deref( _test_cond_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_cond += cast(uint)(_mid - _ckeys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								cs = 0;
								_cont = 0;
							}
						}
					}
					if ( _cont == 1 ) {
						cs = cast(int)_test_cond_targs[_cond];
						
						if ( _test_cond_actions[_cond] != 0 ) {
							_acts = offset( _test_actions, _test_cond_actions[_cond] );
							_nacts = cast(uint)deref( _test_actions, _acts );
							_acts += 1;
							while ( _nacts > 0 )
							{
								switch ( deref( _test_actions, _acts ) )
								{
									case 0 {
										host( "working/export2.rl", 15 ) ${ System.out.println( "c1" );}$
									}
									case 1 {
										host( "working/export2.rl", 16 ) ${ System.out.println( "c2" );}$
									}
									case 2 {
										host( "working/export2.rl", 17 ) ${ System.out.println( "c3" );}$
									}
								}
								_nacts -= 1;
								_acts += 1;
							}
						}
						
						if ( cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}
				}
			}
		}
		host( "working/export2.rl", 33 ) @{
			
			if ( cs >= test_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		public static void main( String args[] )
		{
			char data[] = { 
				test_ex_c1, '1', '2', '\n', 
				test_ex_c2, 'a', 'b', '\n', 
				test_ex_c3, '.', '.', '\n',
			};
			test( data );
		}
	}
	
	
}@