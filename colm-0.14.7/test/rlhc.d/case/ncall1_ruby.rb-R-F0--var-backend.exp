#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_ncall1_actions 
	private :_ncall1_actions, :_ncall1_actions=
end
self._ncall1_actions = [
0, 1, 0, 1, 1, 1, 2, 1, 3, 0 , 
]

class << self
	attr_accessor :_ncall1_trans_keys 
	private :_ncall1_trans_keys, :_ncall1_trans_keys=
end
self._ncall1_trans_keys = [
1, 0, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 0, 3, 1, 0, 1, 0, 1, 0, 0 , 
]

class << self
	attr_accessor :_ncall1_char_class 
	private :_ncall1_char_class, :_ncall1_char_class=
end
self._ncall1_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0 , 
]

class << self
	attr_accessor :_ncall1_index_offsets 
	private :_ncall1_index_offsets, :_ncall1_index_offsets=
end
self._ncall1_index_offsets = [
0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 16, 16, 0 , 
]

class << self
	attr_accessor :_ncall1_indices 
	private :_ncall1_indices, :_ncall1_indices=
end
self._ncall1_indices = [
0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15, 0 , 
]

class << self
	attr_accessor :_ncall1_index_defaults 
	private :_ncall1_index_defaults, :_ncall1_index_defaults=
end
self._ncall1_index_defaults = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_ncall1_trans_cond_spaces 
	private :_ncall1_trans_cond_spaces, :_ncall1_trans_cond_spaces=
end
self._ncall1_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_ncall1_cond_targs 
	private :_ncall1_cond_targs, :_ncall1_cond_targs=
end
self._ncall1_cond_targs = [
2, 0, 3, 4, 5, 6, 14, 8, 9, 15, 11, 12, 16, 13, 13, 13, 0 , 
]

class << self
	attr_accessor :_ncall1_cond_actions 
	private :_ncall1_cond_actions, :_ncall1_cond_actions=
end
self._ncall1_cond_actions = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 5, 7, 0 , 
]

class << self
	attr_accessor :_ncall1_nfa_targs 
	private :_ncall1_nfa_targs, :_ncall1_nfa_targs=
end
self._ncall1_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_ncall1_nfa_offsets 
	private :_ncall1_nfa_offsets, :_ncall1_nfa_offsets=
end
self._ncall1_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_ncall1_nfa_push_actions 
	private :_ncall1_nfa_push_actions, :_ncall1_nfa_push_actions=
end
self._ncall1_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_ncall1_nfa_pop_trans 
	private :_ncall1_nfa_pop_trans, :_ncall1_nfa_pop_trans=
end
self._ncall1_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :ncall1_start 
end
self.ncall1_start  = 13;

class << self
	attr_accessor :ncall1_first_final 
end
self.ncall1_first_final  = 13;

class << self
	attr_accessor :ncall1_error 
end
self.ncall1_error  = 0;

class << self
	attr_accessor :ncall1_en_unused 
end
self.ncall1_en_unused  = 1;

class << self
	attr_accessor :ncall1_en_one 
end
self.ncall1_en_one  = 7;

class << self
	attr_accessor :ncall1_en_two 
end
self.ncall1_en_two  = 10;

class << self
	attr_accessor :ncall1_en_main 
end
self.ncall1_en_main  = 13;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	top = 1
	stack = Array.new
	target = 1
	begin
		cs = ncall1_start;
		top = 0;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_acts = 0;
		_nacts= 0
		;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = (cs<<1) ;
								_inds = _ncall1_index_offsets[cs] ;
								if ( ( data[p ].ord) <= 119 && ( data[p ].ord) >= 10  )
									begin
										_ic = _ncall1_char_class[( data[p ].ord) - 10];
										if ( _ic <= _ncall1_trans_keys[_keys+1 ]&& _ic >= _ncall1_trans_keys[_keys ] )
											_trans = _ncall1_indices[_inds + ( _ic - _ncall1_trans_keys[_keys ])  ];
											
											else
											_trans = _ncall1_index_defaults[cs];
											
										end
										
									end
									
									else
									begin
										_trans = _ncall1_index_defaults[cs];
										
									end
									
								end
								
							end
							
						end
						if ( _cont == 1  )
							begin
								cs = _ncall1_cond_targs[_trans];
								if ( _ncall1_cond_actions[_trans] != 0  )
									begin
										_acts = _ncall1_cond_actions[_trans] ;
										_nacts = _ncall1_actions[_acts ];
										_acts += 1;
										while ( _nacts > 0  )
											begin
												case  _ncall1_actions[_acts ] 
												when -2 then
												begin
												end
												when 0  then
												begin
													begin
														print( "one\n" );
														begin
															top-= 1;
															cs = stack[top];
															
														end
														
													end
													
												end
												when 1  then
												begin
													begin
														print( "two\n" );
														begin
															top-= 1;
															cs = stack[top];
															
														end
														
													end
													
												end
												when 2  then
												begin
													begin
														target = 7;
														begin
															stack[top] = cs;
															top += 1;
															cs = (target);
															
														end
														
													end
													
												end
												when 3  then
												begin
													begin
														target = 10;
														begin
															stack[top] = cs;
															top += 1;
															cs = (target);
															
														end
														
													end
													
													
												end
											end
											_nacts -= 1;
											_acts += 1;
											
										end
										
									end
									
								end
								
							end
							if ( cs == 0  )
								_cont = 0;
								
							end
							if ( _cont == 1  )
								p += 1;
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end
if cs >= ncall1_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"1one2two1one\n",
	]
	
	inplen = 1
	
	inp.each { |str| run_machine(str) }
	
