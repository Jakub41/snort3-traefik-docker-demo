#include <stdio.h>

struct LangEl
{
	int key;
	char *name;
};

struct fsm
{
	int cs;
};



static const char  _fsm_actions [] = { 0, 1, 0, 1, 1, 0 ,  };
static const char  _fsm_key_offsets [] = { 0, 0, 1, 3, 0 ,  };
static const int  _fsm_trans_keys [] = { 1, 2, 3, 0 ,  };
static const char  _fsm_single_lengths [] = { 0, 1, 2, 0, 0 ,  };
static const char  _fsm_range_lengths [] = { 0, 0, 0, 0, 0 ,  };
static const char  _fsm_index_offsets [] = { 0, 0, 2, 5, 0 ,  };
static const char  _fsm_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _fsm_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 0 ,  };
static const char  _fsm_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _fsm_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _fsm_cond_targs [] = { 2, 0, 2, 3, 0, 0, 0 ,  };
static const char  _fsm_cond_actions [] = { 1, 0, 1, 1, 0, 0, 0 ,  };
static const char  _fsm_eof_actions [] = { 0, 0, 0, 3, 0 ,  };
static const char  _fsm_nfa_targs [] = { 0, 0 ,  };
static const char  _fsm_nfa_offsets [] = { 0, 0, 0, 0, 0 ,  };
static const char  _fsm_nfa_push_actions [] = { 0, 0 ,  };
static const char  _fsm_nfa_pop_trans [] = { 0, 0 ,  };
static const int  fsm_start  = 1;
static const int  fsm_first_final  = 3;
static const int  fsm_error  = 0;
static const int  fsm_en_main  = 1;
void fsm_init( struct fsm *fsm )
{

	{
		(fsm->cs) = ( int ) fsm_start;
	}
}

void fsm_execute( struct fsm *fsm,  struct LangEl *_data, int _len )
{
	struct LangEl *p = _data;
	struct LangEl *pe = _data+_len;
	struct LangEl *eof = pe;
	
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		const char  *_acts;
		unsigned int _nacts;
		const int  *_keys;
		const char  *_ckeys;
		int _cpc;
		if ( p == pe  )
		goto _test_eof;
		
		if ( (fsm->cs) == 0  )
		goto _out;
		
		_resume :
		_keys = _fsm_trans_keys + _fsm_key_offsets[(fsm->cs)];
		_trans = ( unsigned int  ) _fsm_index_offsets[(fsm->cs)];
		_klen = ( int ) _fsm_single_lengths[(fsm->cs)];
		if ( _klen > 0  )
		{
			const int  *_lower;
			const int  *_mid;
			const int  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( (p->key) < (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( (p->key) > (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _fsm_range_lengths[(fsm->cs)];
		if ( _klen > 0  )
		{
			const int  *_lower;
			const int  *_mid;
			const int  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( (p->key) < (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( (p->key) > (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _fsm_cond_keys + _fsm_trans_offsets[_trans];
		_klen = ( int ) _fsm_trans_lengths[_trans];
		_cond = ( unsigned int  ) _fsm_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			(fsm->cs) = 0;
			goto _again;
		}
		
		_match_cond :
		(fsm->cs) = ( int ) _fsm_cond_targs[_cond];
		if ( _fsm_cond_actions[_cond]== 0  )
		goto _again;
		
		
		_acts = _fsm_actions + _fsm_cond_actions[_cond];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf("%s\n", p->name);
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( (fsm->cs) == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _fsm_actions + _fsm_eof_actions[(fsm->cs)];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 1 :
					{
						printf("accept\n");
					}
					
					break;
					
				}
				__nacts -= 1;
				__acts += 1;
			}
			
		}
		
		
		
		_out :
		{}
		
	}
}

int fsm_finish( struct fsm *fsm )
{
	if ( fsm->cs == fsm_error )
	return -1;
	if ( fsm->cs >= fsm_first_final )
	return 1;
	return 0;
}

int main()
{
	static struct fsm fsm;
	static struct LangEl lel[] = { 
		{1, "one"}, 
		{2, "two-a"}, 
		{2, "two-b"}, 
		{2, "two-c"}, 
		{3, "three"}
	};
	
	fsm_init( &fsm );
	fsm_execute( &fsm, lel, 5 );
	fsm_finish( &fsm );
	
	return 0;
}

