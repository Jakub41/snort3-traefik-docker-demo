#include <iostream>
#include <stdio.h>
#include <string.h>

using namespace std;

struct ErrAct 
{
	int cs;
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	int init( );
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	int execute( const char *data, int len );
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	int finish( );
};



static const char  _ErrAct_key_offsets [] = { 0, 0, 4, 6, 10, 12, 15, 0 ,  };
static const char  _ErrAct_trans_keys [] = { 43, 45, 48, 57, 48, 57, 10, 46, 48, 57, 48, 57, 10, 48, 57, 0 ,  };
static const char  _ErrAct_single_lengths [] = { 0, 2, 0, 2, 0, 1, 0, 0 ,  };
static const char  _ErrAct_range_lengths [] = { 0, 1, 1, 1, 1, 1, 0, 0 ,  };
static const char  _ErrAct_index_offsets [] = { 0, 0, 4, 6, 10, 12, 15, 0 ,  };
static const char  _ErrAct_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _ErrAct_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 ,  };
static const char  _ErrAct_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _ErrAct_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_cond_targs [] = { 2, 2, 3, 0, 3, 0, 6, 4, 3, 0, 5, 0, 6, 5, 0, 0, 0 ,  };
static const char  _ErrAct_cond_actions [] = { 0, 0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 2, 0, 0, 2, 0, 0 ,  };
static const char  _ErrAct_eof_actions [] = { 0, 1, 2, 3, 2, 2, 0, 0 ,  };
static const char  _ErrAct_nfa_targs [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_nfa_push_actions [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_pop_trans [] = { 0, 0 ,  };
static const int  ErrAct_start  = 1;
static const int  ErrAct_first_final  = 6;
static const int  ErrAct_error  = 0;
static const int  ErrAct_en_main  = 1;
int ErrAct::init( )
{

	{
		cs = ( int ) ErrAct_start;
	}
	return 0;
}

int ErrAct::execute( const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	const char *eof = pe;
	
	{
		int _klen;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans;
		unsigned int _cond = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						switch ( _ErrAct_eof_actions[cs] ) {
							case 1 :
							{
								printf(" DIGIT PLUS MINUS\n"); 
							}
							
							break;
							case 2 :
							{
								printf(" DIGIT\n"); 
							}
							
							break;
							case 3 :
							{
								printf(" DIGIT DECIMAL\n"); 
							}
							
							break;
							
						}
					}
					
				}
				
				
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _ErrAct_trans_keys + _ErrAct_key_offsets[cs];
					_trans = ( unsigned int  ) _ErrAct_index_offsets[cs];
					_have = 0;
					_klen = ( int ) _ErrAct_single_lengths[cs];
					if ( _klen > 0  )
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( ((*( p  ))
							)< (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( ((*( p  ))
							)> (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_trans += ( unsigned int  ) (_mid - _keys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += ( unsigned int  ) _klen;
						}
						
					}
					
					
					if ( _have == 0  )
					{
						_klen = ( int ) _ErrAct_range_lengths[cs];
						if ( _klen > 0  )
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 2;
								
								else if ( ((*( p  ))
								)> (*( _mid + 1  ))
								)
								_lower = _mid + 2;
								
								else
								{
									_trans += ( unsigned int  ) ((_mid - _keys)>>1);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							_trans += ( unsigned int  ) _klen;
							
						}
						
					}
					
					
					_ckeys = _ErrAct_cond_keys + _ErrAct_trans_offsets[_trans];
					_klen = ( int ) _ErrAct_trans_lengths[_trans];
					_cond = ( unsigned int  ) _ErrAct_trans_offsets[_trans];
					_have = 0;
					_cpc = 0;
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < ( int ) (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( _cpc > ( int ) (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_cond += ( unsigned int  ) (_mid - _ckeys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
						}
						
					}
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _ErrAct_cond_targs[_cond];
					switch ( _ErrAct_cond_actions[_cond] ) {
						case 1 :
						{
							printf(" DIGIT PLUS MINUS\n"); 
						}
						
						break;
						case 2 :
						{
							printf(" DIGIT\n"); 
						}
						
						break;
						case 3 :
						{
							printf(" DIGIT DECIMAL\n"); 
						}
						
						break;
						
					}
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
	if ( cs == ErrAct_error )
	return -1;
	if ( cs >= ErrAct_first_final )
	return 1;
	return 0;
}

int ErrAct::finish( )
{
	if ( cs == ErrAct_error )
	return -1;
	if ( cs >= ErrAct_first_final )
	return 1;
	return 0;
}

#define BUFSIZE 1024

void test( const char *buf )
{
	ErrAct errAct;
	errAct.init();
	errAct.execute( buf, strlen(buf) );
	if ( errAct.finish() > 0 )
	cout << "ACCEPT" << endl;
	else
	cout << "FAIL" << endl;
}

int main()
{
	test( "1\n" );
	test( "+1\n" );
	test( "-1\n" );
	test( "1.1\n" );
	test( "+1.1\n" );
	test( "-1.1\n" );
	test( "a\n" );
	test( "-\n" );
	test( "+\n" );
	test( "-a\n" );
	test( "+b\n" );
	test( "1.\n" );
	test( "1d\n" );
	test( "1.d\n" );
	test( "1.1d\n" );
	return 0;
}

