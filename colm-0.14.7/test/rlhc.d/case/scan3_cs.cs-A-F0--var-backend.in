host( "working/scan3_cs.rl", 1 ) @{/*
	* @@LANG: csharp
	* @@GENERATED: true
	*/
	
	using System;
	// Disables lots of warnings that appear in the test suite
	#pragma warning disable 0168, 0169, 0219, 0162, 0414
	namespace Test {
		class Test
		{
			int ts;
			int te;
			int act;
			int token;
			
			
			
			
		}@
		array s8 _scanner_actions( 0, 6 ) = { 0, 1, 0, 1, 1, 1, 6, 2, 2, 3, 2, 2, 4, 2, 2, 5, 0 };
		
		array char _scanner_trans_keys( 0, 1 ) = { c(1), c(0), c(0), c(1), c(1), c(0), c(0) };
		
		array s8 _scanner_char_class( 0, 1 ) = { 0, 1, 0 };
		
		array s8 _scanner_index_offsets( 0, 2 ) = { 0, 0, 2, 0 };
		
		array s8 _scanner_indices( 0, 2 ) = { 0, 2, 0 };
		
		array s8 _scanner_index_defaults( 0, 4 ) = { 0, 1, 4, 0 };
		
		array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, 0 };
		
		array s8 _scanner_cond_targs( 0, 2 ) = { 2, 0, 2, 1, 2, 0 };
		
		array s8 _scanner_cond_actions( 0, 13 ) = { 7, 0, 10, 5, 13, 0 };
		
		array s8 _scanner_to_state_actions( 0, 1 ) = { 0, 1, 0, 0 };
		
		array s8 _scanner_from_state_actions( 0, 3 ) = { 0, 3, 0, 0 };
		
		array s8 _scanner_eof_trans( 0, 4 ) = { 0, 0, 4, 0 };
		
		array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };
		
		array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int scanner_start = 1;
		value int scanner_first_final = 1;
		value int scanner_error = 0;
		
		value int scanner_en_main = 1;
		
		host( "working/scan3_cs.rl", 31 ) @{
			int cs;
			
			void init()
			{
			}@
			{
				cs = cast(int)scanner_start;
				ts = nil;
				te = nil;
				act = 0;
			}
			host( "working/scan3_cs.rl", 36 ) @{
			}
			
			void exec( char[] data, int len )
			{
				int p = 0;
				int pe = len;
				int eof = len;
				string _s;
				char [] buffer = new char [1024];
				int blen = 0;
			}@
			{
				uint _trans = 0;
				uint _have = 0;
				uint _cont = 1;
				index s8 _acts;
				uint _nacts;
				index char _keys;
				index s8 _inds;
				while ( _cont == 1 ) {
					
					if ( cs == 0 )
					_cont = 0;
					_have = 0;
					if ( p == pe ) {
						if ( p == eof )
						{
							if ( _scanner_eof_trans[cs] > 0 ) {
								_trans = cast(uint)_scanner_eof_trans[cs] - 1;
								_have = 1;
							}
							if ( _have == 0 ) {
							}
						}
						
						if ( _have == 0 )
						_cont = 0;
					}
					if ( _cont == 1 ) {
						if ( _have == 0 ) {
							_acts = offset( _scanner_actions, _scanner_from_state_actions[cs] );
							_nacts = cast(uint)deref( _scanner_actions, _acts );
							_acts += 1;
							while ( _nacts > 0 ) {
								switch ( deref( _scanner_actions, _acts ) ) {
									case 1 {
										host( "NONE", 1 ) ${${ts = p;}$}$
									}
								}
								_nacts -= 1;
								_acts += 1;
							}
							
							_keys = offset( _scanner_trans_keys, (cs<<1) );
							_inds = offset( _scanner_indices, _scanner_index_offsets[cs] );
							
							if ( ( deref( data, p )) <= 98 && ( deref( data, p )) >= 97 )
							{
								int _ic = cast(int)_scanner_char_class[cast(int)( deref( data, p )) - 97];
								if ( _ic <= cast(int)deref( _scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _scanner_trans_keys, _keys ) )
								_trans = cast(uint)deref( _scanner_indices, _inds + cast(int)( _ic - cast(int)deref( _scanner_trans_keys, _keys ) )  ); 
								else
								_trans = cast(uint)_scanner_index_defaults[cs];
							}
							else {
								_trans = cast(uint)_scanner_index_defaults[cs];
							}
							
						}
						if ( _cont == 1 ) {
							cs = cast(int)_scanner_cond_targs[_trans];
							
							if ( _scanner_cond_actions[_trans] != 0 ) {
								_acts = offset( _scanner_actions, _scanner_cond_actions[_trans] );
								_nacts = cast(uint)deref( _scanner_actions, _acts );
								_acts += 1;
								while ( _nacts > 0 )
								{
									switch ( deref( _scanner_actions, _acts ) )
									{
										case 2 {
											host( "NONE", 1 ) ${${te = p+1;}$}$
										}
										case 3 {
											host( "working/scan3_cs.rl", 23 ) ${${act = 1;}$}$
										}
										case 4 {
											host( "working/scan3_cs.rl", 24 ) ${${act = 2;}$}$
										}
										case 5 {
											host( "working/scan3_cs.rl", 25 ) ${${act = 3;}$}$
										}
										case 6 {
											host( "NONE", 1 ) ${${switch( act ) {
														case 1 {
															p = ((te))-1;
															host( "working/scan3_cs.rl", 23 ) ${Console.Write( "pat1\n" );}$ }
														case 2 {
															p = ((te))-1;
															host( "working/scan3_cs.rl", 24 ) ${Console.Write( "pat2\n" );}$ }
														case 3 {
															p = ((te))-1;
															host( "working/scan3_cs.rl", 25 ) ${Console.Write( "pat3\n" );}$ }
													}}$
											}$
										}
									}
									_nacts -= 1;
									_acts += 1;
								}
							}
							
							_acts = offset( _scanner_actions, _scanner_to_state_actions[cs] );
							_nacts = cast(uint)deref( _scanner_actions, _acts );
							_acts += 1;
							while ( _nacts > 0 ) {
								switch ( deref( _scanner_actions, _acts ) ) {
									case 0 {
										host( "NONE", 1 ) ${${ts = nil;}$}$
									}
								}
								_nacts -= 1;
								_acts += 1;
							}
							
							if ( cs == 0 )
							_cont = 0;
							if ( _cont == 1 )
							p += 1;
							
						}}
				}
			}
			host( "working/scan3_cs.rl", 47 ) @{
			}
			
			void finish( )
			{
				if ( cs >= scanner_first_final )
				Console.WriteLine( "ACCEPT" );
				else
				Console.WriteLine( "FAIL" );
			}
			
			static readonly string[] inp = {
				"ab89",
			};
			
			
			static readonly int inplen = 1;
			
			public static void Main (string[] args)
			{
				Test machine = new Test();
				for ( int i = 0; i < inplen; i++ ) {
					machine.init();
					machine.exec( inp[i].ToCharArray(), inp[i].Length );
					machine.finish();
				}
			}
		}
	}
}@