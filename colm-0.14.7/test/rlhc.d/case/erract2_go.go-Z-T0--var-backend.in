host( "working/erract2_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	
	
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array s8 _erract_actions( 0, 7 ) = { 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0 };

array s8 _erract_key_offsets( 0, 6 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 0 };

array byte _erract_trans_keys( 0, 111 ) = { u(104), u(101), u(108), u(108), u(111), u(10), u(0) };

array s8 _erract_single_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 0, 0 };

array s8 _erract_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_index_offsets( 0, 12 ) = { 0, 0, 2, 4, 6, 8, 10, 12, 0 };

array s8 _erract_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _erract_trans_offsets( 0, 12 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0 };

array s8 _erract_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _erract_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_cond_targs( 0, 7 ) = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 0, 0 };

array s8 _erract_cond_actions( 0, 7 ) = { 0, 1, 0, 4, 0, 4, 0, 4, 0, 4, 0, 7, 0, 0 };

array s8 _erract_eof_actions( 0, 20 ) = { 0, 10, 15, 15, 15, 15, 20, 0, 0 };

array s8 _erract_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int erract_start = 1;
value int erract_first_final = 7;
value int erract_error = 0;

value int erract_en_main = 1;

host( "working/erract2_go.rl", 37 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)erract_start;
	}
	host( "working/erract2_go.rl", 40 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
		var eof int = pe
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index byte _keys;
		index s8 _ckeys;
		int _cpc;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						index s8 __acts;
						uint __nacts;
						__acts = offset( _erract_actions, _erract_eof_actions[cs] );
						__nacts = cast(uint)deref( _erract_actions, __acts );
						__acts += 1;
						while ( __nacts > 0 ) {
							switch ( deref( _erract_actions, __acts ) ) {
								case 0 {
									host( "working/erract2_go.rl", 15 ) ${fmt.Print( "err_start\n" );}$
								}
								case 1 {
									host( "working/erract2_go.rl", 16 ) ${fmt.Print( "err_all\n" );}$
								}
								case 2 {
									host( "working/erract2_go.rl", 17 ) ${fmt.Print( "err_middle\n" );}$
								}
								case 3 {
									host( "working/erract2_go.rl", 18 ) ${fmt.Print( "err_out\n" );}$
								}
								case 4 {
									host( "working/erract2_go.rl", 20 ) ${fmt.Print( "eof_start\n" );}$
								}
								case 5 {
									host( "working/erract2_go.rl", 21 ) ${fmt.Print( "eof_all\n" );}$
								}
								case 6 {
									host( "working/erract2_go.rl", 22 ) ${fmt.Print( "eof_middle\n" );}$
								}
								case 7 {
									host( "working/erract2_go.rl", 23 ) ${fmt.Print( "eof_out\n" );}$
								}
							}
							__nacts -= 1;
							__acts += 1;
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _erract_trans_keys, _erract_key_offsets[cs] );
					_trans = cast(uint)_erract_index_offsets[cs];
					_have = 0;
					
					_klen = cast(int)_erract_single_lengths[cs];
					if ( _klen > 0 ) {
						index byte _lower;
						index byte _mid;
						index byte _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _erract_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _erract_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_erract_range_lengths[cs];
						if ( _klen > 0 ) {
							index byte _lower;
							index byte _mid;
							index byte _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _erract_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _erract_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _erract_cond_keys, _erract_trans_offsets[_trans] );
					_klen = cast(int)_erract_trans_lengths[_trans];
					_cond = cast(uint)_erract_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _erract_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _erract_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							cs = 0;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					cs = cast(int)_erract_cond_targs[_cond];
					
					if ( _erract_cond_actions[_cond] != 0 ) {
						_acts = offset( _erract_actions, _erract_cond_actions[_cond] );
						_nacts = cast(uint)deref( _erract_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _erract_actions, _acts ) )
							{
								case 0 {
									host( "working/erract2_go.rl", 15 ) ${fmt.Print( "err_start\n" );}$
								}
								case 1 {
									host( "working/erract2_go.rl", 16 ) ${fmt.Print( "err_all\n" );}$
								}
								case 2 {
									host( "working/erract2_go.rl", 17 ) ${fmt.Print( "err_middle\n" );}$
								}
								case 3 {
									host( "working/erract2_go.rl", 18 ) ${fmt.Print( "err_out\n" );}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}
			}
		}
	}
	host( "working/erract2_go.rl", 47 ) @{
	}
	func finish() {
		if cs >= erract_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"",
		"h",
		"x",
		"he",
		"hx",
		"hel",
		"hex",
		"hell",
		"helx",
		"hello",
		"hellx",
		"hello\n",
		"hellox",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@