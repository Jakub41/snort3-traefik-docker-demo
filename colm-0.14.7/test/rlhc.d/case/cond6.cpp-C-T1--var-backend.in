host( "working/cond6.rl", 1 ) @{/* 
	* @@LANG: c++
	*/
	
	/* Balanced parenthesis with conditions. */
	
	#include <iostream>
	#include <string.h>
	using std::cout;
	using std::endl;
	
}@
array s8 _cond_key_offsets( 0, 6 ) = { 0, 0, 2, 4, 6, 0 };

array char _cond_trans_keys( 0, 41 ) = { 32, 40, 40, 41, 10, 32, 0 };

array s8 _cond_single_lengths( 0, 2 ) = { 0, 2, 2, 2, 0, 0 };

array s8 _cond_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _cond_index_offsets( 0, 9 ) = { 0, 0, 3, 6, 9, 0 };

array s8 _cond_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, 0 };

array s8 _cond_trans_offsets( 0, 10 ) = { 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 0 };

array s8 _cond_trans_lengths( 0, 2 ) = { 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 0 };

array s8 _cond_cond_keys( 0, 1 ) = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 };

array s8 _cond_cond_targs( 0, 4 ) = { 1, 2, 0, 2, 2, 3, 2, 4, 3, 0, 0, 0 };

array s8 _cond_cond_actions( 0, 4 ) = { 0, 1, 0, 2, 3, 0, 0, 4, 0, 0, 0, 0 };

array s8 _cond_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _cond_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _cond_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _cond_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int cond_start = 1;
value int cond_first_final = 4;

value int cond_en_main = 1;

host( "working/cond6.rl", 15 ) @{
	
	void test( const char *str )
	{
		int cs = cond_start, n = 0;
		const char *p = str;
		const char *pe = str + strlen( str );
		
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _cond_trans_keys, _cond_key_offsets[cs] );
					_trans = cast(uint)_cond_index_offsets[cs];
					_have = 0;
					
					_klen = cast(int)_cond_single_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _cond_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _cond_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_cond_range_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _cond_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _cond_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _cond_cond_keys, _cond_trans_offsets[_trans] );
					_klen = cast(int)_cond_trans_lengths[_trans];
					_cond = cast(uint)_cond_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					switch ( _cond_trans_cond_spaces[_trans] ) {
						
						case 0 {
							if ( host( "working/cond6.rl", 26 ) ={!n}= ) _cpc += 1;
						}
					}
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _cond_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _cond_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							cs = 0;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					cs = cast(int)_cond_cond_targs[_cond];
					
					switch ( _cond_cond_actions[_cond] ) {
						case 1 {
							host( "working/cond6.rl", 24 ) ${n=0;}$
						}
						case 2 {
							host( "working/cond6.rl", 25 ) ${n++;}$
						}
						case 3 {
							host( "working/cond6.rl", 25 ) ${n--;}$
						}
						case 4 {
							host( "working/cond6.rl", 28 ) ${cout << "success";}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/cond6.rl", 31 ) @{
		if ( cs < cond_first_final )
		cout << "failure";
		cout << endl;
	}
	
	int main()
	{
		test( "( ( )\n" );
		test( "()()\n" );
		test( "(((\n" );
		test( "((()\n" );
		test( "((())\n" );
		test( "()\n" );
		test( "((()))\n" );
		test( "(()())\n" );
		test( "((())()(((()))))\n" );
		return 0;
	}
	
}@