#include <iostream>
#include <string.h>
using std::cout;
using std::endl;



static const char  _foo_trans_keys [] = { 1, 0, 0, 5, 0 ,  };
static const char  _foo_char_class [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_index_offsets [] = { 0, 0, 0 ,  };
static const char  _foo_indices [] = { 0, 2, 3, 4, 5, 6, 0 ,  };
static const char  _foo_index_defaults [] = { 0, 1, 0 ,  };
static const char  _foo_trans_cond_spaces [] = { -1, -1, 0, 4, 6, 7, 5, 0 ,  };
static const char  _foo_trans_offsets [] = { 0, 1, 2, 4, 8, 16, 32, 0 ,  };
static const char  _foo_cond_targs [] = { 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _foo_cond_actions [] = { 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _foo_nfa_targs [] = { 0, 0 ,  };
static const char  _foo_nfa_offsets [] = { 0, 0, 0 ,  };
static const char  _foo_nfa_push_actions [] = { 0, 0 ,  };
static const char  _foo_nfa_pop_trans [] = { 0, 0 ,  };
static const int  foo_start  = 1;
static const int  foo_en_main  = 1;
void test( char *str )
{
	int len = strlen( str );
	int cs = foo_start;
	char *p = str, *pe = str+len;
	
	{
		int _trans = 0;
		unsigned int _cond = 0;
		const char  *_keys;
		const char  *_inds;
		int _cpc;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _foo_trans_keys + (cs<<1);
		_inds = _foo_indices + _foo_index_offsets[cs];
		if ( ((*( p  ))
		)<= 70 && ((*( p  ))
		)>= 0  )
		{
			int _ic = ( int ) _foo_char_class[( int ) ((*( p  ))
			)- 0];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _foo_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _foo_index_defaults[cs];
		}
		
		
		_cond = ( unsigned int  ) _foo_trans_offsets[_trans];
		_cpc = 0;
		switch ( _foo_trans_cond_spaces[_trans] ) {
			case 0 :
			if ( ((cout << "c1 ", true)) )
			_cpc += 1;
			
			
			break;
			case 4 :
			if ( ((cout << "c1 ", true)) )
			_cpc += 1;
			
			if ( ((cout << "c2 ", true)) )
			_cpc += 2;
			
			
			break;
			case 5 :
			if ( ((cout << "c1 ", true)) )
			_cpc += 1;
			
			if ( ((cout << "c3 ", true)) )
			_cpc += 2;
			
			
			break;
			case 6 :
			if ( ((cout << "c1 ", true)) )
			_cpc += 1;
			
			if ( ((cout << "c2 ", true)) )
			_cpc += 2;
			
			if ( ((cout << "c3 ", true)) )
			_cpc += 4;
			
			
			break;
			case 7 :
			if ( ((cout << "c1 ", true)) )
			_cpc += 1;
			
			if ( ((cout << "c2 ", true)) )
			_cpc += 2;
			
			if ( ((cout << "c3 ", true)) )
			_cpc += 4;
			
			if ( ((cout << "c4 ", true)) )
			_cpc += 8;
			
			
			break;
			
		}
		_cond += ( unsigned int  ) _cpc;
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _foo_cond_targs[_cond];
		if ( _foo_cond_actions[_cond]== 0  )
		goto _again;
		
		
		switch ( _foo_cond_actions[_cond] ) {
			case 1 :
			{
				cout << "char: " << (int)*p << endl;
			}
			
			break;
			
		}
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}

char data[] = { 5, 15, 25, 31, 35, 39, 45, 55, 65, 0 };

int main()
{
	test( data );
	return 0;
}

