host( "working/forder2.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	/*
	* After the fact start and ending transitions. Behaves like constructors of
	* and destructors in c++.
	*/
	
	struct forder
	{
		int cs;
	};
	
	
	
}@
array s8 _forder_actions( 0, 5 ) = { 0, 2, 1, 4, 2, 2, 5, 4, 3, 0, 1, 4, 0 };

array s8 _forder_key_offsets( 0, 6 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 0 };

array char _forder_trans_keys( 0, 114 ) = { 105, 110, 110, 101, 114, 10, 0 };

array s8 _forder_single_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 0, 0 };

array s8 _forder_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _forder_index_offsets( 0, 12 ) = { 0, 0, 2, 4, 6, 8, 10, 12, 0 };

array s8 _forder_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _forder_trans_offsets( 0, 12 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0 };

array s8 _forder_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _forder_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _forder_cond_targs( 0, 7 ) = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 0, 0 };

array s8 _forder_cond_actions( 0, 7 ) = { 7, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, 0, 0 };

array s8 _forder_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _forder_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _forder_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _forder_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int forder_start = 1;
value int forder_first_final = 7;
value int forder_error = 0;

value int forder_en_main = 1;

host( "working/forder2.rl", 38 ) @{
	
	void forder_init( struct forder *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)forder_start;
	}
	host( "working/forder2.rl", 42 ) @{
	}
	
	void forder_execute( struct forder *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( host( "-", 1 ) ={ fsm->cs}= == 0 )
			goto _out;
			label _resume {
				_keys = offset( _forder_trans_keys, _forder_key_offsets[host( "-", 1 ) ={ fsm->cs}=] );
				_trans = cast(uint)_forder_index_offsets[host( "-", 1 ) ={ fsm->cs}=];
				
				_klen = cast(int)_forder_single_lengths[host( "-", 1 ) ={ fsm->cs}=];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _forder_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _forder_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_forder_range_lengths[host( "-", 1 ) ={ fsm->cs}=];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _forder_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _forder_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _forder_cond_keys, _forder_trans_offsets[_trans] );
				_klen = cast(int)_forder_trans_lengths[_trans];
				_cond = cast(uint)_forder_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _forder_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _forder_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					host( "-", 1 ) ={ fsm->cs}= = 0;
					goto _again;
				}
			}
			label _match_cond {
				host( "-", 1 ) ={ fsm->cs}= = cast(int)_forder_cond_targs[_cond];
				
				if ( _forder_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = offset( _forder_actions, _forder_cond_actions[_cond] );
				_nacts = cast(uint)deref( _forder_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( deref( _forder_actions, _acts ) )
					{
						case 0 {
							host( "working/forder2.rl", 23 ) ${printf("enter inner\n");}$
						}
						case 1 {
							host( "working/forder2.rl", 24 ) ${printf("inside inner\n");}$
						}
						case 2 {
							host( "working/forder2.rl", 25 ) ${printf("leave inner\n");}$
						}
						case 3 {
							host( "working/forder2.rl", 29 ) ${printf("enter outter\n");}$
						}
						case 4 {
							host( "working/forder2.rl", 30 ) ${printf("inside outter\n");}$
						}
						case 5 {
							host( "working/forder2.rl", 31 ) ${printf("leave outter\n");}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				if ( host( "-", 1 ) ={ fsm->cs}= == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/forder2.rl", 50 ) @{
	}
	
	int forder_finish( struct forder *fsm )
	{
		if ( fsm->cs == forder_error )
		return -1;
		if ( fsm->cs >= forder_first_final )
		return 1;
		return 0;
	}
	
	struct forder fsm;
	
	void test( char *buf )
	{
		int len = strlen( buf );
		forder_init( &fsm );
		forder_execute( &fsm, buf, len );
		if ( forder_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	
	int main()
	{
		test( "inner\n");
		
		test(
		"inner\n"
		"foobar\n"
		);
		
		test( "" );
		test( "\n" );
		test( "inn\n" );
		
		return 0;
	}
	
}@