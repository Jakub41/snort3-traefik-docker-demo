host( "working/erract3.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#define IDENT_BUFLEN 256
	
	struct erract
	{
		int cs;
	};
	
	
	
}@
array s8 _erract_eof_actions( 0, 1 ) = { 0, 0, 1, 1, 1, 1, 1, 0 };

array s8 _erract_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int erract_start = 0;
value int erract_first_final = 0;
value int erract_error = -1;

value int erract_en_main = 0;

host( "working/erract3.rl", 26 ) @{
	
	void erract_init( struct erract *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)erract_start;
	}
	host( "working/erract3.rl", 30 ) @{
	}
	
	void erract_execute( struct erract *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		const char *eof = pe;
	}@
	{
		if ( p == pe )
		goto _test_eof;
		_resume:
		switch ( host( "-", 1 ) ={ fsm->cs}= ) {
			case 0:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 104: {
					goto ctr2;
				}
			}
			{
				goto ctr0;
			}
			case 1:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr4;
			}
			{
				goto ctr3;
			}
			case 2:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 101: {
					goto ctr5;
				}
			}
			{
				goto ctr0;
			}
			case 3:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 108: {
					goto ctr6;
				}
			}
			{
				goto ctr0;
			}
			case 4:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 108: {
					goto ctr7;
				}
			}
			{
				goto ctr0;
			}
			case 5:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr1;
				}
				case 111: {
					goto ctr8;
				}
			}
			{
				goto ctr0;
			}
			case 6:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr9;
			}
			{
				goto ctr0;
			}
		}
		
		ctr9: host( "-", 1 ) ={ fsm->cs}= = 0; goto f2;
		ctr3: host( "-", 1 ) ={ fsm->cs}= = 1; goto _again;
		ctr0: host( "-", 1 ) ={ fsm->cs}= = 1; goto f0;
		ctr1: host( "-", 1 ) ={ fsm->cs}= = 1; goto f1;
		ctr4: host( "-", 1 ) ={ fsm->cs}= = 1; goto f2;
		ctr2: host( "-", 1 ) ={ fsm->cs}= = 2; goto _again;
		ctr5: host( "-", 1 ) ={ fsm->cs}= = 3; goto _again;
		ctr6: host( "-", 1 ) ={ fsm->cs}= = 4; goto _again;
		ctr7: host( "-", 1 ) ={ fsm->cs}= = 5; goto _again;
		ctr8: host( "-", 1 ) ={ fsm->cs}= = 6; goto _again;
		
		f0:
		host( "working/erract3.rl", 18 ) ${ printf("hello fails\n");}$
		goto _again;
		f2:
		host( "working/erract3.rl", 20 ) ${printf("newline\n");}$
		goto _again;
		f1:
		host( "working/erract3.rl", 20 ) ${printf("newline\n");}$	host( "working/erract3.rl", 18 ) ${ printf("hello fails\n");}$
		goto _again;
		
		_again:
		p+= 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		if ( p == eof )
		{
			switch ( _erract_eof_actions[host( "-", 1 ) ={ fsm->cs}=] ) {
				case 1{
					host( "working/erract3.rl", 18 ) ${ printf("hello fails\n");}$
				}
			}
		}
		
	}
	host( "working/erract3.rl", 38 ) @{
	}
	
	int erract_finish( struct erract *fsm )
	{
		if ( fsm->cs == erract_error )
		return -1;
		else if ( fsm->cs >= erract_first_final )
		return 1;
		return 0;
	}
	
	#include <stdio.h>
	#include <string.h>
	
	struct erract fsm;
	
	void test( char *buf )
	{
		int len = strlen(buf);
		erract_init( &fsm );
		erract_execute( &fsm, buf, len );
		if ( erract_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test(
		"hello\n"
		"hello\n"
		"hello\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"hello there\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"he"	);
		
		test( "" );
		
		return 0;
	}
	
}@