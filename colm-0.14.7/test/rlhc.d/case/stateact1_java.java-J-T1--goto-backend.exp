class stateact1_java
{







	private static byte  _state_act_key_offsets [] = { 0, 0, 1, 2, 3, 4, 0 ,  };
	private static char  _state_act_trans_keys [] = { 105, 10, 104, 104, 104, 0,  };
	private static byte  _state_act_single_lengths [] = { 0, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _state_act_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _state_act_index_offsets [] = { 0, 0, 2, 4, 6, 8, 0 ,  };
	private static byte  _state_act_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _state_act_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 ,  };
	private static byte  _state_act_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _state_act_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _state_act_cond_targs [] = { 2, 0, 5, 0, 1, 0, 1, 0, 1, 0, 0 ,  };
	private static byte  _state_act_cond_actions [] = { 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _state_act_to_state_actions [] = { 0, 0, 1, 4, 6, 4, 0 ,  };
	private static byte  _state_act_from_state_actions [] = { 0, 0, 2, 5, 7, 5, 0 ,  };
	private static byte  _state_act_nfa_targs [] = { 0, 0 ,  };
	private static byte  _state_act_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _state_act_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _state_act_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  state_act_start  = 4;
	private static int  state_act_first_final  = 4;
	private static int  state_act_error  = 0;
	private static int  state_act_en_main  = 4;
	private static int  state_act_en_main_line_again  = 3;
	int cs;
	
	void init()
	{
		{
			cs = (int)state_act_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans = 0;
			int _cond = 0;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					case 1:
					switch ( _state_act_from_state_actions[cs]  ) {
						case 5 :
						{
							System.out.print( "b2\n" );
							
						}
						
						break;
						case 2 :
						{
							System.out.print( "c2\n" );
							
						}
						
						break;
						case 7 :
						{
							System.out.print( "a2\n" );
							
						}
						{
							System.out.print( "b2\n" );
							
						}
						
						break;
						
					}
					_keys = _state_act_key_offsets[cs] ;
					_trans = (int )_state_act_index_offsets[cs];
					_klen = (int)_state_act_single_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( data[p ]) < _state_act_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( ( data[p ]) > _state_act_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += (int )(_mid - _keys);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_keys += _klen;
						_trans += (int )_klen;
						
					}
					
					_klen = (int)_state_act_range_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( data[p ]) < _state_act_trans_keys[_mid ] )
							_upper = _mid - 2;
							
							else if ( ( data[p ]) > _state_act_trans_keys[_mid + 1 ] )
							_lower = _mid + 2;
							
							else
							{
								_trans += (int )((_mid - _keys)>>1);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_trans += (int )_klen;
						
					}
					
					
					case 2:
					_ckeys = _state_act_trans_offsets[_trans] ;
					_klen = (int)_state_act_trans_lengths[_trans];
					_cond = (int )_state_act_trans_offsets[_trans];
					_cpc = 0;
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < (int)_state_act_cond_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( _cpc > (int)_state_act_cond_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_cond += (int )(_mid - _ckeys);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						cs = 0;
						{
							_goto_targ = 4;
							if (true)
							continue _goto;
						}
						
					}
					
					case 3:
					cs = (int)_state_act_cond_targs[_cond];
					if ( _state_act_cond_actions[_cond] == 0  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					switch ( _state_act_cond_actions[_cond]  ) {
						case 3 :
						{
							{
								cs = 3;
								
							}
							
						}
						
						break;
						
					}
					
					case 4:
					switch ( _state_act_to_state_actions[cs]  ) {
						case 4 :
						{
							System.out.print( "b1\n" );
							
						}
						
						break;
						case 1 :
						{
							System.out.print( "c1\n" );
							
						}
						
						break;
						case 6 :
						{
							System.out.print( "a1\n" );
							
						}
						{
							System.out.print( "b1\n" );
							
						}
						
						break;
						
					}
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					p += 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 5:
					{
					
					}
					
					case 6:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= state_act_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"hi\nhi\n",
	};
	
	static final int inplen = 1;
	
	public static void main (String[] args)
	{
		stateact1_java machine = new stateact1_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
