#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_foo_actions 
	private :_foo_actions, :_foo_actions=
end
self._foo_actions = [
0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 0, 1, 2, 0 , 
]

class << self
	attr_accessor :_foo_trans_keys 
	private :_foo_trans_keys, :_foo_trans_keys=
end
self._foo_trans_keys = [
1, 0, 2, 2, 2, 2, 2, 2, 3, 4, 3, 4, 3, 4, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 0, 0 , 
]

class << self
	attr_accessor :_foo_char_class 
	private :_foo_char_class, :_foo_char_class=
end
self._foo_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 0 , 
]

class << self
	attr_accessor :_foo_index_offsets 
	private :_foo_index_offsets, :_foo_index_offsets=
end
self._foo_index_offsets = [
0, 0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 , 
]

class << self
	attr_accessor :_foo_indices 
	private :_foo_indices, :_foo_indices=
end
self._foo_indices = [
0, 2, 3, 4, 5, 6, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 , 
]

class << self
	attr_accessor :_foo_index_defaults 
	private :_foo_index_defaults, :_foo_index_defaults=
end
self._foo_index_defaults = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_foo_trans_cond_spaces 
	private :_foo_trans_cond_spaces, :_foo_trans_cond_spaces=
end
self._foo_trans_cond_spaces = [
-1, -1, -1, -1, -1, 1, -1, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_foo_trans_offsets 
	private :_foo_trans_offsets, :_foo_trans_offsets=
end
self._foo_trans_offsets = [
0, 1, 2, 3, 4, 5, 7, 8, 16, 20, 21, 22, 23, 24, 25, 26, 27, 0 , 
]

class << self
	attr_accessor :_foo_cond_targs 
	private :_foo_cond_targs, :_foo_cond_targs=
end
self._foo_cond_targs = [
2, 0, 3, 4, 5, 0, 7, 6, 0, 11, 7, 12, 9, 13, 10, 14, 0, 7, 9, 10, 8, 15, 8, 8, 8, 8, 8, 8, 0 , 
]

class << self
	attr_accessor :_foo_cond_actions 
	private :_foo_cond_actions, :_foo_cond_actions=
end
self._foo_cond_actions = [
7, 0, 9, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 13, 5, 21, 1, 15, 18, 24, 0 , 
]

class << self
	attr_accessor :_foo_nfa_targs 
	private :_foo_nfa_targs, :_foo_nfa_targs=
end
self._foo_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_foo_nfa_offsets 
	private :_foo_nfa_offsets, :_foo_nfa_offsets=
end
self._foo_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_foo_nfa_push_actions 
	private :_foo_nfa_push_actions, :_foo_nfa_push_actions=
end
self._foo_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_foo_nfa_pop_trans 
	private :_foo_nfa_pop_trans, :_foo_nfa_pop_trans=
end
self._foo_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :foo_start 
end
self.foo_start  = 1;

class << self
	attr_accessor :foo_first_final 
end
self.foo_first_final  = 15;

class << self
	attr_accessor :foo_error 
end
self.foo_error  = 0;

class << self
	attr_accessor :foo_en_main 
end
self.foo_en_main  = 1;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	i = 1
	j = 1
	k = 1
	begin
		cs = foo_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_cond = 0;
		_acts = 0;
		_nacts= 0
		;
		_keys = 0;
		_inds = 0;
		_cpc= 0
		;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = (cs<<1) ;
								_inds = _foo_index_offsets[cs] ;
								if ( ( data[p ].ord) <= 99 && ( data[p ].ord) >= 10  )
									begin
										_ic = _foo_char_class[( data[p ].ord) - 10];
										if ( _ic <= _foo_trans_keys[_keys+1 ]&& _ic >= _foo_trans_keys[_keys ] )
											_trans = _foo_indices[_inds + ( _ic - _foo_trans_keys[_keys ])  ];
											
											else
											_trans = _foo_index_defaults[cs];
											
										end
										
									end
									
									else
									begin
										_trans = _foo_index_defaults[cs];
										
									end
									
								end
								_cond = _foo_trans_offsets[_trans];
								_cpc = 0;
								case  _foo_trans_cond_spaces[_trans]  
								when -2 then
								begin
								end
								when 0  then
								begin
									if ( (i != 0) )
										_cpc += 1;
										
									end
									
								end
								when 1  then
								begin
									if ( (j != 0) )
										_cpc += 1;
										
									end
									
								end
								when 2  then
								begin
									if ( (k != 0) )
										_cpc += 1;
										
									end
									
								end
								when 3  then
								begin
									if ( (i != 0) )
										_cpc += 1;
										
									end
									if ( (j != 0) )
										_cpc += 2;
										
									end
									
								end
								when 4  then
								begin
									if ( (j != 0) )
										_cpc += 1;
										
									end
									if ( (k != 0) )
										_cpc += 2;
										
									end
									
								end
								when 5  then
								begin
									if ( (i != 0) )
										_cpc += 1;
										
									end
									if ( (j != 0) )
										_cpc += 2;
										
									end
									if ( (k != 0) )
										_cpc += 4;
										
									end
									
									
								end
							end
							_cond += _cpc;
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _foo_cond_targs[_cond];
							if ( _foo_cond_actions[_cond] != 0  )
								begin
									_acts = _foo_cond_actions[_cond] ;
									_nacts = _foo_actions[_acts ];
									_acts += 1;
									while ( _nacts > 0  )
										begin
											case  _foo_actions[_acts ] 
											when -2 then
											begin
											end
											when 0  then
											begin
												begin
													print( "  one\n" );
													
												end
												
											end
											when 1  then
											begin
												begin
													print( "  two\n" );
													
												end
												
											end
											when 2  then
											begin
												begin
													print( "  three\n" );
													
												end
												
											end
											when 3  then
											begin
												begin
													if ( ( data[p ].ord) == 48 )
														i = 0;
														
														else 
														i = 1;
														
													end
													
												end
												
											end
											when 4  then
											begin
												begin
													if ( ( data[p ].ord) == 48 )
														j = 0;
														
														else 
														j = 1;
														
													end
													
												end
												
											end
											when 5  then
											begin
												begin
													if ( ( data[p ].ord) == 48 )
														k = 0;
														
														else 
														k = 1;
														
													end
													
												end
												
											end
											when 6  then
											begin
												begin
													begin
														p+= 1;
														_cont = 0;
														
													end
													
												end
												
												
											end
										end
										_nacts -= 1;
										_acts += 1;
										
									end
									
								end
								
							end
							
						end
						if ( cs == 0  )
							_cont = 0;
							
						end
						if ( _cont == 1  )
							p += 1;
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end

end
if 	cs >= foo_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"000abc\n",
	"100abc\n",
	"010abc\n",
	"110abc\n",
	"001abc\n",
	"101abc\n",
	"011abc\n",
	"111abc\n",
	]
	
	inplen = 8
	
	inp.each { |str| run_machine(str) }
	
