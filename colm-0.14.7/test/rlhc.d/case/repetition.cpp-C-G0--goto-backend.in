host( "working/repetition.rl", 1 ) @{/*
	* @@LANG: c++
	*/
	
	/* Test repeptition operators. */
	
	#include <iostream>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	
	using namespace std;
	
	struct Rep
	{
		int cs;
		
		int init( );
		int execute( const char *data, int len );
		int finish( );
	};
	
	
	
}@
array s8 _Rep_actions( 0, 3 ) = { 0, 1, 2, 2, 0, 1, 3, 2, 0, 1, 0 };

array s8 _Rep_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Rep_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Rep_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Rep_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Rep_start = 1;
value int Rep_first_final = 27;
value int Rep_error = 0;

value int Rep_en_main = 1;

host( "working/repetition.rl", 43 ) @{
	
	int Rep::init( )
	{
	}@
	{
		cs = cast(int)Rep_start;
	}
	host( "working/repetition.rl", 47 ) @{
		return 1;
	}
	
	int Rep::execute( const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		
	}@
	{
		index s8 _acts;
		uint _nacts;
		
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		switch ( cs ) {
			case 1:
			switch( ( deref( data, p )) ) {
				case 45: {
					goto ctr0;
				}
				case 97: {
					goto ctr2;
				}
			}
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr3;
			}
			{
				goto ctr1;
			}
			case 3:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr3;
				}
				case 45: {
					goto ctr4;
				}
				case 98: {
					goto ctr5;
				}
			}
			{
				goto ctr1;
			}
			case 4:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr6;
			}
			{
				goto ctr1;
			}
			case 5:
			switch( ( deref( data, p )) ) {
				case 45: {
					goto ctr7;
				}
				case 99: {
					goto ctr8;
				}
			}
			{
				goto ctr1;
			}
			case 6:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr9;
			}
			{
				goto ctr1;
			}
			case 27:
			if ( ( deref( data, p )) == 100 ) {
				goto ctr30;
			}
			{
				goto ctr1;
			}
			case 7:
			if ( ( deref( data, p )) == 100 ) {
				goto ctr10;
			}
			{
				goto ctr1;
			}
			case 8:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr11;
				}
				case 100: {
					goto ctr12;
				}
			}
			{
				goto ctr1;
			}
			case 9:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr11;
				}
				case 100: {
					goto ctr13;
				}
			}
			{
				goto ctr1;
			}
			case 10:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr11;
				}
				case 100: {
					goto ctr14;
				}
			}
			{
				goto ctr1;
			}
			case 11:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr11;
			}
			{
				goto ctr1;
			}
			case 12:
			if ( ( deref( data, p )) == 99 ) {
				goto ctr15;
			}
			{
				goto ctr1;
			}
			case 13:
			if ( ( deref( data, p )) == 99 ) {
				goto ctr16;
			}
			{
				goto ctr1;
			}
			case 14:
			if ( ( deref( data, p )) == 99 ) {
				goto ctr17;
			}
			{
				goto ctr1;
			}
			case 15:
			if ( ( deref( data, p )) == 99 ) {
				goto ctr18;
			}
			{
				goto ctr1;
			}
			case 16:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr19;
				}
				case 99: {
					goto ctr18;
				}
			}
			{
				goto ctr1;
			}
			case 17:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr20;
				}
				case 98: {
					goto ctr21;
				}
			}
			{
				goto ctr1;
			}
			case 18:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr20;
				}
				case 98: {
					goto ctr22;
				}
			}
			{
				goto ctr1;
			}
			case 19:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr20;
				}
				case 98: {
					goto ctr23;
				}
			}
			{
				goto ctr1;
			}
			case 20:
			switch( ( deref( data, p )) ) {
				case 10: {
					goto ctr20;
				}
				case 98: {
					goto ctr24;
				}
			}
			{
				goto ctr1;
			}
			case 21:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr20;
			}
			{
				goto ctr1;
			}
			case 22:
			if ( ( deref( data, p )) == 97 ) {
				goto ctr25;
			}
			{
				goto ctr1;
			}
			case 23:
			if ( ( deref( data, p )) == 97 ) {
				goto ctr26;
			}
			{
				goto ctr1;
			}
			case 24:
			if ( ( deref( data, p )) == 97 ) {
				goto ctr27;
			}
			{
				goto ctr1;
			}
			case 25:
			if ( ( deref( data, p )) == 97 ) {
				goto ctr28;
			}
			{
				goto ctr1;
			}
			case 26:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr29;
			}
			{
				goto ctr1;
			}
		}
		
		ctr1: cs = 0; goto _again;
		ctr29: cs = 1; goto f2;
		ctr0: cs = 2; goto _again;
		ctr3: cs = 3; goto _again;
		ctr20: cs = 3; goto f2;
		ctr4: cs = 4; goto _again;
		ctr6: cs = 5; goto _again;
		ctr19: cs = 5; goto f2;
		ctr7: cs = 6; goto _again;
		ctr30: cs = 7; goto f0;
		ctr10: cs = 8; goto f1;
		ctr12: cs = 9; goto f1;
		ctr13: cs = 10; goto f1;
		ctr14: cs = 11; goto f1;
		ctr8: cs = 12; goto f0;
		ctr15: cs = 13; goto f1;
		ctr16: cs = 14; goto f1;
		ctr17: cs = 15; goto f1;
		ctr18: cs = 16; goto f1;
		ctr5: cs = 17; goto f0;
		ctr21: cs = 18; goto f1;
		ctr22: cs = 19; goto f1;
		ctr23: cs = 20; goto f1;
		ctr24: cs = 21; goto f1;
		ctr2: cs = 22; goto f0;
		ctr25: cs = 23; goto f1;
		ctr26: cs = 24; goto f1;
		ctr27: cs = 25; goto f1;
		ctr28: cs = 26; goto f1;
		ctr9: cs = 27; goto _again;
		ctr11: cs = 27; goto f2;
		
		f2: _acts = offset( _Rep_actions, 1 ); goto execFuncs;
		f0: _acts = offset( _Rep_actions, 3 ); goto execFuncs;
		f1: _acts = offset( _Rep_actions, 6 ); goto execFuncs;
		
		execFuncs:
		_nacts = cast(uint)deref( _Rep_actions, _acts );
		_acts += 1;
		while ( _nacts > 0 ) {
			switch ( deref( _Rep_actions, _acts ) ) {
				case 0{
					host( "working/repetition.rl", 26 ) ${ cout << "begin" << endl; }$
				}
				case 1{
					host( "working/repetition.rl", 27 ) ${ cout << "in" << endl; }$
				}
				case 2{
					host( "working/repetition.rl", 28 ) ${ cout << "end" << endl; }$
				}
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		goto _again;
		
		_again:
		if ( cs == 0 )
		goto _out;
		p += 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		_out: {}
	}
	host( "working/repetition.rl", 56 ) @{
		
		if ( cs == Rep_error )
		return -1;
		if ( cs >= Rep_first_final )
		return 1;
		return 0;
	}
	
	int Rep::finish( )
	{
		if ( cs == Rep_error )
		return -1;
		if ( cs >= Rep_first_final )
		return 1;
		return 0;
	}
	
	void test( const char *buf )
	{
		Rep rep;
		int len = strlen( buf );
		rep.init();
		rep.execute( buf, len );
		if ( rep.finish() > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test(
		"aaaaa\n"
		"-\n"
		"\n"
		"b\n"
		"bb\n"
		"bbb\n"
		"bbbb\n"
		"bbbbb\n"
		"-\n"
		"ccccc\n"
		"ccccccc\n"
		"cccccccccc\n"
		"-\n"
		"dd\n"
		"ddd\n"
		"dddd\n"
		"ddddd\n"
		);
		
		test(
		"a\n"
		"-\n"
		"b\n"
		"-\n"
		"c\n"
		"-\n"
		"d\n"
		);
		
		return 0;
	}
	
}@