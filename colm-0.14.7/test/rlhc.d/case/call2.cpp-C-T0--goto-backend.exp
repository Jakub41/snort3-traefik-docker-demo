#include <stdio.h>
#include <string.h>

int num = 0;

struct CallTest
{
	int cs, top, stack[32];
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	void init( );
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	void execute( const char *data, int len );
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	int finish( );
};



static const char  _CallTest_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 ,  };
static const char  _CallTest_key_offsets [] = { 0, 0, 3, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25, 25, 25, 25, 25, 0 ,  };
static const char  _CallTest_trans_keys [] = { 79, 48, 57, 32, 48, 57, 10, 65, 32, 101, 111, 114, 114, 111, 114, 49, 50, 107, 101, 118, 101, 110, 111, 100, 100, 0 ,  };
static const char  _CallTest_single_lengths [] = { 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0 ,  };
static const char  _CallTest_range_lengths [] = { 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _CallTest_index_offsets [] = { 0, 0, 3, 6, 8, 10, 12, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 36, 38, 40, 42, 43, 44, 45, 46, 0 ,  };
static const char  _CallTest_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _CallTest_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 0 ,  };
static const char  _CallTest_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _CallTest_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _CallTest_cond_targs [] = { 4, 2, 0, 3, 2, 0, 23, 0, 5, 0, 6, 0, 7, 12, 0, 8, 0, 9, 0, 10, 0, 11, 0, 3, 0, 3, 0, 14, 0, 15, 0, 16, 0, 17, 0, 24, 19, 0, 20, 0, 21, 0, 25, 0, 0, 0, 0, 0 ,  };
static const char  _CallTest_cond_actions [] = { 0, 7, 0, 1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0 ,  };
static const char  _CallTest_nfa_targs [] = { 0, 0 ,  };
static const char  _CallTest_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _CallTest_nfa_push_actions [] = { 0, 0 ,  };
static const char  _CallTest_nfa_pop_trans [] = { 0, 0 ,  };
static const int  CallTest_start  = 1;
static const int  CallTest_first_final  = 23;
static const int  CallTest_error  = 0;
static const int  CallTest_en_even  = 13;
static const int  CallTest_en_odd  = 18;
static const int  CallTest_en_fail  = 22;
static const int  CallTest_en_main  = 1;
void CallTest::init( )
{
	num = 0;
	
	{
		cs = ( int ) CallTest_start;
		top = 0;
	}
}

void CallTest::execute( const char *data, int len )
{
	const char *p = data;
	const char *pe = data+len;
	
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _CallTest_trans_keys + _CallTest_key_offsets[cs];
		_trans = ( unsigned int  ) _CallTest_index_offsets[cs];
		_klen = ( int ) _CallTest_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _CallTest_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _CallTest_cond_keys + _CallTest_trans_offsets[_trans];
		_klen = ( int ) _CallTest_trans_lengths[_trans];
		_cond = ( unsigned int  ) _CallTest_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _CallTest_cond_targs[_cond];
		if ( _CallTest_cond_actions[_cond]== 0  )
		goto _again;
		
		
		_acts = _CallTest_actions + _CallTest_cond_actions[_cond];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					if ( num & 1 )
					{
						stack[top] = cs;
						top += 1;
						cs = (18);
						goto _again;
					}
					
					else
					{
						stack[top] = cs;
						top += 1;
						cs = 13;
						goto _again;
					}
					
				}
				
				break;
				case 1 :
				{
					{
						p = p - 1;
						
					}
					{
						top-= 1;
						cs = stack[top];
						goto _again;
					}
					
				}
				
				break;
				case 2 :
				{
					{
						p = p - 1;
						
					}
					{
						top-= 1;
						cs = stack[top];
						goto _again;
					}
					
				}
				
				break;
				case 3 :
				{
					num = num * 10 + ((((*( p  ))
					)) - '0'); 
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}

int CallTest::finish( )
{
	if ( this->cs == CallTest_error )
	return -1;
	if ( this->cs >= CallTest_first_final )
	return 1;
	return 0;
}

#define BUFSIZE 1024

void test( const char *buf )
{   
	CallTest test;
	
	test.init();
	test.execute( buf, strlen(buf) );
	if ( test.finish() > 0 )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

int main()
{
	test( "78 even\n" );
	test( "89 odd\n" );
	test( "1 even\n" );
	test( "0 odd\n" );
	test( "OA ok\n" );
	test( "OA error1\n" );
	test( "OA error2\n" );
	return 0;
}

