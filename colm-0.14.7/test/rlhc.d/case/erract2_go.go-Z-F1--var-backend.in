host( "working/erract2_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	
	
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array byte _erract_trans_keys( 0, 5 ) = { u(1), u(0), u(3), u(3), u(2), u(2), u(4), u(4), u(4), u(4), u(5), u(5), u(0), u(0), u(1), u(0), u(0) };

array s8 _erract_char_class( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 };

array s8 _erract_index_offsets( 0, 6 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 0 };

array s8 _erract_indices( 0, 8 ) = { 1, 3, 4, 5, 6, 8, 0 };

array s8 _erract_index_defaults( 0, 9 ) = { 0, 0, 2, 2, 2, 2, 7, 9, 0 };

array s8 _erract_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _erract_cond_targs( 0, 7 ) = { 0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0 };

array s8 _erract_cond_actions( 0, 6 ) = { 2, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0 };

array s8 _erract_eof_actions( 0, 5 ) = { 0, 1, 3, 3, 3, 3, 5, 0, 0 };

array s8 _erract_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int erract_start = 1;
value int erract_first_final = 7;
value int erract_error = 0;

value int erract_en_main = 1;

host( "working/erract2_go.rl", 37 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)erract_start;
	}
	host( "working/erract2_go.rl", 40 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
		var eof int = pe
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index byte _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						switch ( _erract_eof_actions[cs] ) {
							case 1 {
								host( "working/erract2_go.rl", 15 ) ${fmt.Print( "err_start\n" );}$
								host( "working/erract2_go.rl", 20 ) ${fmt.Print( "eof_start\n" );}$
								host( "working/erract2_go.rl", 16 ) ${fmt.Print( "err_all\n" );}$
								host( "working/erract2_go.rl", 21 ) ${fmt.Print( "eof_all\n" );}$
							}
							case 3 {
								host( "working/erract2_go.rl", 16 ) ${fmt.Print( "err_all\n" );}$
								host( "working/erract2_go.rl", 17 ) ${fmt.Print( "err_middle\n" );}$
								host( "working/erract2_go.rl", 21 ) ${fmt.Print( "eof_all\n" );}$
								host( "working/erract2_go.rl", 22 ) ${fmt.Print( "eof_middle\n" );}$
							}
							case 5 {
								host( "working/erract2_go.rl", 16 ) ${fmt.Print( "err_all\n" );}$
								host( "working/erract2_go.rl", 18 ) ${fmt.Print( "err_out\n" );}$
								host( "working/erract2_go.rl", 21 ) ${fmt.Print( "eof_all\n" );}$
								host( "working/erract2_go.rl", 23 ) ${fmt.Print( "eof_out\n" );}$
							}
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _erract_trans_keys, (cs<<1) );
					_inds = offset( _erract_indices, _erract_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 111 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_erract_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _erract_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _erract_trans_keys, _keys ) )
						_trans = cast(uint)deref( _erract_indices, _inds + cast(int)( _ic - cast(int)deref( _erract_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_erract_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_erract_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_erract_cond_targs[_trans];
					
					switch ( _erract_cond_actions[_trans] ) {
						case 2 {
							host( "working/erract2_go.rl", 15 ) ${fmt.Print( "err_start\n" );}$
							host( "working/erract2_go.rl", 16 ) ${fmt.Print( "err_all\n" );}$
						}
						case 4 {
							host( "working/erract2_go.rl", 16 ) ${fmt.Print( "err_all\n" );}$
							host( "working/erract2_go.rl", 17 ) ${fmt.Print( "err_middle\n" );}$
						}
						case 6 {
							host( "working/erract2_go.rl", 16 ) ${fmt.Print( "err_all\n" );}$
							host( "working/erract2_go.rl", 18 ) ${fmt.Print( "err_out\n" );}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/erract2_go.rl", 47 ) @{
	}
	func finish() {
		if cs >= erract_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"",
		"h",
		"x",
		"he",
		"hx",
		"hel",
		"hex",
		"hell",
		"helx",
		"hello",
		"hellx",
		"hello\n",
		"hellox",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@