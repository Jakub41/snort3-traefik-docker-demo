using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
		int target;
		
		
		
		
		static readonly sbyte  []_next1_actions = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0,  };
		static readonly char  []_next1_trans_keys = { '\u0001', '\u0000', '\u0000', '\u0003', '\u000a', '\u000a', '\u0006', '\u0006', '\u000a', '\u000a', '\u0008', '\u0008', '\u0005', '\u0005', '\u0004', '\u0004', '\u0007', '\u0007', '\u0006', '\u0006', '\u0005', '\u0005', '\u0009', '\u0009', '\u000b', '\u000b', '\u0007', '\u0007', '\u0001', '\u0000', '\u0001', '\u0000', '\u0001', '\u0000', '\u0001', '\u0000', '\u0000',  };
		static readonly sbyte  []_next1_char_class = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0,  };
		static readonly sbyte  []_next1_index_offsets = { 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 16, 16, 0,  };
		static readonly sbyte  []_next1_indices = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0,  };
		static readonly sbyte  []_next1_index_defaults = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,  };
		static readonly sbyte  []_next1_trans_cond_spaces = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  };
		static readonly sbyte  []_next1_cond_targs = { 14, 0, 14, 14, 3, 4, 5, 6, 7, 15, 9, 10, 16, 12, 13, 17, 0,  };
		static readonly sbyte  []_next1_cond_actions = { 0, 0, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0,  };
		static readonly sbyte  []_next1_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_next1_nfa_offsets = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_next1_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_next1_nfa_pop_trans = { 0, 0,  };
		static readonly int  next1_start  = 1;
		static readonly int  next1_first_final  = 14;
		static readonly int  next1_error  = 0;
		static readonly int  next1_en_unused  = 2;
		static readonly int  next1_en_one  = 8;
		static readonly int  next1_en_two  = 11;
		static readonly int  next1_en_main  = 1;
		int cs;
		
		void init()
		{
		
			{
				cs = (int)next1_start;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				int _trans = 0;
				int _acts;
				uint _nacts;
				int _keys;
				int _inds;
				if ( p == pe  )
				goto _test_eof;
				
				if ( cs == 0 )
				goto _out;
				
				_resume :
				_keys = (cs<<1) ;
				_inds = _next1_index_offsets[cs] ;
				if ( ( data[p ]) <= 119&& ( data[p ]) >= 10 )
				{
					int _ic = (int)_next1_char_class[(int)( data[p ]) - 10];
					if ( _ic <= (int)_next1_trans_keys[_keys+1]&& _ic >= (int)_next1_trans_keys[_keys ] )
					_trans = (int)_next1_indices[_inds + (int)( _ic - (int)_next1_trans_keys[_keys ])  ];
					
					else
					_trans = (int)_next1_index_defaults[cs];
					
				}
				
				else
				{
					_trans = (int)_next1_index_defaults[cs];
				}
				
				
				goto _match_cond;
				
				_match_cond :
				cs = (int)_next1_cond_targs[_trans];
				if ( _next1_cond_actions[_trans] == 0 )
				goto _again;
				
				
				_acts = _next1_cond_actions[_trans] ;
				_nacts = (uint )_next1_actions[_acts ];
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( _next1_actions[_acts ] ) {
						case 0:
						{Console.Write( "one\n" );target = 1;
							{cs = (target);
							}}
						
						break;
						case 1:
						{Console.Write( "two\n" );target = 1;
							{cs = (target);
							}}
						
						break;
						case 2:
						{target = 8;
							{cs = (target);
							}}
						
						break;
						case 3:
						{target = 11;
							{cs = (target);
							}}
						
						break;
						
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
				
				
				_again :
				if ( cs == 0 )
				goto _out;
				
				p += 1;
				if ( p != pe  )
				goto _resume;
				
				
				_test_eof :
				{}
				
				_out :
				{}
				
			}
		}
		
		void finish( )
		{
			if ( cs >= next1_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"1one2two1one\n",
		};
		
		
		static readonly int inplen = 1;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
