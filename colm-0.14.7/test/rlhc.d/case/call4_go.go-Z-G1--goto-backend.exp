package main
import "fmt"

var target  int ;
var top  int ;
var stack [32] int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _call4_nfa_targs [] int8  = [] int8  { 0, 0  }
var _call4_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _call4_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _call4_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var call4_start  int  = 13
var call4_first_final  int  = 13
var call4_error  int  = 0
var call4_en_unused  int  = 1
var call4_en_one  int  = 7
var call4_en_two  int  = 10
var call4_en_main  int  = 13
func prepare() {

	{
		cs = int(call4_start);
		top = 0;
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume:
		switch cs  {
			case 13:
			switch ( data[p ])  {
				case 10:
				{
					goto ctr13;
				}
				case 49:
				{
					goto ctr14;
				}
				case 50:
				{
					goto ctr15;
				}
				
			}
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 1:
			if ( data[p ]) == 117  {
				{
					goto ctr0;
				}
				
			}
			{
				goto ctr1;
			}
			case 2:
			if ( data[p ]) == 110  {
				{
					goto ctr2;
				}
				
			}
			{
				goto ctr1;
			}
			case 3:
			if ( data[p ]) == 117  {
				{
					goto ctr3;
				}
				
			}
			{
				goto ctr1;
			}
			case 4:
			if ( data[p ]) == 115  {
				{
					goto ctr4;
				}
				
			}
			{
				goto ctr1;
			}
			case 5:
			if ( data[p ]) == 101  {
				{
					goto ctr5;
				}
				
			}
			{
				goto ctr1;
			}
			case 6:
			if ( data[p ]) == 100  {
				{
					goto ctr6;
				}
				
			}
			{
				goto ctr1;
			}
			case 14:
			{
				goto ctr1;
			}
			case 7:
			if ( data[p ]) == 111  {
				{
					goto ctr7;
				}
				
			}
			{
				goto ctr1;
			}
			case 8:
			if ( data[p ]) == 110  {
				{
					goto ctr8;
				}
				
			}
			{
				goto ctr1;
			}
			case 9:
			if ( data[p ]) == 101  {
				{
					goto ctr9;
				}
				
			}
			{
				goto ctr1;
			}
			case 15:
			{
				goto ctr1;
			}
			case 10:
			if ( data[p ]) == 116  {
				{
					goto ctr10;
				}
				
			}
			{
				goto ctr1;
			}
			case 11:
			if ( data[p ]) == 119  {
				{
					goto ctr11;
				}
				
			}
			{
				goto ctr1;
			}
			case 12:
			if ( data[p ]) == 111  {
				{
					goto ctr12;
				}
				
			}
			{
				goto ctr1;
			}
			case 16:
			{
				goto ctr1;
			}
			
		}
		ctr1: cs = 0;
		goto _again;
		ctr0: cs = 2;
		goto _again;
		ctr2: cs = 3;
		goto _again;
		ctr3: cs = 4;
		goto _again;
		ctr4: cs = 5;
		goto _again;
		ctr5: cs = 6;
		goto _again;
		ctr7: cs = 8;
		goto _again;
		ctr8: cs = 9;
		goto _again;
		ctr10: cs = 11;
		goto _again;
		ctr11: cs = 12;
		goto _again;
		ctr13: cs = 13;
		goto _again;
		ctr14: cs = 13;
		goto f2;
		ctr15: cs = 13;
		goto f3;
		ctr6: cs = 14;
		goto _again;
		ctr9: cs = 15;
		goto f0;
		ctr12: cs = 16;
		goto f1;
		
		f0:
		{fmt.Print( "one\n" );{top-= 1;
				cs = stack[top];
				goto _again;}
			
		}
		
		goto _again;
		f1:
		{fmt.Print( "two\n" );{top-= 1;
				cs = stack[top];
				goto _again;}
			
		}
		
		goto _again;
		f2:
		{target = 7;
			{stack[top] = cs;
				top += 1;
				cs = (target);
				goto _again;} 
		}
		
		goto _again;
		f3:
		{target = 10;
			{stack[top] = cs;
				top += 1;
				cs = (target);
				goto _again;} 
		}
		
		goto _again;
		
		_again:
		if cs == 0  {
			goto _out;
			
		}
		p+= 1;
		if p != pe  {
			goto _resume;
			
		}
		_test_eof: {}
		_out: {}
	}
}
func finish() {
	if cs >= call4_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"1one2two1one\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
