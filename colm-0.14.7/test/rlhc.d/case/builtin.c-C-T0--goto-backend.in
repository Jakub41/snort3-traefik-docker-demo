host( "working/builtin.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	
	void alph(const char *type)
	{
		printf("%s\n", type);
	}
	
	struct builtin
	{
		int cs;
	};
	
	
	
}@
array s8 _builtin_actions( 0, 13 ) = { 0, 1, 0, 2, 0, 2, 4, 0, 1, 2, 8, 5, 0, 1, 2, 8, 12, 5, 0, 1, 2, 10, 12, 6, 0, 1, 2, 9, 10, 11, 8, 0, 1, 2, 3, 5, 6, 9, 10, 8, 0, 1, 2, 3, 5, 7, 9, 10, 8, 0, 1, 2, 4, 5, 9, 10, 13, 9, 0, 1, 2, 3, 5, 6, 9, 10, 13, 9, 0, 1, 2, 3, 5, 7, 9, 10, 13, 0 };

array s8 _builtin_key_offsets( 0, 0 ) = { 0, 0 };

array unsigned int _builtin_trans_keys( 0, 255 ) = { u(32), u(127), u(0), u(8), u(9), u(13), u(14), u(31), u(33), u(47), u(48), u(57), u(58), u(64), u(65), u(70), u(71), u(90), u(91), u(96), u(97), u(102), u(103), u(122), u(123), u(126), u(128), u(255), u(0) };

array s8 _builtin_single_lengths( 0, 2 ) = { 2, 0 };

array s8 _builtin_range_lengths( 0, 13 ) = { 13, 0 };

array s8 _builtin_index_offsets( 0, 0 ) = { 0, 0 };

array s8 _builtin_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _builtin_trans_offsets( 0, 15 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 };

array s8 _builtin_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _builtin_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _builtin_cond_targs( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _builtin_cond_actions( 0, 67 ) = { 17, 6, 6, 11, 6, 23, 48, 23, 67, 39, 23, 57, 30, 23, 3, 1, 0 };

array s8 _builtin_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _builtin_nfa_offsets( 0, 0 ) = { 0, 0 };

array s8 _builtin_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _builtin_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int builtin_start = 0;
value int builtin_first_final = 0;
value int builtin_error = -1;

value int builtin_en_main = 0;

host( "working/builtin.rl", 41 ) @{
	
	void builtin_init( struct builtin *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)builtin_start;
	}
	host( "working/builtin.rl", 45 ) @{
	}
	
	void builtin_execute( struct builtin *fsm, const unsigned int *data, int len )
	{
		const unsigned int *p = data;
		const unsigned int *pe = data+len;
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index unsigned int _keys;
		index s8 _ckeys;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			label _resume {
				_keys = offset( _builtin_trans_keys, _builtin_key_offsets[host( "-", 1 ) ={ fsm->cs}=] );
				_trans = cast(uint)_builtin_index_offsets[host( "-", 1 ) ={ fsm->cs}=];
				
				_klen = cast(int)_builtin_single_lengths[host( "-", 1 ) ={ fsm->cs}=];
				if ( _klen > 0 ) {
					index unsigned int _lower;
					index unsigned int _mid;
					index unsigned int _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _builtin_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _builtin_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_builtin_range_lengths[host( "-", 1 ) ={ fsm->cs}=];
				if ( _klen > 0 ) {
					index unsigned int _lower;
					index unsigned int _mid;
					index unsigned int _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _builtin_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _builtin_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _builtin_cond_keys, _builtin_trans_offsets[_trans] );
				_klen = cast(int)_builtin_trans_lengths[_trans];
				_cond = cast(uint)_builtin_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _builtin_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _builtin_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					host( "-", 1 ) ={ fsm->cs}= = -1;
					goto _again;
				}
			}
			label _match_cond {
				host( "-", 1 ) ={ fsm->cs}= = cast(int)_builtin_cond_targs[_cond];
				
				if ( _builtin_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = offset( _builtin_actions, _builtin_cond_actions[_cond] );
				_nacts = cast(uint)deref( _builtin_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( deref( _builtin_actions, _acts ) )
					{
						case 0 {
							host( "working/builtin.rl", 23 ) ${alph("any");}$
						}
						case 1 {
							host( "working/builtin.rl", 24 ) ${alph("ascii");}$
						}
						case 2 {
							host( "working/builtin.rl", 25 ) ${alph("extend");}$
						}
						case 3 {
							host( "working/builtin.rl", 26 ) ${alph("alpha");}$
						}
						case 4 {
							host( "working/builtin.rl", 27 ) ${alph("digit");}$
						}
						case 5 {
							host( "working/builtin.rl", 28 ) ${alph("alnum");}$
						}
						case 6 {
							host( "working/builtin.rl", 29 ) ${alph("lower");}$
						}
						case 7 {
							host( "working/builtin.rl", 30 ) ${alph("upper");}$
						}
						case 8 {
							host( "working/builtin.rl", 31 ) ${alph("cntrl");}$
						}
						case 9 {
							host( "working/builtin.rl", 32 ) ${alph("graph");}$
						}
						case 10 {
							host( "working/builtin.rl", 33 ) ${alph("print");}$
						}
						case 11 {
							host( "working/builtin.rl", 34 ) ${alph("punct");}$
						}
						case 12 {
							host( "working/builtin.rl", 35 ) ${alph("space");}$
						}
						case 13 {
							host( "working/builtin.rl", 36 ) ${alph("xdigit");}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
		}
	}
	host( "working/builtin.rl", 52 ) @{
	}
	
	int builtin_finish( struct builtin *fsm )
	{
		if ( fsm->cs == builtin_error )
		return -1;
		else if ( fsm->cs >= builtin_first_final )
		return 1;
		return 0;
	}
	
	#include <stdio.h>
	#define BUFSIZE 2048
	
	struct builtin fsm;
	char buf[BUFSIZE];
	unsigned int i;
	
	int test( const unsigned int *data, int len )
	{
		builtin_init( &fsm );
		builtin_execute( &fsm, data, len );
		if ( builtin_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
		return 0;
	}
	
	#define DLEN 258
	unsigned int data[DLEN] = {
		-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
		20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
		39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
		58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
		77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
		96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
		112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
		127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
		142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
		157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
		172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
		187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
		202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
		217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
		232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
		247, 248, 249, 250, 251, 252, 253, 254, 255, 256
	};
	
	int main()
	{
		test( data, DLEN );
		return 0;
	}
	
}@