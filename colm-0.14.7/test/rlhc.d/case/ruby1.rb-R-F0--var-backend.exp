#
# @LANG: ruby
#
# Test the host language scanning for ruby.
#

# %%{
a = 1
b = /%%\{\}/;



# %%{
e = 1
f = /%%\{\}/;

class << self
	attr_accessor :_ruby1_actions 
	private :_ruby1_actions, :_ruby1_actions=
end
self._ruby1_actions = [
0, 1, 0, 0 , 
]

class << self
	attr_accessor :_ruby1_trans_keys 
	private :_ruby1_trans_keys, :_ruby1_trans_keys=
end
self._ruby1_trans_keys = [
1, 0, 3, 3, 2, 3, 0, 2, 1, 0, 0 , 
]

class << self
	attr_accessor :_ruby1_char_class 
	private :_ruby1_char_class, :_ruby1_char_class=
end
self._ruby1_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0 , 
]

class << self
	attr_accessor :_ruby1_index_offsets 
	private :_ruby1_index_offsets, :_ruby1_index_offsets=
end
self._ruby1_index_offsets = [
0, 0, 1, 3, 6, 0 , 
]

class << self
	attr_accessor :_ruby1_indices 
	private :_ruby1_indices, :_ruby1_indices=
end
self._ruby1_indices = [
0, 2, 0, 3, 1, 2, 0 , 
]

class << self
	attr_accessor :_ruby1_index_defaults 
	private :_ruby1_index_defaults, :_ruby1_index_defaults=
end
self._ruby1_index_defaults = [
0, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_ruby1_trans_cond_spaces 
	private :_ruby1_trans_cond_spaces, :_ruby1_trans_cond_spaces=
end
self._ruby1_trans_cond_spaces = [
-1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_ruby1_cond_targs 
	private :_ruby1_cond_targs, :_ruby1_cond_targs=
end
self._ruby1_cond_targs = [
2, 0, 3, 4, 0 , 
]

class << self
	attr_accessor :_ruby1_cond_actions 
	private :_ruby1_cond_actions, :_ruby1_cond_actions=
end
self._ruby1_cond_actions = [
0, 0, 0, 1, 0 , 
]

class << self
	attr_accessor :_ruby1_nfa_targs 
	private :_ruby1_nfa_targs, :_ruby1_nfa_targs=
end
self._ruby1_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_ruby1_nfa_offsets 
	private :_ruby1_nfa_offsets, :_ruby1_nfa_offsets=
end
self._ruby1_nfa_offsets = [
0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_ruby1_nfa_push_actions 
	private :_ruby1_nfa_push_actions, :_ruby1_nfa_push_actions=
end
self._ruby1_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_ruby1_nfa_pop_trans 
	private :_ruby1_nfa_pop_trans, :_ruby1_nfa_pop_trans=
end
self._ruby1_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :ruby1_start 
end
self.ruby1_start  = 1;

class << self
	attr_accessor :ruby1_first_final 
end
self.ruby1_first_final  = 4;

class << self
	attr_accessor :ruby1_error 
end
self.ruby1_error  = 0;

class << self
	attr_accessor :ruby1_en_main 
end
self.ruby1_en_main  = 1;

# %%{
g = 1
h = /%%\{\}/;

def run_machine( data )
	p = 0;
	pe = data.length
	cs = 0
	
	begin
		cs = ruby1_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_acts = 0;
		_nacts= 0
		;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = (cs<<1) ;
								_inds = _ruby1_index_offsets[cs] ;
								if ( ( data[p ].ord) <= 122 && ( data[p ].ord) >= 10  )
									begin
										_ic = _ruby1_char_class[( data[p ].ord) - 10];
										if ( _ic <= _ruby1_trans_keys[_keys+1 ]&& _ic >= _ruby1_trans_keys[_keys ] )
											_trans = _ruby1_indices[_inds + ( _ic - _ruby1_trans_keys[_keys ])  ];
											
											else
											_trans = _ruby1_index_defaults[cs];
											
										end
										
									end
									
									else
									begin
										_trans = _ruby1_index_defaults[cs];
										
									end
									
								end
								
							end
							
						end
						if ( _cont == 1  )
							begin
								cs = _ruby1_cond_targs[_trans];
								if ( _ruby1_cond_actions[_trans] != 0  )
									begin
										_acts = _ruby1_cond_actions[_trans] ;
										_nacts = _ruby1_actions[_acts ];
										_acts += 1;
										while ( _nacts > 0  )
											begin
												case  _ruby1_actions[_acts ] 
												when -2 then
												begin
												end
												when 0  then
												begin
													begin
														# }
														c = 1
														d = /\}/
														puts "NL"
														
													end
													
													
												end
											end
											_nacts -= 1;
											_acts += 1;
											
										end
										
									end
									
								end
								
							end
							if ( cs == 0  )
								_cont = 0;
								
							end
							if ( _cont == 1  )
								p += 1;
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end
if  cs >= ruby1_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
		
		inp = [
		"abc1231\n",
		]
		
		inp.each { |str| run_machine(str) }
		
	