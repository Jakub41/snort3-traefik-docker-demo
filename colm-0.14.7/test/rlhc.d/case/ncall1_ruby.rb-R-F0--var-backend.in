host( "working/ncall1_ruby.rl", 1 ) @{#
	# @@LANG: ruby
	# @@GENERATED: true
	#
	
	
	
	
	
	
}@
array s8 _ncall1_actions( 0, 3 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 };

array char _ncall1_trans_keys( 0, 11 ) = { 1, 0, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 0, 3, 1, 0, 1, 0, 1, 0, 0 };

array s8 _ncall1_char_class( 0, 11 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0 };

array s8 _ncall1_index_offsets( 0, 16 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 16, 16, 0 };

array s8 _ncall1_indices( 0, 15 ) = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15, 0 };

array s8 _ncall1_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _ncall1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _ncall1_cond_targs( 0, 16 ) = { 2, 0, 3, 4, 5, 6, 14, 8, 9, 15, 11, 12, 16, 13, 13, 13, 0 };

array s8 _ncall1_cond_actions( 0, 7 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 5, 7, 0 };

array s8 _ncall1_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _ncall1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ncall1_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _ncall1_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int ncall1_start = 13;
value int ncall1_first_final = 13;
value int ncall1_error = 0;

value int ncall1_en_unused = 1;
value int ncall1_en_one = 7;
value int ncall1_en_two = 10;
value int ncall1_en_main = 13;

host( "working/ncall1_ruby.rl", 30 ) @{
	
	def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	top = 1
	stack = Array.new
	target = 1
}@
{
	cs = cast(int)ncall1_start;
	top = 0;
}
host( "working/ncall1_ruby.rl", 44 ) @{
}@
{
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	index s8 _acts;
	uint _nacts;
	index char _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _ncall1_trans_keys, (cs<<1) );
				_inds = offset( _ncall1_indices, _ncall1_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 119 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_ncall1_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _ncall1_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _ncall1_trans_keys, _keys ) )
					_trans = cast(uint)deref( _ncall1_indices, _inds + cast(int)( _ic - cast(int)deref( _ncall1_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_ncall1_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_ncall1_index_defaults[cs];
				}
				
			}
			if ( _cont == 1 ) {
				cs = cast(int)_ncall1_cond_targs[_trans];
				
				if ( _ncall1_cond_actions[_trans] != 0 ) {
					_acts = offset( _ncall1_actions, _ncall1_cond_actions[_trans] );
					_nacts = cast(uint)deref( _ncall1_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _ncall1_actions, _acts ) )
						{
							case 0 {
								host( "working/ncall1_ruby.rl", 12 ) ${print( "one\n" );
									${top-= 1;cs = stack[top]; }$}$
							}
							case 1 {
								host( "working/ncall1_ruby.rl", 15 ) ${print( "two\n" );
									${top-= 1;cs = stack[top]; }$}$
							}
							case 2 {
								host( "working/ncall1_ruby.rl", 19 ) ${target = 7;
									${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={target}=;}$}$
							}
							case 3 {
								host( "working/ncall1_ruby.rl", 21 ) ${target = 10;
									${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={target}=;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/ncall1_ruby.rl", 45 ) @{
	if cs >= ncall1_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
	end
	end
	
	inp = [
	"1one2two1one\n",
	]
	
	inplen = 1
	
	inp.each { |str| run_machine(str) }
	
}@