#include <stdio.h>

char *foo = "foo";

char b = 98;
char a = 97;
char r = 114;

#define SP 32
#define NL '\n'



static const int  tmp_start  = 12;
static const int  tmp_first_final  = 12;
static const int  tmp_error  = 0;
static const int  tmp_en_main  = 12;
static const char  _tmp_nfa_targs [] = { 0, 0 ,  };
static const char  _tmp_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _tmp_nfa_push_actions [] = { 0, 0 ,  };
static const char  _tmp_nfa_pop_trans [] = { 0, 0 ,  };
int cs;

void exec_str( char *p, int len )
{
	char *pe = p + len;
	
	{
		if ( p == pe  )
		goto _test_eof;
		
		switch ( cs  ) {
			case 12:
			goto st_case_12;
			case 0:
			goto st_case_0;
			case 1:
			goto st_case_1;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
			case 4:
			goto st_case_4;
			case 5:
			goto st_case_5;
			case 6:
			goto st_case_6;
			case 7:
			goto st_case_7;
			case 8:
			goto st_case_8;
			case 9:
			goto st_case_9;
			case 10:
			goto st_case_10;
			case 11:
			goto st_case_11;
			
		}
		goto st_out;
		st12:
		p+= 1;
		if ( p == pe  )
		goto _test_eof12;
		
		st_case_12:
		switch ( ((*( p  ))
		) ) {
			case 98:
			{
				goto st1;
			}
			case 102:
			{
				goto st10;
			}
			
		}
		{
			goto st0;
		}
		st_case_0:
		st0:
		cs = 0;
		goto _out;
		st1:
		p+= 1;
		if ( p == pe  )
		goto _test_eof1;
		
		st_case_1:
		if ( ((*( p  ))
		)== 97  )
		{
			goto st2;
		}
		
		{
			goto st0;
		}
		st2:
		p+= 1;
		if ( p == pe  )
		goto _test_eof2;
		
		st_case_2:
		if ( ((*( p  ))
		)== 114  )
		{
			goto ctr2;
		}
		
		{
			goto st0;
		}
		ctr2:
		{
			printf("bar\n");
		}
		
		
		goto st3;
		ctr12:
		{
			printf("foo\n"); 
		}
		
		
		goto st3;
		st3:
		p+= 1;
		if ( p == pe  )
		goto _test_eof3;
		
		st_case_3:
		if ( ((*( p  ))
		)== 32  )
		{
			goto st4;
		}
		
		{
			goto st0;
		}
		st4:
		p+= 1;
		if ( p == pe  )
		goto _test_eof4;
		
		st_case_4:
		switch ( ((*( p  ))
		) ) {
			case 98:
			{
				goto st5;
			}
			case 102:
			{
				goto st8;
			}
			
		}
		{
			goto st0;
		}
		st5:
		p+= 1;
		if ( p == pe  )
		goto _test_eof5;
		
		st_case_5:
		if ( ((*( p  ))
		)== 97  )
		{
			goto st6;
		}
		
		{
			goto st0;
		}
		st6:
		p+= 1;
		if ( p == pe  )
		goto _test_eof6;
		
		st_case_6:
		if ( ((*( p  ))
		)== 114  )
		{
			goto ctr7;
		}
		
		{
			goto st0;
		}
		ctr7:
		{
			printf("bar\n");
		}
		
		
		goto st7;
		ctr10:
		{
			printf("foo\n"); 
		}
		
		
		goto st7;
		st7:
		p+= 1;
		if ( p == pe  )
		goto _test_eof7;
		
		st_case_7:
		if ( ((*( p  ))
		)== 10  )
		{
			goto st12;
		}
		
		{
			goto st0;
		}
		st8:
		p+= 1;
		if ( p == pe  )
		goto _test_eof8;
		
		st_case_8:
		if ( ((*( p  ))
		)== 111  )
		{
			goto st9;
		}
		
		{
			goto st0;
		}
		st9:
		p+= 1;
		if ( p == pe  )
		goto _test_eof9;
		
		st_case_9:
		if ( ((*( p  ))
		)== 111  )
		{
			goto ctr10;
		}
		
		{
			goto st0;
		}
		st10:
		p+= 1;
		if ( p == pe  )
		goto _test_eof10;
		
		st_case_10:
		if ( ((*( p  ))
		)== 111  )
		{
			goto st11;
		}
		
		{
			goto st0;
		}
		st11:
		p+= 1;
		if ( p == pe  )
		goto _test_eof11;
		
		st_case_11:
		if ( ((*( p  ))
		)== 111  )
		{
			goto ctr12;
		}
		
		{
			goto st0;
		}
		st_out:
		_test_eof12: cs = 12;
		goto _test_eof; 
		_test_eof1: cs = 1;
		goto _test_eof; 
		_test_eof2: cs = 2;
		goto _test_eof; 
		_test_eof3: cs = 3;
		goto _test_eof; 
		_test_eof4: cs = 4;
		goto _test_eof; 
		_test_eof5: cs = 5;
		goto _test_eof; 
		_test_eof6: cs = 6;
		goto _test_eof; 
		_test_eof7: cs = 7;
		goto _test_eof; 
		_test_eof8: cs = 8;
		goto _test_eof; 
		_test_eof9: cs = 9;
		goto _test_eof; 
		_test_eof10: cs = 10;
		goto _test_eof; 
		_test_eof11: cs = 11;
		goto _test_eof; 
		
		_test_eof: {}
		_out: {}
	}
}

void exec_c( char c )
{
	exec_str( &c, 1 );
}

int main()
{

	{
		cs = ( int ) tmp_start;
	}
	exec_str( foo, 3 );
	exec_c( SP );
	exec_c( b );
	exec_c( a );
	exec_c( r );
	exec_c( NL );
	
	exec_c( b );
	exec_c( a );
	exec_c( r );
	exec_c( SP );
	exec_str( foo, 3 );
	exec_c( NL );
	
	if ( cs < tmp_first_final )
	printf("FAIL\n");
	else
	printf("ACCEPT\n");
	
	return 0;
}

