class erract2_java
{







	private static byte  _erract_actions [] = { 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0 ,  };
	private static char  _erract_trans_keys [] = { 1, 0, 3, 3, 2, 2, 4, 4, 4, 4, 5, 5, 0, 0, 1, 0, 0,  };
	private static byte  _erract_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 ,  };
	private static byte  _erract_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 6, 0 ,  };
	private static byte  _erract_indices [] = { 1, 3, 4, 5, 6, 8, 0 ,  };
	private static byte  _erract_index_defaults [] = { 0, 0, 2, 2, 2, 2, 7, 9, 0 ,  };
	private static byte  _erract_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _erract_cond_targs [] = { 0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0 ,  };
	private static byte  _erract_cond_actions [] = { 1, 0, 4, 0, 0, 0, 0, 7, 0, 0, 0 ,  };
	private static byte  _erract_eof_actions [] = { 0, 10, 15, 15, 15, 15, 20, 0, 0 ,  };
	private static byte  _erract_nfa_targs [] = { 0, 0 ,  };
	private static byte  _erract_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _erract_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _erract_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  erract_start  = 1;
	private static int  erract_first_final  = 7;
	private static int  erract_error  = 0;
	private static int  erract_en_main  = 1;
	int cs;
	
	void init()
	{
		{
			cs = (int)erract_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _trans = 0;
			int _acts;
			int _nacts;
			int _keys;
			int _inds;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					case 1:
					_keys = (cs<<1) ;
					_inds = _erract_index_offsets[cs] ;
					if ( ( data[p ]) <= 111 && ( data[p ]) >= 10  )
					{
						int _ic = (int)_erract_char_class[(int)( data[p ]) - 10];
						if ( _ic <= (int)_erract_trans_keys[_keys+1 ]&& _ic >= (int)_erract_trans_keys[_keys ] )
						_trans = (int)_erract_indices[_inds + (int)( _ic - (int)_erract_trans_keys[_keys ])  ];
						
						else
						_trans = (int)_erract_index_defaults[cs];
						
						
					}
					
					else
					{
						_trans = (int)_erract_index_defaults[cs];
						
					}
					
					{
						_goto_targ = 2;
						if (true)
						continue _goto;
					}
					
					case 2:
					cs = (int)_erract_cond_targs[_trans];
					if ( _erract_cond_actions[_trans] == 0  )
					{
						_goto_targ = 3;
						if (true)
						continue _goto;
					}
					
					_acts = _erract_cond_actions[_trans] ;
					_nacts = (int )_erract_actions[_acts ];
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( _erract_actions[_acts ] ) {
							case 0 :
							{
								System.out.print( "err_start\n" );
								
							}
							
							break;
							case 1 :
							{
								System.out.print( "err_all\n" );
								
							}
							
							break;
							case 2 :
							{
								System.out.print( "err_middle\n" );
								
							}
							
							break;
							case 3 :
							{
								System.out.print( "err_out\n" );
								
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
						
					}
					
					
					case 3:
					if ( cs == 0  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					p += 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 4:
					{
					
					}
					if ( p == eof  )
					{
						int __acts;
						int __nacts;
						__acts = _erract_eof_actions[cs] ;
						__nacts = (int )_erract_actions[__acts ];
						__acts += 1;
						while ( __nacts > 0  )
						{
							switch ( _erract_actions[__acts ] ) {
								case 0 :
								{
									System.out.print( "err_start\n" );
									
								}
								
								break;
								case 1 :
								{
									System.out.print( "err_all\n" );
									
								}
								
								break;
								case 2 :
								{
									System.out.print( "err_middle\n" );
									
								}
								
								break;
								case 3 :
								{
									System.out.print( "err_out\n" );
									
								}
								
								break;
								case 4 :
								{
									System.out.print( "eof_start\n" );
									
								}
								
								break;
								case 5 :
								{
									System.out.print( "eof_all\n" );
									
								}
								
								break;
								case 6 :
								{
									System.out.print( "eof_middle\n" );
									
								}
								
								break;
								case 7 :
								{
									System.out.print( "eof_out\n" );
									
								}
								
								break;
								
							}
							__nacts -= 1;
							__acts += 1;
							
						}
						
						
					}
					
					
					case 5:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= erract_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"",
		"h",
		"x",
		"he",
		"hx",
		"hel",
		"hex",
		"hell",
		"helx",
		"hello",
		"hellx",
		"hello\n",
		"hellox",
	};
	
	static final int inplen = 13;
	
	public static void main (String[] args)
	{
		erract2_java machine = new erract2_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
