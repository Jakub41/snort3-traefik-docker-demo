#include <stddef.h>
#include <stdint.h>
#include <stdlib.h> 
#include <stdbool.h>
#include <string.h>
#include <stdio.h>

const char s[4096];

struct nfa_stack
{
	void *data;
	unsigned long sz;
};

struct nfa_bp_rec
{
	long state;
	const char *p;
	long popTrans;
	long q_2;
};

static const char  _genrep_actions [] = { 0, 0, 1, 1, 1, 2, 1, 0, 2, 2, 3, 2, 2, 4, 2, 2, 5, 2, 2, 6, 0 ,  };
static const char  _genrep_nfa_targs [] = { 0, 1, 2, 3, 5, 2, 4, 1, 6, 3, 8, 6, 4, 0 ,  };
static const char  _genrep_nfa_offsets [] = { 0, 1, 0, 3, 0, 7, 0, 9, 0, 0, 0 ,  };
static const char  _genrep_nfa_push_actions [] = { 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0 ,  };
static const char  _genrep_nfa_pop_trans [] = { 0, 0, 4, 0, 7, 6, 5, 0, 4, 0, 7, 6, 5, 0 ,  };
static const int  genrep_start  = 1;
static const int  genrep_first_final  = 9;
static const int  genrep_error  = 0;
static const int  genrep_en_main  = 1;
int test( const char *p )
{
	int len = strlen( p ) + 1;
	const char *pe = p + len;
	const char *eof = pe;
	int cs;
	
	struct nfa_bp_rec *nfa_bp = (struct nfa_bp_rec*) s;
	long nfa_len = 0;
	long nfa_count = 0;
	
	long q_2 = 0;
	
	printf( "testing: %s\n", p );
	
	
	{
		cs = ( int ) genrep_start;
		nfa_len = 0;
	}
	
	{
		const char  *_acts;
		unsigned int _nacts;
		
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume:
		if ( _genrep_nfa_offsets[cs] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[cs]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[cs]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[cs]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[cs]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		switch ( cs  ) {
			case 1:
			{
				goto ctr0;
			}
			case 0:
			goto _out;
			case 2:
			if ( ((*( p  ))
			)== 97u )
			{
				goto ctr1;
			}
			
			{
				goto ctr0;
			}
			case 3:
			{
				goto ctr0;
			}
			case 5:
			{
				goto ctr0;
			}
			case 6:
			if ( ((*( p  ))
			)== 97u )
			{
				goto ctr2;
			}
			
			{
				goto ctr0;
			}
			case 7:
			{
				goto ctr0;
			}
			case 8:
			{
				int ck = 0;
				if ( (p+1 == eof ) )
				ck += 1;
				
				if ( 1 <= ck  )
				{		goto ctr3;
				}
				
				goto ctr4;
				
			}
			case 9:
			{
				goto ctr0;
			}
			case 4:
			{
				goto ctr0;
			}
			
		}
		ctr0: cs = 0;
		goto _again;
		ctr1: cs = 3;
		goto _again;
		ctr2: cs = 7;
		goto _again;
		ctr4: cs = 0;
		goto _again;
		ctr3: cs = 9;
		goto f7;
		
		f7: _acts = _genrep_actions + 6 ;
		goto execFuncs;
		
		execFuncs:
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0:
				{
					printf( "------ MATCH\n" ); 
				}
				
				break;
				
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		
		goto _again;
		
		_again:
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		_out: {}
		if ( nfa_len > 0  )
		{
			nfa_count += 1;
			nfa_len -= 1;
			p = nfa_bp[nfa_len].p;
			int _pop_test = 1;
			switch ( _genrep_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
				case 4 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({  q_2 = 0; 1; })
				);
				
				break;
				case 5 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ 1; })
				);
				
				break;
				case 6 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ ++q_2 < 3; })
				);
				
				break;
				case 7 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ ++q_2 >= 2; })
				);
				
				break;
				
			}
			if ( _pop_test  )
			{
				cs = nfa_bp[nfa_len].state;
				goto _resume;
			}
			
			goto _out;
		}
		
	}
	return 0;
}

int main()
{
	test( "a" );
	test( "aa" );
	test( "aaa" );
	test( "aaaa" );
	test( "aaaaa" );
	test( "aaaaaa" );
	test( "aaaaaaa" );
	test( "aaaaaaaa" );
	return 0;
}

