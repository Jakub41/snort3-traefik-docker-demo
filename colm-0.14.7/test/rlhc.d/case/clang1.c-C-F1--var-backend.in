host( "working/clang1.rl", 1 ) @{/*
	* @@LANG: c
	* A mini C-like language scanner.
	*/
	
	#include <stdio.h>
	#include <string.h>
	#define IDENT_BUFLEN 256
	
	
	
	#include <stdio.h>
	
}@
array char _clang_trans_keys( 0, 13 ) = { 1, 0, 0, 12, 0, 12, 0, 0, 0, 5, 0, 7, 0, 0, 8, 9, 8, 10, 0, 0, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0, 13, 0 };

array s8 _clang_char_class( 0, 13 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 2, 2, 2, 4, 2, 2, 5, 2, 2, 2, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 2, 2, 2, 2, 2, 2, 2, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 2, 12, 2, 2, 11, 2, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 2, 2, 2, 2, 0 };

array s16 _clang_index_offsets( 0, 160 ) = { 0, 0, 13, 26, 27, 33, 41, 42, 44, 47, 48, 62, 76, 90, 104, 118, 132, 146, 160, 0 };

array s8 _clang_indices( 0, 72 ) = { 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 6, 5, 8, 7, 7, 7, 7, 9, 8, 7, 7, 7, 7, 9, 7, 10, 12, 13, 13, 15, 15, 15, 1, 12, 10, 16, 17, 18, 16, 16, 19, 20, 21, 22, 22, 16, 22, 24, 23, 25, 26, 27, 25, 25, 28, 29, 30, 31, 31, 25, 31, 33, 32, 34, 35, 36, 34, 34, 37, 38, 39, 40, 40, 34, 40, 24, 23, 25, 26, 27, 7, 25, 11, 29, 30, 31, 31, 25, 31, 42, 41, 43, 44, 45, 43, 46, 47, 48, 48, 49, 49, 43, 50, 52, 51, 53, 54, 55, 53, 53, 56, 13, 13, 57, 57, 53, 57, 59, 58, 60, 61, 62, 60, 60, 63, 64, 64, 64, 64, 60, 64, 42, 41, 43, 44, 45, 43, 46, 47, 48, 48, 49, 49, 43, 49, 66, 65, 67, 68, 69, 67, 67, 70, 71, 71, 71, 72, 67, 72, 0 };

array s8 _clang_index_defaults( 0, 65 ) = { 0, 0, 4, 4, 7, 7, 11, 14, 14, 0, 10, 23, 32, 23, 41, 51, 58, 41, 65, 0 };

array s8 _clang_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _clang_cond_targs( 0, 18 ) = { 1, 1, 12, 9, 2, 2, 3, 4, 4, 5, 10, 6, 10, 15, 0, 18, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 13, 14, 17, 16, 10, 10, 11, 1, 2, 7, 13, 17, 16, 8, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 16, 10, 10, 11, 1, 2, 13, 18, 16, 0 };

array s8 _clang_cond_actions( 0, 29 ) = { 1, 2, 0, 0, 1, 2, 0, 0, 3, 0, 0, 0, 3, 1, 0, 4, 4, 5, 5, 4, 4, 4, 4, 6, 7, 8, 9, 9, 8, 8, 8, 8, 10, 11, 12, 13, 13, 12, 12, 12, 12, 14, 15, 16, 17, 17, 1, 16, 1, 16, 0, 18, 19, 20, 21, 21, 20, 20, 22, 23, 24, 25, 25, 24, 1, 26, 27, 28, 29, 29, 28, 1, 28, 0 };

array s8 _clang_eof_actions( 0, 26 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 10, 6, 14, 18, 22, 14, 26, 0 };

array s8 _clang_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _clang_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _clang_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _clang_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int clang_start = 10;
value int clang_first_final = 10;

value int clang_en_main = 10;

host( "working/clang1.rl", 133 ) @{
	
	
	char data[] = 
	"/*\n"
	" *  Copyright\n"
	" */\n"
	"\n"
	"/*  Aapl.\n"
	" */\n"
	"\n"
	"#define _AAPL_RESIZE_H\n"
	"\n"
	"#include <assert.h>\n"
	"\n"
	"#ifdef AAPL_NAMESPACE\n"
	"namespace Aapl {\n"
		"#endif\n"
		"#define LIN_DEFAULT_STEP 256\n"
		"#define EXPN_UP( existing, needed ) \\\n"
		"		need > eng ? (ned<<1) : eing\n"
		"	\n"
		"\n"
		"/*@@}*/\n"
	"#undef EXPN_UP\n"
	"#ifdef AAPL_NAMESPACE\n"
	"#endif /* _AAPL_RESIZE_H */\n";
	
	void test( char *buf )
	{
		int len = strlen( buf );
		char *p = buf, *pe = buf + len;
		char *eof = pe;
		char identBuf[IDENT_BUFLEN+1];
		int identLen;
		int curLine;
		int cs;
		
		identLen = 0;
		curLine = 1;
		
	}@
	{
		cs = cast(int)clang_start;
	}
	host( "working/clang1.rl", 174 ) @{
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index char _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						switch ( _clang_eof_actions[cs] ) {
							case 22 {
								host( "working/clang1.rl", 27 ) ${
									identBuf[identLen] = 0;
									printf("ident(%i): %s\n", curLine, identBuf);
								}$
							}
							case 10 {
								host( "working/clang1.rl", 31 ) ${
									identBuf[identLen] = 0;
									printf("literal(%i): %s\n", curLine, identBuf);
								}$
							}
							case 18 {
								host( "working/clang1.rl", 35 ) ${
									identBuf[identLen] = 0;
									printf("float(%i): %s\n", curLine, identBuf);
								}$
							}
							case 14 {
								host( "working/clang1.rl", 39 ) ${
									identBuf[identLen] = 0;
									printf("int(%i): %s\n", curLine, identBuf);
								}$
							}
							case 26 {
								host( "working/clang1.rl", 43 ) ${
									identBuf[identLen] = 0;
									printf("hex(%i): 0x%s\n", curLine, identBuf);
								}$
							}
							case 6 {
								host( "working/clang1.rl", 47 ) ${
									identBuf[identLen] = 0;
									printf("symbol(%i): %s\n", curLine, identBuf);
								}$
							}
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _clang_trans_keys, (cs<<1) );
					_inds = offset( _clang_indices, _clang_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 126 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_clang_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _clang_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _clang_trans_keys, _keys ) )
						_trans = cast(uint)deref( _clang_indices, _inds + cast(int)( _ic - cast(int)deref( _clang_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_clang_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_clang_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_clang_cond_targs[_trans];
					
					switch ( _clang_cond_actions[_trans] ) {
						case 1 {
							host( "working/clang1.rl", 14 ) ${
								if ( identLen < IDENT_BUFLEN ) {
									identBuf[identLen] = ={( deref( data, p ))}=;
									identLen += 1;
								}
							}$
						}
						case 5 {
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
						}
						case 22 {
							host( "working/clang1.rl", 27 ) ${
								identBuf[identLen] = 0;
								printf("ident(%i): %s\n", curLine, identBuf);
							}$
						}
						case 10 {
							host( "working/clang1.rl", 31 ) ${
								identBuf[identLen] = 0;
								printf("literal(%i): %s\n", curLine, identBuf);
							}$
						}
						case 18 {
							host( "working/clang1.rl", 35 ) ${
								identBuf[identLen] = 0;
								printf("float(%i): %s\n", curLine, identBuf);
							}$
						}
						case 14 {
							host( "working/clang1.rl", 39 ) ${
								identBuf[identLen] = 0;
								printf("int(%i): %s\n", curLine, identBuf);
							}$
						}
						case 26 {
							host( "working/clang1.rl", 43 ) ${
								identBuf[identLen] = 0;
								printf("hex(%i): 0x%s\n", curLine, identBuf);
							}$
						}
						case 6 {
							host( "working/clang1.rl", 47 ) ${
								identBuf[identLen] = 0;
								printf("symbol(%i): %s\n", curLine, identBuf);
							}$
						}
						case 3 {
							host( "working/clang1.rl", 121 ) ${ curLine += 1; }$
						}
						case 2 {
							host( "working/clang1.rl", 14 ) ${
								if ( identLen < IDENT_BUFLEN ) {
									identBuf[identLen] = ={( deref( data, p ))}=;
									identLen += 1;
								}
							}$
							host( "working/clang1.rl", 121 ) ${ curLine += 1; }$
						}
						case 4 {
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
							host( "working/clang1.rl", 14 ) ${
								if ( identLen < IDENT_BUFLEN ) {
									identBuf[identLen] = ={( deref( data, p ))}=;
									identLen += 1;
								}
							}$
						}
						case 25 {
							host( "working/clang1.rl", 27 ) ${
								identBuf[identLen] = 0;
								printf("ident(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
						}
						case 23 {
							host( "working/clang1.rl", 27 ) ${
								identBuf[identLen] = 0;
								printf("ident(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 121 ) ${ curLine += 1; }$
						}
						case 13 {
							host( "working/clang1.rl", 31 ) ${
								identBuf[identLen] = 0;
								printf("literal(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
						}
						case 11 {
							host( "working/clang1.rl", 31 ) ${
								identBuf[identLen] = 0;
								printf("literal(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 121 ) ${ curLine += 1; }$
						}
						case 21 {
							host( "working/clang1.rl", 35 ) ${
								identBuf[identLen] = 0;
								printf("float(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
						}
						case 19 {
							host( "working/clang1.rl", 35 ) ${
								identBuf[identLen] = 0;
								printf("float(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 121 ) ${ curLine += 1; }$
						}
						case 17 {
							host( "working/clang1.rl", 39 ) ${
								identBuf[identLen] = 0;
								printf("int(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
						}
						case 15 {
							host( "working/clang1.rl", 39 ) ${
								identBuf[identLen] = 0;
								printf("int(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 121 ) ${ curLine += 1; }$
						}
						case 29 {
							host( "working/clang1.rl", 43 ) ${
								identBuf[identLen] = 0;
								printf("hex(%i): 0x%s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
						}
						case 27 {
							host( "working/clang1.rl", 43 ) ${
								identBuf[identLen] = 0;
								printf("hex(%i): 0x%s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 121 ) ${ curLine += 1; }$
						}
						case 9 {
							host( "working/clang1.rl", 47 ) ${
								identBuf[identLen] = 0;
								printf("symbol(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
						}
						case 7 {
							host( "working/clang1.rl", 47 ) ${
								identBuf[identLen] = 0;
								printf("symbol(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 121 ) ${ curLine += 1; }$
						}
						case 24 {
							host( "working/clang1.rl", 27 ) ${
								identBuf[identLen] = 0;
								printf("ident(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
							host( "working/clang1.rl", 14 ) ${
								if ( identLen < IDENT_BUFLEN ) {
									identBuf[identLen] = ={( deref( data, p ))}=;
									identLen += 1;
								}
							}$
						}
						case 12 {
							host( "working/clang1.rl", 31 ) ${
								identBuf[identLen] = 0;
								printf("literal(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
							host( "working/clang1.rl", 14 ) ${
								if ( identLen < IDENT_BUFLEN ) {
									identBuf[identLen] = ={( deref( data, p ))}=;
									identLen += 1;
								}
							}$
						}
						case 20 {
							host( "working/clang1.rl", 35 ) ${
								identBuf[identLen] = 0;
								printf("float(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
							host( "working/clang1.rl", 14 ) ${
								if ( identLen < IDENT_BUFLEN ) {
									identBuf[identLen] = ={( deref( data, p ))}=;
									identLen += 1;
								}
							}$
						}
						case 16 {
							host( "working/clang1.rl", 39 ) ${
								identBuf[identLen] = 0;
								printf("int(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
							host( "working/clang1.rl", 14 ) ${
								if ( identLen < IDENT_BUFLEN ) {
									identBuf[identLen] = ={( deref( data, p ))}=;
									identLen += 1;
								}
							}$
						}
						case 28 {
							host( "working/clang1.rl", 43 ) ${
								identBuf[identLen] = 0;
								printf("hex(%i): 0x%s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
							host( "working/clang1.rl", 14 ) ${
								if ( identLen < IDENT_BUFLEN ) {
									identBuf[identLen] = ={( deref( data, p ))}=;
									identLen += 1;
								}
							}$
						}
						case 8 {
							host( "working/clang1.rl", 47 ) ${
								identBuf[identLen] = 0;
								printf("symbol(%i): %s\n", curLine, identBuf);
							}$
							host( "working/clang1.rl", 22 ) ${
								identLen = 0;
							}$
							host( "working/clang1.rl", 14 ) ${
								if ( identLen < IDENT_BUFLEN ) {
									identBuf[identLen] = ={( deref( data, p ))}=;
									identLen += 1;
								}
							}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/clang1.rl", 175 ) @{
		
		if ( cs >= clang_first_final )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test( 
		"999 0xaAFF99 99.99 /*\n"
		"*/ 'lksdj' //\n"
		"\"\n"
		"\n"
		"literal\n"
		"\n"
		"\n"
		"\"0x00aba foobardd.ddsf 0x0.9\n" );
		test( 
		"wordwithnum00asdf\n"
		"000wordfollowsnum,makes new symbol\n"
		"\n"
		"finishing early /* unfinished ...\n" );
		test( data );
		return 0;
	}
	
}@