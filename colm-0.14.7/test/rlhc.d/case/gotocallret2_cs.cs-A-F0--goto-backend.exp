using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
		char comm;
		int top;
		int [] stack = new int [32];
		int ts;
		int te;
		int act;
		int val;
		
		
		
		
		static readonly sbyte  []_GotoCallRet_actions = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 0,  };
		static readonly char  []_GotoCallRet_trans_keys = { '\u0001', '\u0000', '\u0006', '\u0006', '\u0009', '\u0009', '\u0007', '\u0007', '\u0008', '\u0008', '\u0001', '\u0000', '\u0000', '\u000a', '\u0002', '\u0009', '\u0005', '\u0009', '\u0001', '\u0000', '\u0002', '\u000b', '\u0005', '\u0009', '\u0002', '\u0002', '\u0002', '\u000a', '\u0002', '\u0002', '\u0005', '\u0009', '\u0000',  };
		static readonly sbyte  []_GotoCallRet_char_class = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 4, 1, 1, 1, 5, 5, 5, 5, 5, 6, 5, 5, 7, 5, 5, 8, 5, 5, 9, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 1, 11, 0,  };
		static readonly sbyte  []_GotoCallRet_index_offsets = { 0, 0, 1, 2, 3, 4, 4, 15, 23, 28, 28, 38, 43, 44, 53, 54, 0,  };
		static readonly sbyte  []_GotoCallRet_indices = { 1, 2, 3, 4, 6, 7, 8, 9, 7, 10, 10, 10, 10, 10, 11, 13, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 16, 7, 17, 17, 17, 17, 17, 18, 19, 17, 17, 17, 17, 17, 19, 22, 23, 24, 25, 25, 25, 25, 25, 26, 24, 25, 25, 25, 25, 25, 0,  };
		static readonly sbyte  []_GotoCallRet_index_defaults = { 0, 0, 0, 0, 0, 5, 7, 12, 12, 7, 7, 20, 21, 7, 27, 28, 0,  };
		static readonly sbyte  []_GotoCallRet_trans_cond_spaces = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  };
		static readonly sbyte  []_GotoCallRet_cond_targs = { 6, 2, 3, 4, 6, 9, 6, 0, 6, 6, 7, 6, 6, 1, 8, 10, 10, 11, 10, 12, 10, 10, 13, 13, 14, 15, 13, 13, 13, 0,  };
		static readonly sbyte  []_GotoCallRet_cond_actions = { 41, 0, 0, 0, 33, 1, 37, 0, 35, 31, 7, 29, 39, 0, 0, 13, 11, 0, 9, 0, 17, 15, 23, 21, 0, 0, 19, 25, 27, 0,  };
		static readonly sbyte  []_GotoCallRet_to_state_actions = { 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0,  };
		static readonly sbyte  []_GotoCallRet_from_state_actions = { 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0,  };
		static readonly sbyte  []_GotoCallRet_eof_trans = { 0, 1, 1, 1, 1, 0, 0, 13, 13, 0, 0, 21, 22, 0, 28, 29, 0,  };
		static readonly sbyte  []_GotoCallRet_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_GotoCallRet_nfa_offsets = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_GotoCallRet_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_GotoCallRet_nfa_pop_trans = { 0, 0,  };
		static readonly int  GotoCallRet_start  = 6;
		static readonly int  GotoCallRet_first_final  = 6;
		static readonly int  GotoCallRet_error  = 0;
		static readonly int  GotoCallRet_en_handle  = 5;
		static readonly int  GotoCallRet_en_one  = 10;
		static readonly int  GotoCallRet_en_two  = 13;
		static readonly int  GotoCallRet_en_main  = 6;
		int cs;
		
		void init()
		{
		
			{
				cs = (int)GotoCallRet_start;
				top = 0;
				ts = 0;
				te = 0;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				int _trans = 0;
				int _acts;
				uint _nacts;
				int _keys;
				int _inds;
				if ( p == pe  )
				goto _test_eof;
				
				if ( cs == 0 )
				goto _out;
				
				_resume :
				_acts = _GotoCallRet_from_state_actions[cs] ;
				_nacts = (uint )_GotoCallRet_actions[_acts ];
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( _GotoCallRet_actions[_acts ] ) {
						case 2:
						{{ts = p;
							}}
						
						break;
						
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
				_keys = (cs<<1) ;
				_inds = _GotoCallRet_index_offsets[cs] ;
				if ( ( data[p ]) <= 125&& ( data[p ]) >= 10 )
				{
					int _ic = (int)_GotoCallRet_char_class[(int)( data[p ]) - 10];
					if ( _ic <= (int)_GotoCallRet_trans_keys[_keys+1]&& _ic >= (int)_GotoCallRet_trans_keys[_keys ] )
					_trans = (int)_GotoCallRet_indices[_inds + (int)( _ic - (int)_GotoCallRet_trans_keys[_keys ])  ];
					
					else
					_trans = (int)_GotoCallRet_index_defaults[cs];
					
				}
				
				else
				{
					_trans = (int)_GotoCallRet_index_defaults[cs];
				}
				
				
				goto _match_cond;
				
				_match_cond :
				cs = (int)_GotoCallRet_cond_targs[_trans];
				if ( _GotoCallRet_cond_actions[_trans] == 0 )
				goto _again;
				
				
				_acts = _GotoCallRet_cond_actions[_trans] ;
				_nacts = (uint )_GotoCallRet_actions[_acts ];
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( _GotoCallRet_actions[_acts ] ) {
						case 0:
						{Console.Write( "handle " );{p = p - 1;
							}if ( val == 1 )
							{
								{cs = (10);
								}
							} 
							if ( val == 2 )
							{
								{cs = (13);
								}
							} 
							if ( val == 3 )
							{
								{cs = 6;
								}} 
						}
						
						break;
						case 3:
						{{te = p+1;
							}}
						
						break;
						case 4:
						{{te = p+1;
								{Console.Write( "{ " );{stack[top] = cs;
										top += 1;
										cs = (10);
										goto _again;}}
							}}
						
						break;
						case 5:
						{{te = p+1;
								{Console.Write( "[ " );{stack[top] = cs;
										top += 1;
										cs = (13);
										goto _again;}}
							}}
						
						break;
						case 6:
						{{te = p+1;
								{Console.Write( "space " );}
							}}
						
						break;
						case 7:
						{{te = p;
								p = p - 1;
								{Console.Write( "} " );{top -= 1;
										cs = stack[top];
										goto _again;}}
							}}
						
						break;
						case 8:
						{{te = p;
								p = p - 1;
								{Console.Write( "word " );val = 1;
									{cs = (5);
										goto _again;}}
							}}
						
						break;
						case 9:
						{{te = p+1;
								{Console.Write( "{ " );{stack[top] = cs;
										top += 1;
										cs = (10);
										goto _again;}}
							}}
						
						break;
						case 10:
						{{te = p+1;
								{Console.Write( "[ " );{stack[top] = cs;
										top += 1;
										cs = (13);
										goto _again;}}
							}}
						
						break;
						case 11:
						{{te = p+1;
								{Console.Write( "space " );}
							}}
						
						break;
						case 12:
						{{te = p;
								p = p - 1;
								{Console.Write( "] " );{top -= 1;
										cs = stack[top];
										goto _again;}}
							}}
						
						break;
						case 13:
						{{te = p;
								p = p - 1;
								{Console.Write( "word " );val = 2;
									{cs = (5);
										goto _again;}}
							}}
						
						break;
						case 14:
						{{te = p+1;
								{Console.Write( "{ " );{stack[top] = cs;
										top += 1;
										cs = 10;
										goto _again;}}
							}}
						
						break;
						case 15:
						{{te = p+1;
								{Console.Write( "[ " );{stack[top] = cs;
										top += 1;
										cs = 13;
										goto _again;}}
							}}
						
						break;
						case 16:
						{{te = p+1;
								{Console.Write( "this is the foil" );}
							}}
						
						break;
						case 17:
						{{te = p+1;
								{Console.Write( "space " );}
							}}
						
						break;
						case 18:
						{{te = p+1;
							}}
						
						break;
						case 19:
						{{te = p;
								p = p - 1;
								{Console.Write( "word " );val = 3;
									{cs = 5;
										goto _again;}}
							}}
						
						break;
						case 20:
						{{p = ((te))-1;
								{Console.Write( "word " );val = 3;
									{cs = 5;
										goto _again;}}
							}}
						
						break;
						
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
				
				
				_again :
				_acts = _GotoCallRet_to_state_actions[cs] ;
				_nacts = (uint )_GotoCallRet_actions[_acts ];
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( _GotoCallRet_actions[_acts ] ) {
						case 1:
						{{ts = 0;
							}}
						
						break;
						
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
				if ( cs == 0 )
				goto _out;
				
				p += 1;
				if ( p != pe  )
				goto _resume;
				
				
				_test_eof :
				{}
				if ( p == eof  )
				{
					if ( _GotoCallRet_eof_trans[cs] > 0 )
					{
						_trans = (int)_GotoCallRet_eof_trans[cs] - 1;
						goto _match_cond;
					}
					
				}
				
				
				
				_out :
				{}
				
			}
		}
		
		void finish( )
		{
			if ( cs >= GotoCallRet_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"{a{b[c d]d}c}\n",
			"[a{b[c d]d}c}\n",
			"[a[b]c]d{ef{g{h}i}j}l\n",
			"{{[]}}\n",
			"a b c\n",
			"{a b c}\n",
			"[a b c]\n",
			"{]\n",
			"{{}\n",
			"[[[[[[]]]]]]\n",
			"[[[[[[]]}]]]\n",
		};
		
		
		static readonly int inplen = 11;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
