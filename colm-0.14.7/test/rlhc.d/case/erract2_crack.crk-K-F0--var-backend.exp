import crack.io cout;
import crack.lang Buffer;








const array[int16 ] _erract_actions = [ 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0 ,  ];
const array[byte ] _erract_trans_keys = [ 1, 0, 3, 3, 2, 2, 4, 4, 4, 4, 5, 5, 0, 0, 1, 0, 0,  ];
const array[int16 ] _erract_char_class = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 ,  ];
const array[int16 ] _erract_index_offsets = [ 0, 0, 1, 2, 3, 4, 5, 6, 0 ,  ];
const array[int16 ] _erract_indices = [ 1, 3, 4, 5, 6, 8, 0 ,  ];
const array[int16 ] _erract_index_defaults = [ 0, 0, 2, 2, 2, 2, 7, 9, 0 ,  ];
const array[int16 ] _erract_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _erract_cond_targs = [ 0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0 ,  ];
const array[int16 ] _erract_cond_actions = [ 1, 0, 4, 0, 0, 0, 0, 7, 0, 0, 0 ,  ];
const array[int16 ] _erract_eof_actions = [ 0, 10, 15, 15, 15, 15, 20, 0, 0 ,  ];
const array[int16 ] _erract_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _erract_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _erract_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _erract_nfa_pop_trans = [ 0, 0 ,  ];
const int  erract_start  = 1;
const int  erract_first_final  = 7;
const int  erract_error  = 0;
const int  erract_en_main  = 1;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	int eof = pe;
	
	if ( 1 ) {
		cs = int ( erract_start );
		
	}
	if ( 1 ) {
		uint32 _trans = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _acts = 0;
		uint32 _nacts;
		int _keys = 0;
		int _inds = 0;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						int __acts = 0;
						uint32 __nacts;
						__acts = _erract_eof_actions[cs];
						__nacts = uint32  ( _erract_actions[__acts ] );
						__acts += 1;
						while ( __nacts > 0  )
						{
							if ( _erract_actions[__acts ] == 0  ) {
								if ( 1 ) {
									cout.format( "err_start\n" );
									
								}
								
							}
							else if ( _erract_actions[__acts ] == 1  ) {
								if ( 1 ) {
									cout.format( "err_all\n" );
									
								}
								
							}
							else if ( _erract_actions[__acts ] == 2  ) {
								if ( 1 ) {
									cout.format( "err_middle\n" );
									
								}
								
							}
							else if ( _erract_actions[__acts ] == 3  ) {
								if ( 1 ) {
									cout.format( "err_out\n" );
									
								}
								
							}
							else if ( _erract_actions[__acts ] == 4  ) {
								if ( 1 ) {
									cout.format( "eof_start\n" );
									
								}
								
							}
							else if ( _erract_actions[__acts ] == 5  ) {
								if ( 1 ) {
									cout.format( "eof_all\n" );
									
								}
								
							}
							else if ( _erract_actions[__acts ] == 6  ) {
								if ( 1 ) {
									cout.format( "eof_middle\n" );
									
								}
								
							}
							else if ( _erract_actions[__acts ] == 7  ) {
								if ( 1 ) {
									cout.format( "eof_out\n" );
									
								}
								
							}
							;
							__nacts -= 1;
							__acts += 1;
							
						}
						
						
					}
					
					
				}
				
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = (cs<<1);
					_inds = _erract_index_offsets[cs];
					if ( (data[p ])<= 111 && (data[p ])>= 10  )
					{
						int _ic = int ( _erract_char_class[int ( (data[p ]) )- 10] );
						if ( _ic <= int ( _erract_trans_keys[_keys+1 ] )&& _ic >= int ( _erract_trans_keys[_keys ] ) )
						_trans = uint32  ( _erract_indices[_inds + int ( (_ic - int ( _erract_trans_keys[_keys ] )) )] );
						
						else
						_trans = uint32  ( _erract_index_defaults[cs] );
						
						
					}
					
					else
					{
						_trans = uint32  ( _erract_index_defaults[cs] );
						
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = int ( _erract_cond_targs[_trans] );
					if ( _erract_cond_actions[_trans]!= 0  )
					{
						_acts = _erract_cond_actions[_trans];
						_nacts = uint32  ( _erract_actions[_acts ] );
						_acts += 1;
						while ( _nacts > 0  )
						{
							if ( _erract_actions[_acts ] == 0  ) {
								if ( 1 ) {
									cout.format( "err_start\n" );
									
								}
								
							}
							else if ( _erract_actions[_acts ] == 1  ) {
								if ( 1 ) {
									cout.format( "err_all\n" );
									
								}
								
							}
							else if ( _erract_actions[_acts ] == 2  ) {
								if ( 1 ) {
									cout.format( "err_middle\n" );
									
								}
								
							}
							else if ( _erract_actions[_acts ] == 3  ) {
								if ( 1 ) {
									cout.format( "err_out\n" );
									
								}
								
							}
							;
							_nacts -= 1;
							_acts += 1;
							
						}
						
						
					}
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= erract_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "" );
	m( "h" );
	m( "x" );
	m( "he" );
	m( "hx" );
	m( "hel" );
	m( "hex" );
	m( "hell" );
	m( "helx" );
	m( "hello" );
	m( "hellx" );
	m( "hello\n" );
	m( "hellox" );
}

main();
