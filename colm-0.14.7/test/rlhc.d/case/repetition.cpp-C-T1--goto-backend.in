host( "working/repetition.rl", 1 ) @{/*
	* @@LANG: c++
	*/
	
	/* Test repeptition operators. */
	
	#include <iostream>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	
	using namespace std;
	
	struct Rep
	{
		int cs;
		
		int init( );
		int execute( const char *data, int len );
		int finish( );
	};
	
	
	
}@
array s8 _Rep_key_offsets( 0, 38 ) = { 0, 0, 2, 3, 6, 7, 9, 10, 11, 13, 15, 17, 18, 19, 20, 21, 22, 24, 26, 28, 30, 32, 33, 34, 35, 36, 37, 38, 0 };

array char _Rep_trans_keys( 0, 100 ) = { 45, 97, 10, 10, 45, 98, 10, 45, 99, 10, 100, 10, 100, 10, 100, 10, 100, 10, 99, 99, 99, 99, 10, 99, 10, 98, 10, 98, 10, 98, 10, 98, 10, 97, 97, 97, 97, 10, 100, 0 };

array s8 _Rep_single_lengths( 0, 3 ) = { 0, 2, 1, 3, 1, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _Rep_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Rep_index_offsets( 0, 64 ) = { 0, 0, 3, 5, 9, 11, 14, 16, 18, 21, 24, 27, 29, 31, 33, 35, 37, 40, 43, 46, 49, 52, 54, 56, 58, 60, 62, 64, 0 };

array s8 _Rep_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _Rep_trans_offsets( 0, 65 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 0 };

array s8 _Rep_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _Rep_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Rep_cond_targs( 0, 27 ) = { 2, 22, 0, 3, 0, 3, 4, 17, 0, 5, 0, 6, 12, 0, 27, 0, 8, 0, 27, 9, 0, 27, 10, 0, 27, 11, 0, 27, 0, 13, 0, 14, 0, 15, 0, 16, 0, 5, 16, 0, 3, 18, 0, 3, 19, 0, 3, 20, 0, 3, 21, 0, 3, 0, 23, 0, 24, 0, 25, 0, 26, 0, 1, 0, 7, 0, 0 };

array s8 _Rep_cond_actions( 0, 3 ) = { 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 3, 0, 1, 0, 0 };

array s8 _Rep_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Rep_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Rep_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Rep_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Rep_start = 1;
value int Rep_first_final = 27;
value int Rep_error = 0;

value int Rep_en_main = 1;

host( "working/repetition.rl", 43 ) @{
	
	int Rep::init( )
	{
	}@
	{
		cs = cast(int)Rep_start;
	}
	host( "working/repetition.rl", 47 ) @{
		return 1;
	}
	
	int Rep::execute( const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans = 0;
		uint _cond = 0;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume { 
				_keys = offset( _Rep_trans_keys, _Rep_key_offsets[cs] );
				_trans = cast(uint)_Rep_index_offsets[cs];
				
				_klen = cast(int)_Rep_single_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _Rep_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _Rep_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_Rep_range_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _Rep_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _Rep_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _Rep_cond_keys, _Rep_trans_offsets[_trans] );
				_klen = cast(int)_Rep_trans_lengths[_trans];
				_cond = cast(uint)_Rep_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _Rep_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _Rep_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_Rep_cond_targs[_cond];
				
				if ( _Rep_cond_actions[_cond] == 0 )
				goto _again;
				
				switch ( _Rep_cond_actions[_cond] ) {
					case 3 {
						host( "working/repetition.rl", 28 ) ${ cout << "end" << endl; }$
					}
					case 1 {
						host( "working/repetition.rl", 26 ) ${ cout << "begin" << endl; }$
						host( "working/repetition.rl", 27 ) ${ cout << "in" << endl; }$
					}
					case 2 {
						host( "working/repetition.rl", 28 ) ${ cout << "end" << endl; }$
						host( "working/repetition.rl", 26 ) ${ cout << "begin" << endl; }$
						host( "working/repetition.rl", 27 ) ${ cout << "in" << endl; }$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/repetition.rl", 56 ) @{
		
		if ( cs == Rep_error )
		return -1;
		if ( cs >= Rep_first_final )
		return 1;
		return 0;
	}
	
	int Rep::finish( )
	{
		if ( cs == Rep_error )
		return -1;
		if ( cs >= Rep_first_final )
		return 1;
		return 0;
	}
	
	void test( const char *buf )
	{
		Rep rep;
		int len = strlen( buf );
		rep.init();
		rep.execute( buf, len );
		if ( rep.finish() > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test(
		"aaaaa\n"
		"-\n"
		"\n"
		"b\n"
		"bb\n"
		"bbb\n"
		"bbbb\n"
		"bbbbb\n"
		"-\n"
		"ccccc\n"
		"ccccccc\n"
		"cccccccccc\n"
		"-\n"
		"dd\n"
		"ddd\n"
		"dddd\n"
		"ddddd\n"
		);
		
		test(
		"a\n"
		"-\n"
		"b\n"
		"-\n"
		"c\n"
		"-\n"
		"d\n"
		);
		
		return 0;
	}
	
}@