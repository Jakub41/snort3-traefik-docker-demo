#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_scanner_key_offsets 
	private :_scanner_key_offsets, :_scanner_key_offsets=
end
self._scanner_key_offsets = [
0, 0, 4, 5, 6, 7, 8, 14, 21, 22, 23, 0 , 
]

class << self
	attr_accessor :_scanner_trans_keys 
	private :_scanner_trans_keys, :_scanner_trans_keys=
end
self._scanner_trans_keys = [
46, 100, 48, 57, 49, 120, 120, 120, 46, 49, 50, 100, 48, 57, 10, 97, 98, 99, 100, 48, 57, 98, 100, 46, 100, 48, 57, 0 , 
]

class << self
	attr_accessor :_scanner_single_lengths 
	private :_scanner_single_lengths, :_scanner_single_lengths=
end
self._scanner_single_lengths = [
0, 2, 1, 1, 1, 1, 4, 5, 1, 1, 2, 0 , 
]

class << self
	attr_accessor :_scanner_range_lengths 
	private :_scanner_range_lengths, :_scanner_range_lengths=
end
self._scanner_range_lengths = [
0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0 , 
]

class << self
	attr_accessor :_scanner_index_offsets 
	private :_scanner_index_offsets, :_scanner_index_offsets=
end
self._scanner_index_offsets = [
0, 0, 4, 6, 8, 10, 12, 18, 25, 27, 29, 0 , 
]

class << self
	attr_accessor :_scanner_trans_cond_spaces 
	private :_scanner_trans_cond_spaces, :_scanner_trans_cond_spaces=
end
self._scanner_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_scanner_trans_offsets 
	private :_scanner_trans_offsets, :_scanner_trans_offsets=
end
self._scanner_trans_offsets = [
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 , 
]

class << self
	attr_accessor :_scanner_trans_lengths 
	private :_scanner_trans_lengths, :_scanner_trans_lengths=
end
self._scanner_trans_lengths = [
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_scanner_cond_keys 
	private :_scanner_cond_keys, :_scanner_cond_keys=
end
self._scanner_cond_keys = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_scanner_cond_targs 
	private :_scanner_cond_targs, :_scanner_cond_targs=
end
self._scanner_cond_targs = [
7, 1, 1, 7, 9, 0, 4, 7, 5, 7, 7, 7, 7, 10, 10, 1, 1, 0, 7, 7, 8, 2, 6, 1, 0, 8, 7, 3, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 0 , 
]

class << self
	attr_accessor :_scanner_cond_actions 
	private :_scanner_cond_actions, :_scanner_cond_actions=
end
self._scanner_cond_actions = [
2, 0, 0, 1, 3, 0, 0, 4, 0, 4, 5, 4, 2, 6, 7, 0, 0, 0, 10, 11, 0, 0, 0, 0, 0, 0, 12, 0, 13, 2, 0, 0, 1, 1, 4, 4, 4, 12, 13, 1, 0 , 
]

class << self
	attr_accessor :_scanner_to_state_actions 
	private :_scanner_to_state_actions, :_scanner_to_state_actions=
end
self._scanner_to_state_actions = [
0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_scanner_from_state_actions 
	private :_scanner_from_state_actions, :_scanner_from_state_actions=
end
self._scanner_from_state_actions = [
0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_scanner_eof_trans_indexed 
	private :_scanner_eof_trans_indexed, :_scanner_eof_trans_indexed=
end
self._scanner_eof_trans_indexed = [
0, 8, 0, 10, 10, 10, 0, 0, 14, 15, 8, 0 , 
]

class << self
	attr_accessor :_scanner_eof_trans_direct 
	private :_scanner_eof_trans_direct, :_scanner_eof_trans_direct=
end
self._scanner_eof_trans_direct = [
0, 34, 0, 35, 36, 37, 0, 0, 38, 39, 40, 0 , 
]

class << self
	attr_accessor :_scanner_nfa_targs 
	private :_scanner_nfa_targs, :_scanner_nfa_targs=
end
self._scanner_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_scanner_nfa_offsets 
	private :_scanner_nfa_offsets, :_scanner_nfa_offsets=
end
self._scanner_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_scanner_nfa_push_actions 
	private :_scanner_nfa_push_actions, :_scanner_nfa_push_actions=
end
self._scanner_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_scanner_nfa_pop_trans 
	private :_scanner_nfa_pop_trans, :_scanner_nfa_pop_trans=
end
self._scanner_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :scanner_start 
end
self.scanner_start  = 7;

class << self
	attr_accessor :scanner_first_final 
end
self.scanner_first_final  = 7;

class << self
	attr_accessor :scanner_error 
end
self.scanner_error  = 0;

class << self
	attr_accessor :scanner_en_main 
end
self.scanner_en_main  = 7;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	ts = 1
	te = 1
	act = 1
	token = 1
	begin
		cs = scanner_start;
		ts = 0;
		te = 0;
		act = 0;
		
	end
	begin
		_klen= 0
		;
		_keys = 0;
		_ckeys = 0;
		_cpc= 0
		;
		_trans= 0
		;
		_cond = 0;
		_have = 0;
		_cont = 1;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( p == eof  )
							begin
								if ( _scanner_eof_trans_direct[cs] > 0  )
									begin
										_trans = _scanner_eof_trans_direct[cs] - 1;
										_cond = _scanner_trans_offsets[_trans];
										_have = 1;
										
									end
									
								end
								if ( _have == 0  )
									begin
									
									end
									
								end
								
							end
							
						end
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								case  _scanner_from_state_actions[cs]  
								when -2 then
								begin
								end
								when 9  then
								begin
									begin
										begin
											ts = p;
											
										end
										
									end
									
									
								end
							end
							_keys = _scanner_key_offsets[cs] ;
							_trans = _scanner_index_offsets[cs];
							_have = 0;
							_klen = _scanner_single_lengths[cs];
							if ( _klen > 0  )
								begin
									_lower = 0;
									_mid = 0;
									_upper = 0;
									_lower = _keys;
									_upper = _keys + _klen - 1;
									while ( _upper >= _lower && _have == 0  )
										begin
											_mid = _lower + ((_upper-_lower) >> 1);
											if ( ( data[p ].ord) < _scanner_trans_keys[_mid ] )
												_upper = _mid - 1;
												
												elsif ( ( data[p ].ord) > _scanner_trans_keys[_mid ] )
												_lower = _mid + 1;
												
												else
												begin
													_trans += (_mid - _keys);
													_have = 1;
													
												end
												
											end
											
										end
										
									end
									if ( _have == 0  )
										begin
											_keys += _klen;
											_trans += _klen;
											
										end
										
									end
									
								end
								
							end
							if ( _have == 0  )
								begin
									_klen = _scanner_range_lengths[cs];
									if ( _klen > 0  )
										begin
											_lower = 0;
											_mid = 0;
											_upper = 0;
											_lower = _keys;
											_upper = _keys + (_klen<<1) - 2;
											while ( _have == 0 && _lower <= _upper  )
												begin
													_mid = _lower + (((_upper-_lower) >> 1) & ~1);
													if ( ( data[p ].ord) < _scanner_trans_keys[_mid ] )
														_upper = _mid - 2;
														
														elsif ( ( data[p ].ord) > _scanner_trans_keys[_mid + 1 ] )
														_lower = _mid + 2;
														
														else
														begin
															_trans += ((_mid - _keys)>>1);
															_have = 1;
															
														end
														
													end
													
												end
												
											end
											if ( _have == 0  )
												_trans += _klen;
												
											end
											
										end
										
									end
									
								end
								
							end
							_ckeys = _scanner_trans_offsets[_trans] ;
							_klen = _scanner_trans_lengths[_trans];
							_cond = _scanner_trans_offsets[_trans];
							_have = 0;
							_cpc = 0;
							begin
								_lower = 0;
								_mid = 0;
								_upper = 0;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper  )
									begin
										_mid = _lower + ((_upper-_lower) >> 1);
										if ( _cpc < _scanner_cond_keys[_mid ] )
											_upper = _mid - 1;
											
											elsif ( _cpc > _scanner_cond_keys[_mid ] )
											_lower = _mid + 1;
											
											else
											begin
												_cond += (_mid - _ckeys);
												_have = 1;
												
											end
											
										end
										
									end
									
								end
								if ( _have == 0  )
									begin
										cs = 0;
										_cont = 0;
										
									end
									
								end
								
							end
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _scanner_cond_targs[_cond];
							case  _scanner_cond_actions[_cond]  
							when -2 then
							begin
							end
							when 3  then
							begin
								begin
									begin
										te = p+1;
										
									end
									
								end
								
							end
							when 11  then
							begin
								begin
									begin
										te = p+1;
										begin
											print( "on last     " );
											if ( p + 1 == te )
												print( "yes" );
												
											end
											print( "\n" );
											
										end
										
									end
									
								end
								
							end
							when 5  then
							begin
								begin
									begin
										te = p+1;
										begin
											print( "on lag      " );
											if ( p + 1 == te )
												print( "yes" );
												
											end
											print( "\n" );
											
										end
										
									end
									
								end
								
							end
							when 2  then
							begin
								begin
									begin
										te = p+1;
										
									end
									
								end
								
							end
							when 10  then
							begin
								begin
									begin
										te = p+1;
										
									end
									
								end
								
							end
							when 12  then
							begin
								begin
									begin
										te = p;
										p = p - 1;
										begin
											print( "on next     " );
											if ( p + 1 == te )
												print( "yes" );
												
											end
											print( "\n" );
											
										end
										
									end
									
								end
								
							end
							when 13  then
							begin
								begin
									begin
										te = p;
										p = p - 1;
										begin
											print( "on lag      " );
											if ( p + 1 == te )
												print( "yes" );
												
											end
											print( "\n" );
											
										end
										
									end
									
								end
								
							end
							when 4  then
							begin
								begin
									begin
										p = ((te))-1;
										begin
											print( "on lag      " );
											if ( p + 1 == te )
												print( "yes" );
												
											end
											print( "\n" );
											
										end
										
									end
									
								end
								
							end
							when 1  then
							begin
								begin
									begin
										case  act  
										when -2 then
										begin
										end
										when 0  then
										begin
											begin
												begin
													cs = 0;
													
												end
												
											end
											
										end
										when 4  then
										begin
											p = ((te))-1;
											begin
												print( "lm switch1  " );
												if ( p + 1 == te )
													print( "yes" );
													
												end
												print( "\n" );
												
											end
											
										end
										when 5  then
										begin
											p = ((te))-1;
											begin
												print( "lm switch2  " );
												if ( p + 1 == te )
													print( "yes" );
													
												end
												print( "\n" );
												
											end
											
											
										end
									end
									
								end
								
								
							end
							
						end
						when 6  then
						begin
							begin
								begin
									te = p+1;
									
								end
								
							end
							begin
								begin
									act = 4;
									
								end
								
							end
							
						end
						when 7  then
						begin
							begin
								begin
									te = p+1;
									
								end
								
							end
							begin
								begin
									act = 5;
									
								end
								
							end
							
							
						end
					end
					case  _scanner_to_state_actions[cs]  
					when -2 then
					begin
					end
					when 8  then
					begin
						begin
							begin
								ts = 0;
								
							end
							
						end
						begin
							begin
								act = 0;
								
							end
							
						end
						
						
					end
				end
				if ( cs == 0  )
					_cont = 0;
					
				end
				if ( _cont == 1  )
					p += 1;
					
				end
				
			end
			
		end
		
	end
	
end

end

end

end
if cs >= scanner_first_final
puts "ACCEPT"
else
puts "FAIL"
end
end

inp = [
"abbc1d1d2\n",
]

inplen = 1

inp.each { |str| run_machine(str) }

