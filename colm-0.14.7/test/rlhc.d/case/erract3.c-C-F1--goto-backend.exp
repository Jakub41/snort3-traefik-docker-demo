#include <stdio.h>
#define IDENT_BUFLEN 256

struct erract
{
	int cs;
};



static const char  _erract_trans_keys [] = { 0, 3, 0, 0, 0, 2, 0, 4, 0, 4, 0, 5, 0, 0, 0 ,  };
static const char  _erract_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 ,  };
static const char  _erract_index_offsets [] = { 0, 4, 5, 8, 13, 18, 24, 0 ,  };
static const char  _erract_indices [] = { 1, 0, 0, 2, 4, 1, 0, 5, 1, 0, 0, 0, 6, 1, 0, 0, 0, 7, 1, 0, 0, 0, 0, 8, 9, 0 ,  };
static const char  _erract_index_defaults [] = { 0, 3, 0, 0, 0, 0, 0, 0 ,  };
static const char  _erract_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _erract_cond_targs [] = { 1, 1, 2, 1, 1, 3, 4, 5, 6, 0, 0 ,  };
static const char  _erract_cond_actions [] = { 1, 2, 0, 0, 3, 0, 0, 0, 0, 3, 0 ,  };
static const char  _erract_eof_actions [] = { 0, 0, 1, 1, 1, 1, 1, 0 ,  };
static const char  _erract_nfa_targs [] = { 0, 0 ,  };
static const char  _erract_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _erract_nfa_push_actions [] = { 0, 0 ,  };
static const char  _erract_nfa_pop_trans [] = { 0, 0 ,  };
static const int  erract_start  = 0;
static const int  erract_first_final  = 0;
static const int  erract_error  = -1;
static const int  erract_en_main  = 0;
void erract_init( struct erract *fsm )
{

	{
		(fsm->cs) = ( int ) erract_start;
	}
}

void erract_execute( struct erract *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	const char *eof = pe;
	
	{
		int _trans = 0;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		_resume :
		_keys = _erract_trans_keys + ((fsm->cs)<<1);
		_inds = _erract_indices + _erract_index_offsets[(fsm->cs)];
		if ( ((*( p  ))
		)<= 111 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _erract_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _erract_index_defaults[(fsm->cs)];
			
		}
		
		else
		{
			_trans = ( int ) _erract_index_defaults[(fsm->cs)];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		(fsm->cs) = ( int ) _erract_cond_targs[_trans];
		if ( _erract_cond_actions[_trans]== 0  )
		goto _again;
		
		
		switch ( _erract_cond_actions[_trans] ) {
			case 1 :
			{
				printf("hello fails\n");
			}
			
			break;
			case 3 :
			{
				printf("newline\n");
			}
			
			break;
			case 2 :
			{
				printf("newline\n");
			}
			{
				printf("hello fails\n");
			}
			
			break;
			
		}
		
		_again :
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			switch ( _erract_eof_actions[(fsm->cs)] ) {
				case 1 :
				{
					printf("hello fails\n");
				}
				
				break;
				
			}
		}
		
		
		
	}
}

int erract_finish( struct erract *fsm )
{
	if ( fsm->cs == erract_error )
	return -1;
	else if ( fsm->cs >= erract_first_final )
	return 1;
	return 0;
}

#include <stdio.h>
#include <string.h>

struct erract fsm;

void test( char *buf )
{
	int len = strlen(buf);
	erract_init( &fsm );
	erract_execute( &fsm, buf, len );
	if ( erract_finish( &fsm ) > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}

int main()
{
	test(
	"hello\n"
	"hello\n"
	"hello\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"hello there\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"he"	);
	
	test( "" );
	
	return 0;
}

