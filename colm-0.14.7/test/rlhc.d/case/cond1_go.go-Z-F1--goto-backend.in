host( "working/cond1_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	var i  int ;
	var j  int ;
	var k  int ;
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array byte _foo_trans_keys( 0, 5 ) = { u(1), u(0), u(2), u(2), u(2), u(2), u(2), u(2), u(3), u(4), u(3), u(4), u(3), u(4), u(5), u(5), u(0), u(0), u(5), u(5), u(5), u(5), u(5), u(5), u(5), u(5), u(5), u(5), u(5), u(5), u(1), u(0), u(0) };

array s8 _foo_char_class( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 0 };

array s8 _foo_index_offsets( 0, 17 ) = { 0, 0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 };

array s8 _foo_indices( 0, 16 ) = { 0, 2, 3, 4, 5, 6, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 };

array s8 _foo_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _foo_trans_cond_spaces( -1, 5 ) = { -1, -1, -1, -1, -1, 1, -1, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _foo_trans_offsets( 0, 27 ) = { 0, 1, 2, 3, 4, 5, 7, 8, 16, 20, 21, 22, 23, 24, 25, 26, 27, 0 };

array s8 _foo_cond_targs( 0, 15 ) = { 2, 0, 3, 4, 5, 0, 7, 6, 0, 11, 7, 12, 9, 13, 10, 14, 0, 7, 9, 10, 8, 15, 8, 8, 8, 8, 8, 8, 0 };

array s8 _foo_cond_actions( 0, 11 ) = { 1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 15;
value int foo_error = 0;

value int foo_en_main = 1;

host( "working/cond1_go.rl", 69 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)foo_start;
	}
	host( "working/cond1_go.rl", 72 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
	}@
	{
		int _trans = 0;
		uint _cond = 0;
		index byte _keys;
		index s8 _inds;
		int _cpc;
		int _nbreak;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _foo_trans_keys, (cs<<1) );
				_inds = offset( _foo_indices, _foo_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 99 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_foo_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _foo_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _foo_trans_keys, _keys ) )
					_trans = cast(int)deref( _foo_indices, _inds + cast(int)( _ic - cast(int)deref( _foo_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_foo_index_defaults[cs];
				}
				else {
					_trans = cast(int)_foo_index_defaults[cs];
				}
				
				_cond = cast(uint)_foo_trans_offsets[_trans];
				
				_cpc = 0;
				switch ( _foo_trans_cond_spaces[_trans] ) {
					
					case 1 {
						if ( host( "working/cond1_go.rl", 17 ) ={j != 0}= ) _cpc += 1;
					}
					case 4 {
						if ( host( "working/cond1_go.rl", 17 ) ={j != 0}= ) _cpc += 1;
						if ( host( "working/cond1_go.rl", 18 ) ={k != 0}= ) _cpc += 2;
					}
					case 5 {
						if ( host( "working/cond1_go.rl", 16 ) ={i != 0}= ) _cpc += 1;
						if ( host( "working/cond1_go.rl", 17 ) ={j != 0}= ) _cpc += 2;
						if ( host( "working/cond1_go.rl", 18 ) ={k != 0}= ) _cpc += 4;
					}
				}
				_cond += cast(uint)_cpc;
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_foo_cond_targs[_cond];
				
				if ( _foo_cond_actions[_cond] == 0 )
				goto _again;
				
				_nbreak = 0;
				switch ( _foo_cond_actions[_cond] ) {
					case 8 {
						host( "working/cond1_go.rl", 19 ) ${fmt.Print( "  one\n" );}$
					}
					case 4 {
						host( "working/cond1_go.rl", 20 ) ${fmt.Print( "  two\n" );}$
					}
					case 6 {
						host( "working/cond1_go.rl", 21 ) ${fmt.Print( "  three\n" );}$
					}
					case 1 {
						host( "working/cond1_go.rl", 23 ) ${if ( ={( deref( data, p ))}= == 48 ) {
								i = 0;
								
							} else {
								i = 1;
								
							}
						}$
					}
					case 2 {
						host( "working/cond1_go.rl", 31 ) ${if ( ={( deref( data, p ))}= == 48 ) {
								j = 0;
								
							} else {
								j = 1;
								
							}
						}$
					}
					case 3 {
						host( "working/cond1_go.rl", 39 ) ${if ( ={( deref( data, p ))}= == 48 ) {
								k = 0;
								
							} else {
								k = 1;
								
							}
						}$
					}
					case 5 {
						host( "working/cond1_go.rl", 48 ) ${${p += 1;  _nbreak = 1; }$
						}$
					}
					case 9 {
						host( "working/cond1_go.rl", 19 ) ${fmt.Print( "  one\n" );}$	host( "working/cond1_go.rl", 20 ) ${fmt.Print( "  two\n" );}$
					}
					case 10 {
						host( "working/cond1_go.rl", 19 ) ${fmt.Print( "  one\n" );}$	host( "working/cond1_go.rl", 21 ) ${fmt.Print( "  three\n" );}$
					}
					case 7 {
						host( "working/cond1_go.rl", 20 ) ${fmt.Print( "  two\n" );}$	host( "working/cond1_go.rl", 21 ) ${fmt.Print( "  three\n" );}$
					}
					case 11 {
						host( "working/cond1_go.rl", 19 ) ${fmt.Print( "  one\n" );}$	host( "working/cond1_go.rl", 20 ) ${fmt.Print( "  two\n" );}$	host( "working/cond1_go.rl", 21 ) ${fmt.Print( "  three\n" );}$
					}
				}
				
				if ( _nbreak == 1 )
				goto _out;
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/cond1_go.rl", 78 ) @{
	}
	func finish() {
		if cs >= foo_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"000abc\n",
		"100abc\n",
		"010abc\n",
		"110abc\n",
		"001abc\n",
		"101abc\n",
		"011abc\n",
		"111abc\n",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@