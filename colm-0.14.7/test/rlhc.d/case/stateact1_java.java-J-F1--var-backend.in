host( "working/stateact1_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class stateact1_java
	{
		
		
		
		
		
		
		
	}@
	array char _state_act_trans_keys( 0, 3 ) = { u(1), u(0), u(3), u(3), u(0), u(0), u(2), u(2), u(2), u(2), u(2), u(2), u(0) };
	
	array s8 _state_act_char_class( 0, 3 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 0 };
	
	array s8 _state_act_index_offsets( 0, 4 ) = { 0, 0, 1, 2, 3, 4, 0 };
	
	array s8 _state_act_indices( 0, 3 ) = { 0, 2, 3, 3, 3, 0 };
	
	array s8 _state_act_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 0 };
	
	array s8 _state_act_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, 0 };
	
	array s8 _state_act_cond_targs( 0, 5 ) = { 2, 0, 5, 1, 0 };
	
	array s8 _state_act_cond_actions( 0, 3 ) = { 0, 0, 3, 0, 0 };
	
	array s8 _state_act_to_state_actions( 0, 6 ) = { 0, 0, 1, 4, 6, 4, 0 };
	
	array s8 _state_act_from_state_actions( 0, 7 ) = { 0, 0, 2, 5, 7, 5, 0 };
	
	array s8 _state_act_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _state_act_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _state_act_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _state_act_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int state_act_start = 4;
	value int state_act_first_final = 4;
	value int state_act_error = 0;
	
	value int state_act_en_main = 4;
	value int state_act_en_main_line_again = 3;
	
	host( "working/stateact1_java.rl", 47 ) @{
		int cs;
		
		void init()
		{
		}@
		{
			cs = cast(int)state_act_start;
		}
		host( "working/stateact1_java.rl", 52 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			String _s;
		}@
		{
			uint _trans = 0;
			uint _have = 0;
			uint _cont = 1;
			index char _keys;
			index s8 _inds;
			while ( _cont == 1 ) {
				
				if ( cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						switch ( _state_act_from_state_actions[cs] ) {
							case 5 {
								host( "working/stateact1_java.rl", 21 ) ${System.out.print( "b2\n" );
								}$
							}
							case 2 {
								host( "working/stateact1_java.rl", 25 ) ${System.out.print( "c2\n" );
								}$
							}
							case 7 {
								host( "working/stateact1_java.rl", 17 ) ${System.out.print( "a2\n" );
								}$
								host( "working/stateact1_java.rl", 21 ) ${System.out.print( "b2\n" );
								}$
							}
						}
						
						_keys = offset( _state_act_trans_keys, (cs<<1) );
						_inds = offset( _state_act_indices, _state_act_index_offsets[cs] );
						
						if ( ( deref( data, p )) <= 105 && ( deref( data, p )) >= 10 )
						{
							int _ic = cast(int)_state_act_char_class[cast(int)( deref( data, p )) - 10];
							if ( _ic <= cast(int)deref( _state_act_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _state_act_trans_keys, _keys ) )
							_trans = cast(uint)deref( _state_act_indices, _inds + cast(int)( _ic - cast(int)deref( _state_act_trans_keys, _keys ) )  ); 
							else
							_trans = cast(uint)_state_act_index_defaults[cs];
						}
						else {
							_trans = cast(uint)_state_act_index_defaults[cs];
						}
						
					}
					if ( _cont == 1 ) {
						cs = cast(int)_state_act_cond_targs[_trans];
						
						switch ( _state_act_cond_actions[_trans] ) {
							case 3 {
								host( "working/stateact1_java.rl", 27 ) ${${cs = 3;}$}$
							}
						}
						
						switch ( _state_act_to_state_actions[cs] ) {
							case 4 {
								host( "working/stateact1_java.rl", 19 ) ${System.out.print( "b1\n" );
								}$
							}
							case 1 {
								host( "working/stateact1_java.rl", 23 ) ${System.out.print( "c1\n" );
								}$
							}
							case 6 {
								host( "working/stateact1_java.rl", 15 ) ${System.out.print( "a1\n" );
								}$
								host( "working/stateact1_java.rl", 19 ) ${System.out.print( "b1\n" );
								}$
							}
						}
						
						if ( cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}}
			}
		}
		host( "working/stateact1_java.rl", 63 ) @{
		}
		
		void finish( )
		{
			if ( cs >= state_act_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"hi\nhi\n",
		};
		
		static final int inplen = 1;
		
		public static void main (String[] args)
		{
			stateact1_java machine = new stateact1_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@