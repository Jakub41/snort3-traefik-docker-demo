#include <iostream>
#include <string.h>
using namespace std;

#define TK_Dlit 192
#define TK_Slit 193
#define TK_Float 194
#define TK_Id 195
#define TK_NameSep 197
#define TK_Arrow 211
#define TK_PlusPlus 212
#define TK_MinusMinus 213
#define TK_ArrowStar 214
#define TK_DotStar 215
#define TK_ShiftLeft 216
#define TK_ShiftRight 217
#define TK_IntegerDecimal 218
#define TK_IntegerOctal 219
#define TK_IntegerHex 220
#define TK_EqualsEquals 223
#define TK_NotEquals 224
#define TK_AndAnd 225
#define TK_OrOr 226
#define TK_MultAssign 227
#define TK_DivAssign 228
#define TK_PercentAssign 229
#define TK_PlusAssign 230
#define TK_MinusAssign 231
#define TK_AmpAssign 232
#define TK_CaretAssign 233
#define TK_BarAssign 234
#define TK_DotDotDot 240
#define TK_Whitespace 241
#define TK_Comment 242

struct Scanner
{
	int cs, act;
	const char *ts, *te;
	bool isCxx;
	
	void token( int tok );
	void run( const char *buf );
};




static const short  _Scanner_key_offsets [] = { 0, 0, 3, 3, 6, 6, 7, 11, 13, 19, 50, 52, 53, 54, 56, 57, 59, 62, 63, 67, 75, 81, 84, 94, 103, 107, 111, 115, 125, 129, 138, 139, 140, 147, 156, 157, 159, 161, 0 ,  };
static const char  _Scanner_trans_keys [] = { 10, 34, 92, 10, 39, 92, 46, 43, 45, 48, 57, 48, 57, 48, 57, 65, 70, 97, 102, 33, 34, 37, 38, 39, 42, 43, 45, 46, 47, 48, 58, 61, 76, 94, 95, 124, 35, 44, 49, 57, 59, 64, 65, 90, 91, 96, 97, 122, 123, 126, 33, 126, 61, 61, 38, 61, 61, 43, 61, 45, 61, 62, 42, 42, 46, 48, 57, 69, 70, 76, 101, 102, 108, 48, 57, 70, 76, 102, 108, 48, 57, 42, 47, 61, 46, 69, 76, 85, 101, 108, 117, 120, 48, 57, 46, 69, 76, 85, 101, 108, 117, 48, 57, 76, 85, 108, 117, 76, 85, 108, 117, 76, 85, 108, 117, 76, 85, 108, 117, 48, 57, 65, 70, 97, 102, 76, 85, 108, 117, 46, 69, 76, 85, 101, 108, 117, 48, 57, 58, 61, 95, 48, 57, 65, 90, 97, 122, 34, 39, 95, 48, 57, 65, 90, 97, 122, 61, 61, 124, 10, 42, 47, 0 ,  };
static const char  _Scanner_single_lengths [] = { 0, 3, 0, 3, 0, 1, 2, 0, 0, 17, 0, 1, 1, 2, 1, 2, 3, 1, 2, 6, 4, 3, 8, 7, 4, 4, 4, 4, 4, 7, 1, 1, 1, 3, 1, 2, 2, 1, 0 ,  };
static const char  _Scanner_range_lengths [] = { 0, 0, 0, 0, 0, 0, 1, 1, 3, 7, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 3, 0, 1, 0, 0, 3, 3, 0, 0, 0, 0, 0 ,  };
static const short  _Scanner_index_offsets [] = { 0, 0, 4, 5, 9, 10, 12, 16, 18, 22, 47, 49, 51, 53, 56, 58, 61, 65, 67, 71, 79, 85, 89, 99, 108, 113, 118, 123, 131, 136, 145, 147, 149, 154, 161, 163, 166, 169, 0 ,  };
static const char  _Scanner_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const short  _Scanner_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 0 ,  };
static const char  _Scanner_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _Scanner_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _Scanner_cond_targs [] = { 9, 9, 2, 1, 1, 9, 9, 4, 3, 3, 9, 9, 7, 7, 20, 9, 20, 9, 27, 27, 27, 9, 11, 1, 12, 13, 3, 14, 15, 16, 18, 21, 22, 30, 31, 33, 34, 32, 35, 9, 29, 9, 32, 9, 32, 9, 10, 9, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 17, 9, 9, 9, 9, 5, 19, 9, 6, 9, 9, 6, 9, 9, 19, 9, 9, 9, 9, 9, 20, 9, 9, 9, 9, 9, 19, 6, 25, 25, 6, 25, 25, 8, 23, 9, 19, 6, 24, 24, 6, 24, 24, 23, 9, 9, 9, 9, 9, 9, 26, 26, 26, 26, 9, 9, 9, 9, 9, 9, 28, 28, 28, 28, 27, 27, 27, 9, 9, 9, 9, 9, 9, 19, 6, 25, 25, 6, 25, 25, 29, 9, 9, 9, 9, 9, 32, 32, 32, 32, 9, 1, 3, 32, 32, 32, 32, 9, 9, 9, 9, 9, 9, 36, 37, 36, 36, 36, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 36, 0 ,  };
static const char  _Scanner_cond_actions [] = { 1, 2, 0, 0, 0, 1, 3, 0, 0, 0, 5, 4, 0, 0, 0, 1, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 11, 0, 0, 12, 0, 0, 0, 9, 11, 9, 0, 9, 0, 9, 0, 13, 0, 15, 14, 16, 14, 17, 18, 14, 19, 14, 20, 21, 14, 22, 23, 0, 14, 25, 24, 26, 0, 27, 14, 0, 29, 29, 0, 29, 29, 27, 28, 29, 29, 29, 29, 0, 28, 30, 31, 32, 14, 27, 0, 0, 0, 0, 0, 0, 0, 34, 33, 27, 0, 0, 0, 0, 0, 0, 34, 35, 36, 36, 36, 36, 35, 0, 0, 0, 0, 33, 37, 37, 37, 37, 33, 0, 0, 0, 0, 0, 0, 0, 38, 39, 39, 39, 39, 38, 27, 0, 0, 0, 0, 0, 0, 11, 33, 40, 14, 41, 14, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 42, 43, 14, 44, 45, 14, 48, 0, 47, 50, 49, 1, 1, 1, 1, 4, 1, 1, 6, 13, 14, 14, 14, 14, 14, 14, 24, 14, 28, 28, 14, 33, 35, 35, 33, 33, 38, 38, 33, 14, 14, 42, 42, 14, 14, 49, 0 ,  };
static const char  _Scanner_to_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0 ,  };
static const char  _Scanner_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0 ,  };
static const char  _Scanner_eof_trans_indexed [] = { 0, 9, 9, 9, 9, 12, 9, 9, 14, 0, 16, 17, 17, 17, 17, 17, 17, 27, 17, 30, 30, 17, 35, 36, 36, 35, 35, 39, 39, 35, 17, 17, 43, 43, 17, 17, 0, 75, 0 ,  };
static const short  _Scanner_eof_trans_direct [] = { 0, 172, 173, 174, 175, 176, 177, 178, 179, 0, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 0, 206, 0 ,  };
static const char  _Scanner_nfa_targs [] = { 0, 0 ,  };
static const char  _Scanner_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _Scanner_nfa_push_actions [] = { 0, 0 ,  };
static const char  _Scanner_nfa_pop_trans [] = { 0, 0 ,  };
static const int  Scanner_start  = 9;
static const int  Scanner_error  = 0;
static const int  Scanner_en_comment  = 36;
static const int  Scanner_en_main  = 9;
void Scanner::token( int tok )
{
	const char *data = ts;
	int len = te - ts;
	cout << "<" << tok << "> ";
	if ( data != 0 ) {
		for ( int i = 0; i < len; i++ )
		cout << data[i];
	}
	cout << '\n';
}

void Scanner::run( const char *buf )
{
	int len = strlen( buf );
	
	{
		cs = ( int ) Scanner_start;
		ts = 0;
		te = 0;
		act = 0;
	}
	const char *p = buf;
	const char *pe = buf + len;
	const char *eof = pe;
	
	{
		int _klen;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans;
		unsigned int _cond = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _Scanner_eof_trans_direct[cs]> 0  )
					{
						_trans = ( unsigned int  ) _Scanner_eof_trans_direct[cs]- 1;
						_cond = ( unsigned int  ) _Scanner_trans_offsets[_trans];
						_have = 1;
					}
					
					if ( _have == 0  )
					{
					}
					
				}
				
				
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					switch ( _Scanner_from_state_actions[cs] ) {
						case 8 :
						{
							{
								ts = p;
								
							}
							
						}
						
						break;
						
					}
					_keys = _Scanner_trans_keys + _Scanner_key_offsets[cs];
					_trans = ( unsigned int  ) _Scanner_index_offsets[cs];
					_have = 0;
					_klen = ( int ) _Scanner_single_lengths[cs];
					if ( _klen > 0  )
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( ((*( p  ))
							)< (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( ((*( p  ))
							)> (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_trans += ( unsigned int  ) (_mid - _keys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += ( unsigned int  ) _klen;
						}
						
					}
					
					
					if ( _have == 0  )
					{
						_klen = ( int ) _Scanner_range_lengths[cs];
						if ( _klen > 0  )
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 2;
								
								else if ( ((*( p  ))
								)> (*( _mid + 1  ))
								)
								_lower = _mid + 2;
								
								else
								{
									_trans += ( unsigned int  ) ((_mid - _keys)>>1);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							_trans += ( unsigned int  ) _klen;
							
						}
						
					}
					
					
					_ckeys = _Scanner_cond_keys + _Scanner_trans_offsets[_trans];
					_klen = ( int ) _Scanner_trans_lengths[_trans];
					_cond = ( unsigned int  ) _Scanner_trans_offsets[_trans];
					_have = 0;
					_cpc = 0;
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < ( int ) (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( _cpc > ( int ) (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_cond += ( unsigned int  ) (_mid - _ckeys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
						}
						
					}
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _Scanner_cond_targs[_cond];
					switch ( _Scanner_cond_actions[_cond] ) {
						case 10 :
						{
							{
								te = p+1;
								
							}
							
						}
						
						break;
						case 50 :
						{
							{
								te = p+1;
								{
									if ( ! isCxx )
									{
										cs = 9;
										
									}
									else {
										cout << "comm char: " << ts[0] << endl;
										cout << "comm char: " << ts[1] << endl;
									}
									
								}
								
							}
							
						}
						
						break;
						case 48 :
						{
							{
								te = p+1;
								{
									if ( isCxx )
									{
										cs = 9;
										
									}
									else
									cout << "comm char: " << ts[0] << endl;
									
								}
								
							}
							
						}
						
						break;
						case 47 :
						{
							{
								te = p+1;
								{
									cout << "comm char: " << ts[0] << endl;
									
								}
								
							}
							
						}
						
						break;
						case 49 :
						{
							{
								te = p;
								p = p - 1;
								{
									cout << "comm char: " << ts[0] << endl;
									
								}
								
							}
							
						}
						
						break;
						case 3 :
						{
							{
								te = p+1;
								{
									token( TK_Slit );
								}
								
							}
							
						}
						
						break;
						case 2 :
						{
							{
								te = p+1;
								{
									token( TK_Dlit );
								}
								
							}
							
						}
						
						break;
						case 29 :
						{
							{
								te = p+1;
								{
									token( TK_Float );
								}
								
							}
							
						}
						
						break;
						case 37 :
						{
							{
								te = p+1;
								{
									token( TK_IntegerDecimal );
								}
								
							}
							
						}
						
						break;
						case 36 :
						{
							{
								te = p+1;
								{
									token( TK_IntegerOctal );
								}
								
							}
							
						}
						
						break;
						case 39 :
						{
							{
								te = p+1;
								{
									token( TK_IntegerHex );
								}
								
							}
							
						}
						
						break;
						case 40 :
						{
							{
								te = p+1;
								{
									token( TK_NameSep );
								}
								
							}
							
						}
						
						break;
						case 41 :
						{
							{
								te = p+1;
								{
									token( TK_EqualsEquals );
								}
								
							}
							
						}
						
						break;
						case 15 :
						{
							{
								te = p+1;
								{
									token( TK_NotEquals );
								}
								
							}
							
						}
						
						break;
						case 17 :
						{
							{
								te = p+1;
								{
									token( TK_AndAnd );
								}
								
							}
							
						}
						
						break;
						case 45 :
						{
							{
								te = p+1;
								{
									token( TK_OrOr );
								}
								
							}
							
						}
						
						break;
						case 19 :
						{
							{
								te = p+1;
								{
									token( TK_MultAssign );
								}
								
							}
							
						}
						
						break;
						case 32 :
						{
							{
								te = p+1;
								{
									token( TK_DivAssign );
								}
								
							}
							
						}
						
						break;
						case 16 :
						{
							{
								te = p+1;
								{
									token( TK_PercentAssign );
								}
								
							}
							
						}
						
						break;
						case 21 :
						{
							{
								te = p+1;
								{
									token( TK_PlusAssign );
								}
								
							}
							
						}
						
						break;
						case 23 :
						{
							{
								te = p+1;
								{
									token( TK_MinusAssign );
								}
								
							}
							
						}
						
						break;
						case 18 :
						{
							{
								te = p+1;
								{
									token( TK_AmpAssign );
								}
								
							}
							
						}
						
						break;
						case 43 :
						{
							{
								te = p+1;
								{
									token( TK_CaretAssign );
								}
								
							}
							
						}
						
						break;
						case 44 :
						{
							{
								te = p+1;
								{
									token( TK_BarAssign );
								}
								
							}
							
						}
						
						break;
						case 20 :
						{
							{
								te = p+1;
								{
									token( TK_PlusPlus );
								}
								
							}
							
						}
						
						break;
						case 22 :
						{
							{
								te = p+1;
								{
									token( TK_MinusMinus );
								}
								
							}
							
						}
						
						break;
						case 25 :
						{
							{
								te = p+1;
								{
									token( TK_ArrowStar );
								}
								
							}
							
						}
						
						break;
						case 26 :
						{
							{
								te = p+1;
								{
									token( TK_DotStar );
								}
								
							}
							
						}
						
						break;
						case 5 :
						{
							{
								te = p+1;
								{
									token( TK_DotDotDot );
								}
								
							}
							
						}
						
						break;
						case 9 :
						{
							{
								te = p+1;
								{
									token( ts[0] );
								}
								
							}
							
						}
						
						break;
						case 30 :
						{
							{
								te = p+1;
								{
									isCxx = false; {
										cs = 36;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 31 :
						{
							{
								te = p+1;
								{
									isCxx = true; {
										cs = 36;
										
									}
									
								}
								
							}
							
						}
						
						break;
						case 42 :
						{
							{
								te = p;
								p = p - 1;
								{
									token( TK_Id ); 
								}
								
							}
							
						}
						
						break;
						case 28 :
						{
							{
								te = p;
								p = p - 1;
								{
									token( TK_Float );
								}
								
							}
							
						}
						
						break;
						case 33 :
						{
							{
								te = p;
								p = p - 1;
								{
									token( TK_IntegerDecimal );
								}
								
							}
							
						}
						
						break;
						case 35 :
						{
							{
								te = p;
								p = p - 1;
								{
									token( TK_IntegerOctal );
								}
								
							}
							
						}
						
						break;
						case 38 :
						{
							{
								te = p;
								p = p - 1;
								{
									token( TK_IntegerHex );
								}
								
							}
							
						}
						
						break;
						case 24 :
						{
							{
								te = p;
								p = p - 1;
								{
									token( TK_Arrow );
								}
								
							}
							
						}
						
						break;
						case 14 :
						{
							{
								te = p;
								p = p - 1;
								{
									token( ts[0] );
								}
								
							}
							
						}
						
						break;
						case 13 :
						{
							{
								te = p;
								p = p - 1;
								{
									token( TK_Whitespace );
								}
								
							}
							
						}
						
						break;
						case 6 :
						{
							{
								p = ((te))-1;
								{
									token( TK_IntegerDecimal );
								}
								
							}
							
						}
						
						break;
						case 4 :
						{
							{
								p = ((te))-1;
								{
									token( ts[0] );
								}
								
							}
							
						}
						
						break;
						case 1 :
						{
							{
								switch ( act  ) {
									case 0 :
									{
										{
											cs = 0;
											
										}
										
									}
									
									break;
									case 6 :
									p = ((te))-1;
									{
										token( TK_Id ); 
									}
									
									break;
									case 7 :
									p = ((te))-1;
									{
										token( TK_Float );
									}
									
									break;
									case 8 :
									p = ((te))-1;
									{
										token( TK_IntegerDecimal );
									}
									
									break;
									case 9 :
									p = ((te))-1;
									{
										token( TK_IntegerOctal );
									}
									
									break;
									
								}
								
							}
							
							
						}
						
						break;
						case 12 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 6;
								
							}
							
						}
						
						break;
						case 27 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 7;
								
							}
							
						}
						
						break;
						case 11 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 8;
								
							}
							
						}
						
						break;
						case 34 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 9;
								
							}
							
						}
						
						break;
						
					}
					switch ( _Scanner_to_state_actions[cs] ) {
						case 46 :
						{
							{
								ts = 0;
								
							}
							
						}
						
						break;
						case 7 :
						{
							{
								ts = 0;
								
							}
							
						}
						{
							{
								act = 0;
								
							}
							
						}
						
						break;
						
					}
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
	if ( cs == Scanner_error ) {
		/* Machine failed before finding a token. */
		cout << "PARSE ERROR" << endl;
	}
}

int main()
{
	Scanner scanner;
	scanner.run(
	"//hello*/\n"
	"/*hi there*/ hello 0x88"
	);
	return 0;
}

