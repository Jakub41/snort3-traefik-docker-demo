#include <stdio.h>

void alph(const char *type)
{
	printf("%s\n", type);
}

struct builtin
{
	int cs;
};



static const char  _builtin_key_offsets [] = { 0, 0 ,  };
static const unsigned int  _builtin_trans_keys [] = { 32u, 127u, 0u, 8u, 9u, 13u, 14u, 31u, 33u, 47u, 48u, 57u, 58u, 64u, 65u, 70u, 71u, 90u, 91u, 96u, 97u, 102u, 103u, 122u, 123u, 126u, 128u, 255u, 0u,  };
static const char  _builtin_single_lengths [] = { 2, 0 ,  };
static const char  _builtin_range_lengths [] = { 13, 0 ,  };
static const char  _builtin_index_offsets [] = { 0, 0 ,  };
static const char  _builtin_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _builtin_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 ,  };
static const char  _builtin_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _builtin_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _builtin_cond_targs [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _builtin_cond_actions [] = { 3, 1, 1, 2, 1, 4, 5, 4, 6, 7, 4, 8, 9, 4, 10, 11, 0 ,  };
static const char  _builtin_nfa_targs [] = { 0, 0 ,  };
static const char  _builtin_nfa_offsets [] = { 0, 0 ,  };
static const char  _builtin_nfa_push_actions [] = { 0, 0 ,  };
static const char  _builtin_nfa_pop_trans [] = { 0, 0 ,  };
static const int  builtin_start  = 0;
static const int  builtin_first_final  = 0;
static const int  builtin_error  = -1;
static const int  builtin_en_main  = 0;
void builtin_init( struct builtin *fsm )
{

	{
		(fsm->cs) = ( int ) builtin_start;
	}
}

void builtin_execute( struct builtin *fsm, const unsigned int *data, int len )
{
	const unsigned int *p = data;
	const unsigned int *pe = data+len;
	
	{
		int _klen;
		const unsigned int  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		if ( p == pe  )
		goto _test_eof;
		
		_resume :
		_keys = _builtin_trans_keys + _builtin_key_offsets[(fsm->cs)];
		_trans = ( unsigned int  ) _builtin_index_offsets[(fsm->cs)];
		_klen = ( int ) _builtin_single_lengths[(fsm->cs)];
		if ( _klen > 0  )
		{
			const unsigned int  *_lower;
			const unsigned int  *_mid;
			const unsigned int  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _builtin_range_lengths[(fsm->cs)];
		if ( _klen > 0  )
		{
			const unsigned int  *_lower;
			const unsigned int  *_mid;
			const unsigned int  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _builtin_cond_keys + _builtin_trans_offsets[_trans];
		_klen = ( int ) _builtin_trans_lengths[_trans];
		_cond = ( unsigned int  ) _builtin_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			(fsm->cs) = -1;
			goto _again;
		}
		
		_match_cond :
		(fsm->cs) = ( int ) _builtin_cond_targs[_cond];
		if ( _builtin_cond_actions[_cond]== 0  )
		goto _again;
		
		
		switch ( _builtin_cond_actions[_cond] ) {
			case 11 :
			{
				alph("any");
			}
			
			break;
			case 10 :
			{
				alph("any");
			}
			{
				alph("extend");
			}
			
			break;
			case 1 :
			{
				alph("any");
			}
			{
				alph("ascii");
			}
			{
				alph("extend");
			}
			{
				alph("cntrl");
			}
			
			break;
			case 2 :
			{
				alph("any");
			}
			{
				alph("ascii");
			}
			{
				alph("extend");
			}
			{
				alph("cntrl");
			}
			{
				alph("space");
			}
			
			break;
			case 3 :
			{
				alph("any");
			}
			{
				alph("ascii");
			}
			{
				alph("extend");
			}
			{
				alph("print");
			}
			{
				alph("space");
			}
			
			break;
			case 4 :
			{
				alph("any");
			}
			{
				alph("ascii");
			}
			{
				alph("extend");
			}
			{
				alph("graph");
			}
			{
				alph("print");
			}
			{
				alph("punct");
			}
			
			break;
			case 9 :
			{
				alph("any");
			}
			{
				alph("ascii");
			}
			{
				alph("extend");
			}
			{
				alph("alpha");
			}
			{
				alph("alnum");
			}
			{
				alph("lower");
			}
			{
				alph("graph");
			}
			{
				alph("print");
			}
			
			break;
			case 7 :
			{
				alph("any");
			}
			{
				alph("ascii");
			}
			{
				alph("extend");
			}
			{
				alph("alpha");
			}
			{
				alph("alnum");
			}
			{
				alph("upper");
			}
			{
				alph("graph");
			}
			{
				alph("print");
			}
			
			break;
			case 5 :
			{
				alph("any");
			}
			{
				alph("ascii");
			}
			{
				alph("extend");
			}
			{
				alph("digit");
			}
			{
				alph("alnum");
			}
			{
				alph("graph");
			}
			{
				alph("print");
			}
			{
				alph("xdigit");
			}
			
			break;
			case 8 :
			{
				alph("any");
			}
			{
				alph("ascii");
			}
			{
				alph("extend");
			}
			{
				alph("alpha");
			}
			{
				alph("alnum");
			}
			{
				alph("lower");
			}
			{
				alph("graph");
			}
			{
				alph("print");
			}
			{
				alph("xdigit");
			}
			
			break;
			case 6 :
			{
				alph("any");
			}
			{
				alph("ascii");
			}
			{
				alph("extend");
			}
			{
				alph("alpha");
			}
			{
				alph("alnum");
			}
			{
				alph("upper");
			}
			{
				alph("graph");
			}
			{
				alph("print");
			}
			{
				alph("xdigit");
			}
			
			break;
			
		}
		
		_again :
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
	}
}

int builtin_finish( struct builtin *fsm )
{
	if ( fsm->cs == builtin_error )
	return -1;
	else if ( fsm->cs >= builtin_first_final )
	return 1;
	return 0;
}

#include <stdio.h>
#define BUFSIZE 2048

struct builtin fsm;
char buf[BUFSIZE];
unsigned int i;

int test( const unsigned int *data, int len )
{
	builtin_init( &fsm );
	builtin_execute( &fsm, data, len );
	if ( builtin_finish( &fsm ) > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
	return 0;
}

#define DLEN 258
unsigned int data[DLEN] = {
	-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
	96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186,
	187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256
};

int main()
{
	test( data, DLEN );
	return 0;
}

