host( "working/cond7_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	var i  int ;
	var c  int ;
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array s8 _foo_actions( 0, 1 ) = { 0, 1, 0, 1, 1, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 4;
value int foo_error = 0;

value int foo_en_main = 1;

host( "working/cond7_go.rl", 38 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)foo_start;
	}
	host( "working/cond7_go.rl", 41 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
	}@
	{
		index s8 _acts;
		uint _nacts;
		
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		switch ( cs ) {
			case 1:
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr0;
			}
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				int ck = 0;
				if ( host( "working/cond7_go.rl", 15 ) ={i > 0}= ) ck += 1;
				if ( ck > 0 ) {
					goto ctr3;
				} else {
					goto ctr2;
				}
				
			}
			{
				goto ctr1;
			}
			case 3:
			if ( ( deref( data, p )) == 10 ) {
				int ck = 0;
				if ( host( "working/cond7_go.rl", 15 ) ={i > 0}= ) ck += 1;
				if ( ck <= 0 ) {
					goto ctr4;
				}
				goto ctr5;
				
			}
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				int ck = 0;
				if ( host( "working/cond7_go.rl", 15 ) ={i > 0}= ) ck += 1;
				if ( 1 <= ck )
				{		goto ctr6;
				}
				goto ctr5;
				
			}
			{
				goto ctr1;
			}
			case 4:
			{
				goto ctr1;
			}
		}
		
		ctr1: cs = 0; goto _again;
		ctr0: cs = 2; goto f0;
		ctr5: cs = 0; goto _again;
		ctr3: cs = 2; goto f1;
		ctr2: cs = 3; goto f0;
		ctr6: cs = 3; goto f1;
		ctr4: cs = 4; goto _again;
		
		f1: _acts = offset( _foo_actions, 1 ); goto execFuncs;
		f0: _acts = offset( _foo_actions, 3 ); goto execFuncs;
		
		execFuncs:
		_nacts = cast(uint)deref( _foo_actions, _acts );
		_acts += 1;
		while ( _nacts > 0 ) {
			switch ( deref( _foo_actions, _acts ) ) {
				case 0{
					host( "working/cond7_go.rl", 16 ) ${i = i - 1;
						c = ( int ) ( ={( deref( data, p ))}= )
						;
						fmt.Print( "item: " );fmt.Print( c );fmt.Print( "\n" );}$
				}
				case 1{
					host( "working/cond7_go.rl", 21 ) ${i = ( int ) ( ={( deref( data, p ))}= - 48 )
						;
						fmt.Print( "count: " );fmt.Print( i );fmt.Print( "\n" );}$
				}
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		goto _again;
		
		_again:
		if ( cs == 0 )
		goto _out;
		p += 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		_out: {}
	}
	host( "working/cond7_go.rl", 47 ) @{
	}
	func finish() {
		if cs >= foo_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"00\n",
		"019\n",
		"190\n",
		"1719\n",
		"1040000\n",
		"104000a\n",
		"104000\n",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@