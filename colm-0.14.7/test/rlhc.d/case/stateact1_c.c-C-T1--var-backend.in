host( "working/stateact1_c.rl", 1 ) @{/*
	* @@LANG: c
	* @@GENERATED: true
	*/
	
	#include <string.h>
	#include <stdio.h>
	
	
	
	
	
	
	
	
}@
array s8 _state_act_key_offsets( 0, 4 ) = { 0, 0, 1, 2, 3, 4, 0 };

array char _state_act_trans_keys( 0, 105 ) = { 105, 10, 104, 104, 104, 0 };

array s8 _state_act_single_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 0 };

array s8 _state_act_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_act_index_offsets( 0, 8 ) = { 0, 0, 2, 4, 6, 8, 0 };

array s8 _state_act_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _state_act_trans_offsets( 0, 9 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };

array s8 _state_act_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _state_act_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_act_cond_targs( 0, 5 ) = { 2, 0, 5, 0, 1, 0, 1, 0, 1, 0, 0 };

array s8 _state_act_cond_actions( 0, 3 ) = { 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_act_to_state_actions( 0, 6 ) = { 0, 0, 1, 4, 6, 4, 0 };

array s8 _state_act_from_state_actions( 0, 7 ) = { 0, 0, 2, 5, 7, 5, 0 };

array s8 _state_act_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _state_act_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_act_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _state_act_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int state_act_start = 4;
value int state_act_first_final = 4;
value int state_act_error = 0;

value int state_act_en_main = 4;
value int state_act_en_main_line_again = 3;

host( "working/stateact1_c.rl", 47 ) @{
	int cs;
	int blen;
	char buffer[1024];
	
	void init()
	{
	}@
	{
		cs = cast(int)state_act_start;
	}
	host( "working/stateact1_c.rl", 54 ) @{
	}
	
	void exec( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
	}@
	{
		int _klen;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					switch ( _state_act_from_state_actions[cs] ) {
						case 5 {
							host( "working/stateact1_c.rl", 21 ) ${printf( "%s", "b2\n" );
							}$
						}
						case 2 {
							host( "working/stateact1_c.rl", 25 ) ${printf( "%s", "c2\n" );
							}$
						}
						case 7 {
							host( "working/stateact1_c.rl", 17 ) ${printf( "%s", "a2\n" );
							}$
							host( "working/stateact1_c.rl", 21 ) ${printf( "%s", "b2\n" );
							}$
						}
					}
					
					_keys = offset( _state_act_trans_keys, _state_act_key_offsets[cs] );
					_trans = cast(uint)_state_act_index_offsets[cs];
					_have = 0;
					
					_klen = cast(int)_state_act_single_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _state_act_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _state_act_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_state_act_range_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _state_act_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _state_act_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _state_act_cond_keys, _state_act_trans_offsets[_trans] );
					_klen = cast(int)_state_act_trans_lengths[_trans];
					_cond = cast(uint)_state_act_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _state_act_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _state_act_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							cs = 0;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					cs = cast(int)_state_act_cond_targs[_cond];
					
					switch ( _state_act_cond_actions[_cond] ) {
						case 3 {
							host( "working/stateact1_c.rl", 27 ) ${${cs = 3;}$}$
						}
					}
					
					switch ( _state_act_to_state_actions[cs] ) {
						case 4 {
							host( "working/stateact1_c.rl", 19 ) ${printf( "%s", "b1\n" );
							}$
						}
						case 1 {
							host( "working/stateact1_c.rl", 23 ) ${printf( "%s", "c1\n" );
							}$
						}
						case 6 {
							host( "working/stateact1_c.rl", 15 ) ${printf( "%s", "a1\n" );
							}$
							host( "working/stateact1_c.rl", 19 ) ${printf( "%s", "b1\n" );
							}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/stateact1_c.rl", 61 ) @{
	}
	
	void finish( )
	{
		if ( cs >= state_act_first_final )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	char *inp[] = {
		"hi\nhi\n",
	};
	
	int inplen = 1;
	
	int main( )
	{
		int i;
		for ( i = 0; i < inplen; i++ ) {
			init();
			exec( inp[i], strlen(inp[i]) );
			finish();
		}
		return 0;
	}
	
}@