class caseindep_java
{






	private static byte  _indep_key_offsets [] = { 0, 0, 4, 5, 6, 7, 8, 9, 10, 12, 14, 16, 18, 20, 0 ,  };
	private static char  _indep_trans_keys [] = { 49, 51, 52, 54, 104, 101, 108, 108, 111, 10, 72, 104, 69, 101, 76, 108, 76, 108, 79, 111, 0,  };
	private static byte  _indep_single_lengths [] = { 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 0, 0 ,  };
	private static byte  _indep_range_lengths [] = { 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _indep_index_offsets [] = { 0, 0, 3, 5, 7, 9, 11, 13, 15, 18, 21, 24, 27, 30, 0 ,  };
	private static byte  _indep_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _indep_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 ,  };
	private static byte  _indep_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _indep_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _indep_cond_targs [] = { 2, 8, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 13, 0, 9, 9, 0, 10, 10, 0, 11, 11, 0, 12, 12, 0, 7, 7, 0, 0, 0 ,  };
	private static byte  _indep_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _indep_nfa_targs [] = { 0, 0 ,  };
	private static byte  _indep_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _indep_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _indep_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  indep_start  = 1;
	private static int  indep_first_final  = 13;
	private static int  indep_error  = 0;
	private static int  indep_en_main  = 1;
	int cs;
	
	void init()
	{
		{
			cs = (int)indep_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans;
			int _cond = 0;
			int _have = 0;
			int _cont = 1;
			while ( _cont == 1  )
			{
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = _indep_key_offsets[cs] ;
						_trans = (int )_indep_index_offsets[cs];
						_have = 0;
						_klen = (int)_indep_single_lengths[cs];
						if ( _klen > 0  )
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( data[p ]) < _indep_trans_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( ( data[p ]) > _indep_trans_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_trans += (int )(_mid - _keys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								_keys += _klen;
								_trans += (int )_klen;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_klen = (int)_indep_range_lengths[cs];
							if ( _klen > 0  )
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( data[p ]) < _indep_trans_keys[_mid ] )
									_upper = _mid - 2;
									
									else if ( ( data[p ]) > _indep_trans_keys[_mid + 1 ] )
									_lower = _mid + 2;
									
									else
									{
										_trans += (int )((_mid - _keys)>>1);
										_have = 1;
										
									}
									
									
								}
								
								if ( _have == 0  )
								_trans += (int )_klen;
								
								
							}
							
							
						}
						
						_ckeys = _indep_trans_offsets[_trans] ;
						_klen = (int)_indep_trans_lengths[_trans];
						_cond = (int )_indep_trans_offsets[_trans];
						_have = 0;
						_cpc = 0;
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < (int)_indep_cond_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( _cpc > (int)_indep_cond_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_cond += (int )(_mid - _ckeys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								cs = 0;
								_cont = 0;
								
							}
							
							
						}
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_indep_cond_targs[_cond];
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
	}
	
	void finish( )
	{
		if ( cs >= indep_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"1hello\n",
		"1HELLO\n",
		"1HeLLo\n",
		"2hello\n",
		"2HELLO\n",
		"2HeLLo\n",
		"3hello\n",
		"3HELLO\n",
		"3HeLLo\n",
		"4hello\n",
		"4HELLO\n",
		"4HeLLo\n",
		"5hello\n",
		"5HELLO\n",
		"5HeLLo\n",
		"6hello\n",
		"6HELLO\n",
		"6HeLLo\n",
	};
	
	static final int inplen = 18;
	
	public static void main (String[] args)
	{
		caseindep_java machine = new caseindep_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
