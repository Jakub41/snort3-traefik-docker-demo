#include <stdio.h>
#include <string.h>



#define test_ex_c1  99 
#define test_ex_c2  122 
#define test_ex_c3  116 
static const char  _test_actions [] = { 0, 1, 0, 1, 1, 1, 2, 0 ,  };
static const char  _test_trans_keys [] = { 1, 0, 0, 3, 0, 2, 0, 7, 1, 0, 5, 7, 0 ,  };
static const char  _test_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 7, 0 ,  };
static const char  _test_index_offsets [] = { 0, 0, 4, 7, 15, 15, 0 ,  };
static const char  _test_indices [] = { 0, 1, 1, 2, 3, 1, 4, 5, 1, 1, 1, 6, 6, 6, 6, 2, 4, 6, 0 ,  };
static const char  _test_index_defaults [] = { 0, 1, 1, 1, 7, 1, 0 ,  };
static const char  _test_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _test_cond_targs [] = { 5, 0, 1, 5, 2, 5, 3, 4, 0 ,  };
static const char  _test_cond_actions [] = { 1, 0, 0, 5, 0, 3, 0, 0, 0 ,  };
static const char  _test_nfa_targs [] = { 0, 0 ,  };
static const char  _test_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _test_nfa_push_actions [] = { 0, 0 ,  };
static const char  _test_nfa_pop_trans [] = { 0, 0 ,  };
static const int  test_start  = 4;
static const int  test_first_final  = 4;
static const int  test_error  = 0;
static const int  test_en_commands  = 5;
static const int  test_en_some_other  = 4;
int test( const char *data, int len )
{
	int cs = test_en_commands;
	const char *p = data, *pe = data + len;
	
	
	{
	}
	
	{
		int _trans = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _test_trans_keys + (cs<<1);
		_inds = _test_indices + _test_index_offsets[cs];
		if ( ((*( p  ))
		)<= 122 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _test_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _test_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _test_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _test_cond_targs[_trans];
		if ( _test_cond_actions[_trans]== 0  )
		goto _again;
		
		
		_acts = _test_actions + _test_cond_actions[_trans];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf( "c1\n" );
				}
				
				break;
				case 1 :
				{
					printf( "c2\n" );
				}
				
				break;
				case 2 :
				{
					printf( "c3\n" );
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
	if ( cs >= test_first_final )
	printf("ACCEPT\n");
	else
	printf("ERROR\n");
	return 0;
}

char data[] = { 
	test_ex_c1, '1', '2', '\n', 
	test_ex_c2, 'a', 'b', '\n', 
	test_ex_c3, '.', '.', '\n', 0 
};

int main()
{
	test( data, strlen( data ) );
	return 0;
}

