#include <iostream>
#include <string.h>
using std::cout;
using std::endl;



static const char  _foo_key_offsets [] = { 0, 0, 2, 4, 0 ,  };
static const char  _foo_trans_keys [] = { 0, 46, 0, 46, 0 ,  };
static const char  _foo_single_lengths [] = { 0, 2, 2, 0, 0 ,  };
static const char  _foo_range_lengths [] = { 0, 0, 0, 0, 0 ,  };
static const char  _foo_index_offsets [] = { 0, 0, 3, 6, 0 ,  };
static const char  _foo_trans_cond_spaces [] = { 0, 1, -1, 0, 1, -1, -1, 0 ,  };
static const char  _foo_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 0 ,  };
static const char  _foo_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _foo_cond_keys [] = { 1, 1, 0, 1, 1, 0, 0, 0 ,  };
static const char  _foo_cond_targs [] = { 3, 2, 0, 3, 2, 0, 0, 0 ,  };
static const char  _foo_cond_actions [] = { 0, 2, 0, 0, 2, 0, 0, 0 ,  };
static const char  _foo_from_state_actions [] = { 0, 1, 0, 0, 0 ,  };
static const char  _foo_nfa_targs [] = { 0, 0 ,  };
static const char  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0 ,  };
static const char  _foo_nfa_push_actions [] = { 0, 0 ,  };
static const char  _foo_nfa_pop_trans [] = { 0, 0 ,  };
static const int  foo_start  = 1;
static const int  foo_first_final  = 3;
static const int  foo_en_main  = 1;
void test( int min, int max, const char *str )
{
	int cs;
	const char *p = str;
	const char *pe = str + strlen( str ) + 1;
	int c = 0, seen = 0;
	
	cout << "run " << str << " " << min << " " << max << ":";
	
	
	{
		cs = ( int ) foo_start;
	}
	
	{
		int _klen;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		switch ( _foo_from_state_actions[cs] ) {
			case 1 :
			{
				c = 0; 
			}
			
			break;
			
		}
		_keys = _foo_trans_keys + _foo_key_offsets[cs];
		_trans = ( unsigned int  ) _foo_index_offsets[cs];
		_klen = ( int ) _foo_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _foo_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _foo_cond_keys + _foo_trans_offsets[_trans];
		_klen = ( int ) _foo_trans_lengths[_trans];
		_cond = ( unsigned int  ) _foo_trans_offsets[_trans];
		_cpc = 0;
		switch ( _foo_trans_cond_spaces[_trans] ) {
			case 0 :
			if ( (({ c >= min; }) ) )
			_cpc += 1;
			
			
			break;
			case 1 :
			if ( (({ c < max; }) ) )
			_cpc += 1;
			
			
			break;
			
		}
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _foo_cond_targs[_cond];
		if ( _foo_cond_actions[_cond]== 0  )
		goto _again;
		
		
		switch ( _foo_cond_actions[_cond] ) {
			case 2 :
			{
				c += 1; 
			}
			{
				seen += 1; 
			}
			
			break;
			
		}
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
	cout << " " << seen;
	
	if ( cs >= foo_first_final )
	cout << " success" << endl;
	else
	cout << " failure" << endl;
}

int main()
{
	test( 0, 0, "" );
	test( 0, 1, "" );
	test( 1, 1, "" );
	test( 1, 2, "" );
	test( 2, 2, "" );
	test( 2, 3, "" );
	
	test( 0, 0, "." );
	test( 0, 1, "." );
	test( 1, 1, "." );
	test( 1, 2, "." );
	test( 2, 2, "." );
	test( 2, 3, "." );
	
	test( 0, 0, ".." );
	test( 0, 1, ".." );
	test( 1, 1, ".." );
	test( 1, 2, ".." );
	test( 2, 2, ".." );
	test( 2, 3, ".." );
	
	test( 0, 0, "..." );
	test( 0, 1, "..." );
	test( 1, 1, "..." );
	test( 1, 2, "..." );
	test( 2, 2, "..." );
	test( 2, 3, "..." );
	
	test( 0, 0, "...." );
	test( 0, 1, "...." );
	test( 1, 1, "...." );
	test( 1, 2, "...." );
	test( 2, 2, "...." );
	test( 2, 3, "...." );
	return 0;
}

