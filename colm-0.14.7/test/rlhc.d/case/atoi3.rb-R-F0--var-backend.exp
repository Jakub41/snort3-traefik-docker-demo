#
# @LANG: ruby
#



class << self
	attr_accessor :_atoi3_actions 
	private :_atoi3_actions, :_atoi3_actions=
end
self._atoi3_actions = [
0, 1, 0, 1, 2, 2, 0, 1, 2, 0, 2, 2, 3, 4, 0 , 
]

class << self
	attr_accessor :_atoi3_trans_keys 
	private :_atoi3_trans_keys, :_atoi3_trans_keys=
end
self._atoi3_trans_keys = [
1, 0, 2, 4, 4, 4, 0, 4, 1, 0, 0 , 
]

class << self
	attr_accessor :_atoi3_char_class 
	private :_atoi3_char_class, :_atoi3_char_class=
end
self._atoi3_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 , 
]

class << self
	attr_accessor :_atoi3_index_offsets 
	private :_atoi3_index_offsets, :_atoi3_index_offsets=
end
self._atoi3_index_offsets = [
0, 0, 3, 4, 9, 0 , 
]

class << self
	attr_accessor :_atoi3_indices 
	private :_atoi3_indices, :_atoi3_indices=
end
self._atoi3_indices = [
0, 2, 3, 4, 5, 1, 1, 1, 4, 0 , 
]

class << self
	attr_accessor :_atoi3_index_defaults 
	private :_atoi3_index_defaults, :_atoi3_index_defaults=
end
self._atoi3_index_defaults = [
0, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_atoi3_trans_cond_spaces 
	private :_atoi3_trans_cond_spaces, :_atoi3_trans_cond_spaces=
end
self._atoi3_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_atoi3_cond_targs 
	private :_atoi3_cond_targs, :_atoi3_cond_targs=
end
self._atoi3_cond_targs = [
2, 0, 2, 3, 3, 4, 0 , 
]

class << self
	attr_accessor :_atoi3_cond_actions 
	private :_atoi3_cond_actions, :_atoi3_cond_actions=
end
self._atoi3_cond_actions = [
1, 0, 5, 8, 3, 11, 0 , 
]

class << self
	attr_accessor :_atoi3_nfa_targs 
	private :_atoi3_nfa_targs, :_atoi3_nfa_targs=
end
self._atoi3_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_atoi3_nfa_offsets 
	private :_atoi3_nfa_offsets, :_atoi3_nfa_offsets=
end
self._atoi3_nfa_offsets = [
0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_atoi3_nfa_push_actions 
	private :_atoi3_nfa_push_actions, :_atoi3_nfa_push_actions=
end
self._atoi3_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_atoi3_nfa_pop_trans 
	private :_atoi3_nfa_pop_trans, :_atoi3_nfa_pop_trans=
end
self._atoi3_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :atoi3_start 
end
self.atoi3_start  = 1;

class << self
	attr_accessor :atoi3_first_final 
end
self.atoi3_first_final  = 4;

class << self
	attr_accessor :atoi3_error 
end
self.atoi3_error  = 0;

class << self
	attr_accessor :atoi3_en_main 
end
self.atoi3_en_main  = 1;

def run_machine( data )
	p = 0;
	pe = data.length
	cs = 0
	val = 0;
	neg = false;
	
	begin
		cs = atoi3_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_acts = 0;
		_nacts= 0
		;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = (cs<<1) ;
								_inds = _atoi3_index_offsets[cs] ;
								if ( ( data[p ].ord) <= 57 && ( data[p ].ord) >= 10  )
									begin
										_ic = _atoi3_char_class[( data[p ].ord) - 10];
										if ( _ic <= _atoi3_trans_keys[_keys+1 ]&& _ic >= _atoi3_trans_keys[_keys ] )
											_trans = _atoi3_indices[_inds + ( _ic - _atoi3_trans_keys[_keys ])  ];
											
											else
											_trans = _atoi3_index_defaults[cs];
											
										end
										
									end
									
									else
									begin
										_trans = _atoi3_index_defaults[cs];
										
									end
									
								end
								
							end
							
						end
						if ( _cont == 1  )
							begin
								cs = _atoi3_cond_targs[_trans];
								if ( _atoi3_cond_actions[_trans] != 0  )
									begin
										_acts = _atoi3_cond_actions[_trans] ;
										_nacts = _atoi3_actions[_acts ];
										_acts += 1;
										while ( _nacts > 0  )
											begin
												case  _atoi3_actions[_acts ] 
												when -2 then
												begin
												end
												when 0  then
												begin
													begin
														neg = false;
														val = 0;
														
													end
													
												end
												when 1  then
												begin
													begin
														neg = true;
														
													end
													
												end
												when 2  then
												begin
													begin
														val = val * 10 + (( data[p ].ord) - "0"[0].ord);
														
													end
													
												end
												when 3  then
												begin
													begin
														val = -1 * val if neg
															
														end
														
													end
													when 4  then
													begin
														begin
															print val, "\n"
															
														end
														
														
													end
												end
												_nacts -= 1;
												_acts += 1;
												
											end
											
										end
										
									end
									
								end
								if ( cs == 0  )
									_cont = 0;
									
								end
								if ( _cont == 1  )
									p += 1;
									
								end
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	if  cs >= atoi3_first_final
		puts "ACCEPT"
		else
		puts "FAIL"
	end
end

inp = [
"1\n",
"12\n",
"222222\n",
"+2123\n",
"213 3213\n",
"-12321\n",
"--123\n",
"-99\n",
" -3000\n",
]

inp.each { |str| run_machine(str) }

