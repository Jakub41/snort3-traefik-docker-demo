host( "working/goto1_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	var target  int ;
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array byte _goto1_trans_keys( 0, 11 ) = { u(1), u(0), u(0), u(3), u(10), u(10), u(6), u(6), u(10), u(10), u(8), u(8), u(5), u(5), u(4), u(4), u(7), u(7), u(6), u(6), u(5), u(5), u(9), u(9), u(11), u(11), u(7), u(7), u(1), u(0), u(1), u(0), u(1), u(0), u(1), u(0), u(0) };

array s8 _goto1_char_class( 0, 11 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0 };

array s8 _goto1_index_offsets( 0, 16 ) = { 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 16, 16, 0 };

array s8 _goto1_indices( 0, 15 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 };

array s8 _goto1_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _goto1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _goto1_cond_targs( 0, 17 ) = { 14, 0, 14, 14, 3, 4, 5, 6, 7, 15, 9, 10, 16, 12, 13, 17, 0 };

array s8 _goto1_cond_actions( 0, 4 ) = { 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0 };

array s8 _goto1_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _goto1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _goto1_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _goto1_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int goto1_start = 1;
value int goto1_first_final = 14;
value int goto1_error = 0;

value int goto1_en_unused = 2;
value int goto1_en_one = 8;
value int goto1_en_two = 11;
value int goto1_en_main = 1;

host( "working/goto1_go.rl", 42 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)goto1_start;
	}
	host( "working/goto1_go.rl", 45 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index byte _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _goto1_trans_keys, (cs<<1) );
					_inds = offset( _goto1_indices, _goto1_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 119 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_goto1_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _goto1_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _goto1_trans_keys, _keys ) )
						_trans = cast(uint)deref( _goto1_indices, _inds + cast(int)( _ic - cast(int)deref( _goto1_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_goto1_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_goto1_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_goto1_cond_targs[_trans];
					
					switch ( _goto1_cond_actions[_trans] ) {
						case 3 {
							host( "working/goto1_go.rl", 16 ) ${fmt.Print( "one\n" );target = 1;
								${cs = host( "-", 1 ) ={target}=;}$
								
							}$
						}
						case 4 {
							host( "working/goto1_go.rl", 21 ) ${fmt.Print( "two\n" );target = 1;
								${cs = host( "-", 1 ) ={target}=;}$
								
							}$
						}
						case 1 {
							host( "working/goto1_go.rl", 27 ) ${target = 8;
								${cs = host( "-", 1 ) ={target}=;}$ 
							}$
						}
						case 2 {
							host( "working/goto1_go.rl", 30 ) ${target = 11;
								${cs = host( "-", 1 ) ={target}=;}$ 
							}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/goto1_go.rl", 51 ) @{
	}
	func finish() {
		if cs >= goto1_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"1one2two1one\n",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@