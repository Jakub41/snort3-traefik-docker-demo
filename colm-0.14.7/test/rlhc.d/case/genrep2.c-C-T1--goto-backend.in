host( "working/genrep2.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stddef.h>
	#include <stdint.h>
	#include <stdlib.h> 
	#include <stdbool.h>
	#include <string.h>
	#include <stdio.h>
	
	const char s[4096];
	
	struct nfa_stack
	{
		void *data;
		unsigned long sz;
	};
	
	struct nfa_bp_rec
	{
		long state;
		const char *p;
		long popTrans;
		long q_2;
	};
	
}@
array s8 _genrep_key_offsets( 0, 2 ) = { 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 0 };

array unsigned char _genrep_trans_keys( 0, 97 ) = { u(97), u(97), u(0) };

array s8 _genrep_single_lengths( 0, 1 ) = { 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0 };

array s8 _genrep_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _genrep_index_offsets( 0, 10 ) = { 0, 0, 1, 3, 4, 5, 6, 8, 9, 10, 0 };

array s8 _genrep_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0 };

array s8 _genrep_trans_offsets( 0, 10 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 };

array s8 _genrep_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _genrep_cond_keys( 0, 1 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };

array s8 _genrep_cond_targs( 0, 9 ) = { 0, 3, 0, 0, 0, 0, 7, 0, 0, 9, 0, 0 };

array s8 _genrep_cond_actions( 0, 8 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0 };

array s8 _genrep_nfa_targs( 0, 8 ) = { 0, 1, 2, 3, 5, 2, 4, 1, 6, 3, 8, 6, 4, 0 };

array s8 _genrep_nfa_offsets( 0, 9 ) = { 0, 1, 0, 3, 0, 7, 0, 9, 0, 0, 0 };

array s8 _genrep_nfa_push_actions( 0, 1 ) = { 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0 };

array s8 _genrep_nfa_pop_trans( 0, 7 ) = { 0, 0, 4, 0, 7, 6, 5, 0, 4, 0, 7, 6, 5, 0 };

value int genrep_start = 1;
value int genrep_first_final = 9;
value int genrep_error = 0;

value int genrep_en_main = 1;

host( "working/genrep2.rl", 74 ) @{
	
	int test( const char *p )
	{
		int len = strlen( p ) + 1;
		const char *pe = p + len;
		const char *eof = pe;
		int cs;
		
		struct nfa_bp_rec *nfa_bp = (struct nfa_bp_rec*) s;
		long nfa_len = 0;
		long nfa_count = 0;
		
		long q_2 = 0;
		
		printf( "testing: %s\n", p );
		
	}@
	{
		cs = cast(int)genrep_start;
		nfa_len = 0;
	}
	
	{
		int _klen;
		index unsigned char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans = 0;
		uint _cond = 0;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume { 
				if ( _genrep_nfa_offsets[cs] ) {
					int alt = 0; 
					int new_recs = _genrep_nfa_targs[cast(int)_genrep_nfa_offsets[cs]];
					while ( alt < new_recs ) { 
						nfa_bp[nfa_len].state = _genrep_nfa_targs[cast(int)_genrep_nfa_offsets[cs] + 1 + alt];
						nfa_bp[nfa_len].p = p;
						nfa_bp[nfa_len].popTrans = cast(long)_genrep_nfa_offsets[cs] + 1 + alt;
						
						switch ( _genrep_nfa_push_actions[cast(int)_genrep_nfa_offsets[cs] + 1 + alt] ) {
							case 1 {
								host( "working/genrep2.rl", 36 ) ${
									nfa_bp[nfa_len].q_2 = q_2;
								}$
							}
						}
						nfa_len += 1;
						alt += 1;
					}
				}
				_keys = offset( _genrep_trans_keys, _genrep_key_offsets[cs] );
				_trans = cast(uint)_genrep_index_offsets[cs];
				
				_klen = cast(int)_genrep_single_lengths[cs];
				if ( _klen > 0 ) {
					index unsigned char _lower;
					index unsigned char _mid;
					index unsigned char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _genrep_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _genrep_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_genrep_range_lengths[cs];
				if ( _klen > 0 ) {
					index unsigned char _lower;
					index unsigned char _mid;
					index unsigned char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _genrep_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _genrep_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _genrep_cond_keys, _genrep_trans_offsets[_trans] );
				_klen = cast(int)_genrep_trans_lengths[_trans];
				_cond = cast(uint)_genrep_trans_offsets[_trans];
				
				_cpc = 0;
				switch ( _genrep_trans_cond_spaces[_trans] ) {
					
					case 0 {
						if ( host( "working/genrep2.rl", 32 ) ={ p+1 == eof }= ) _cpc += 1;
					}
				}
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _genrep_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _genrep_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_genrep_cond_targs[_cond];
				
				if ( _genrep_cond_actions[_cond] == 0 )
				goto _again;
				
				switch ( _genrep_cond_actions[_cond] ) {
					case 8 {
						host( "working/genrep2.rl", 71 ) ${ printf( "------ MATCH\n" ); }$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
		if ( nfa_len > 0 ) {
			nfa_count += 1;
			nfa_len -= 1;
			p = nfa_bp[nfa_len].p;
			int _pop_test = 1;
			switch ( _genrep_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
				case 4 {
					_pop_test = host( "working/genrep2.rl", 41 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep2.rl", 46 ) ={
						({  q_2 = 0; 1; })
					}=;
					
				}
				case 5 {
					_pop_test = host( "working/genrep2.rl", 41 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep2.rl", 50 ) ={
						({ 1; })
					}=;
					
				}
				case 6 {
					_pop_test = host( "working/genrep2.rl", 41 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep2.rl", 54 ) ={
						({ ++q_2 < 3; })
					}=;
					
				}
				case 7 {
					_pop_test = host( "working/genrep2.rl", 41 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep2.rl", 58 ) ={
						({ ++q_2 >= 2; })
					}=;
					
				}
			}
			if ( _pop_test ) {
				cs = nfa_bp[nfa_len].state;
				goto _resume;
			}
			goto _out;
		}
	}
	host( "working/genrep2.rl", 95 ) @{
		
		return 0;
	}
	
	int main()
	{
		test( "a" );
		test( "aa" );
		test( "aaa" );
		test( "aaaa" );
		test( "aaaaa" );
		test( "aaaaaa" );
		test( "aaaaaaa" );
		test( "aaaaaaaa" );
		return 0;
	}
	
}@