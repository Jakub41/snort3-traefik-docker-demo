using System;
// Disables lots of warnings that appear in the test suite
#pragma warning disable 0168, 0169, 0219, 0162, 0414
namespace Test {
	class Test
	{
		char comm;
		int top;
		int [] stack = new int [32];
		int ts;
		int te;
		int act;
		int value;
		
		
		
		
		static readonly char  []_patact_trans_keys = { '\u0001', '\u0000', '\u0008', '\u0008', '\u000b', '\u000b', '\u0009', '\u0009', '\u000a', '\u000a', '\u0008', '\u0008', '\u000b', '\u000b', '\u0009', '\u0009', '\u000a', '\u000a', '\u0008', '\u0008', '\u000b', '\u000b', '\u0009', '\u0009', '\u000a', '\u000a', '\u0008', '\u0008', '\u000b', '\u000b', '\u0009', '\u0009', '\u000a', '\u000a', '\u0000', '\u000b', '\u0002', '\u0005', '\u0002', '\u0005', '\u0002', '\u000b', '\u0000', '\u000b', '\u0004', '\u0005', '\u0007', '\u000b', '\u0000', '\u000b', '\u0002', '\u0005', '\u0002', '\u0005', '\u0002', '\u000b', '\u0006', '\u0006', '\u0000',  };
		static readonly sbyte  []_patact_char_class = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 8, 7, 7, 9, 7, 7, 10, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0,  };
		static readonly sbyte  []_patact_index_offsets = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 28, 32, 36, 46, 58, 60, 65, 77, 81, 85, 95, 0,  };
		static readonly sbyte  []_patact_indices = { 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 20, 22, 23, 24, 25, 26, 26, 26, 26, 26, 27, 0, 23, 23, 27, 28, 23, 29, 31, 30, 30, 30, 30, 26, 26, 26, 26, 26, 32, 21, 32, 21, 33, 33, 21, 34, 34, 34, 34, 34, 33, 33, 34, 34, 34, 34, 34, 37, 21, 37, 38, 39, 40, 21, 41, 41, 41, 41, 41, 42, 10, 39, 39, 42, 43, 39, 44, 46, 45, 45, 45, 45, 41, 41, 41, 41, 41, 47, 0,  };
		static readonly sbyte  []_patact_index_defaults = { 0, 0, 0, 0, 0, 5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15, 15, 21, 0, 28, 30, 21, 35, 36, 21, 10, 43, 45, 21, 0,  };
		static readonly sbyte  []_patact_trans_cond_spaces = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  };
		static readonly sbyte  []_patact_cond_targs = { 17, 2, 3, 4, 17, 17, 6, 7, 8, 17, 24, 10, 11, 12, 24, 24, 14, 15, 16, 24, 17, 0, 17, 18, 19, 17, 20, 1, 17, 18, 17, 5, 21, 22, 23, 21, 21, 24, 24, 25, 26, 27, 9, 24, 25, 24, 13, 28, 0,  };
		static readonly sbyte  []_patact_cond_actions = { 1, 0, 0, 0, 2, 3, 0, 0, 0, 4, 5, 0, 0, 0, 6, 7, 0, 0, 0, 8, 11, 0, 12, 13, 13, 14, 15, 0, 16, 17, 18, 0, 19, 0, 0, 20, 21, 22, 23, 24, 24, 15, 0, 25, 26, 27, 0, 28, 0,  };
		static readonly sbyte  []_patact_to_state_actions = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 9, 0, 0, 0, 9, 0,  };
		static readonly sbyte  []_patact_from_state_actions = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0, 10, 0,  };
		static readonly sbyte  []_patact_eof_trans = { 0, 1, 1, 1, 1, 6, 6, 6, 6, 11, 11, 11, 11, 16, 16, 16, 16, 0, 1, 29, 31, 0, 36, 37, 0, 11, 44, 46, 0, 0,  };
		static readonly sbyte  []_patact_nfa_targs = { 0, 0,  };
		static readonly sbyte  []_patact_nfa_offsets = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  };
		static readonly sbyte  []_patact_nfa_push_actions = { 0, 0,  };
		static readonly sbyte  []_patact_nfa_pop_trans = { 0, 0,  };
		static readonly int  patact_start  = 17;
		static readonly int  patact_first_final  = 17;
		static readonly int  patact_error  = 0;
		static readonly int  patact_en_other  = 21;
		static readonly int  patact_en_exec_test  = 24;
		static readonly int  patact_en_semi  = 28;
		static readonly int  patact_en_main  = 17;
		int cs;
		
		void init()
		{
		
			{
				cs = (int)patact_start;
				ts = 0;
				te = 0;
				act = 0;
			}
		}
		
		void exec( char[] data, int len )
		{
			int p = 0;
			int pe = len;
			int eof = len;
			string _s;
			char [] buffer = new char [1024];
			int blen = 0;
			
			{
				uint _trans = 0;
				uint _have = 0;
				uint _cont = 1;
				int _keys;
				int _inds;
				while ( _cont == 1 )
				{
				
					if ( cs == 0 )
					_cont = 0;
					
					_have = 0;
					if ( p == pe  )
					{
						if ( p == eof  )
						{
							if ( _patact_eof_trans[cs] > 0 )
							{
								_trans = (uint )_patact_eof_trans[cs] - 1;
								_have = 1;
							}
							
							if ( _have == 0 )
							{
							}
							
						}
						
						
						if ( _have == 0 )
						_cont = 0;
						
					}
					
					if ( _cont == 1 )
					{
						if ( _have == 0 )
						{
							switch ( _patact_from_state_actions[cs]  ) {
								case 10:
								{{ts = p;
									}}
								
								break;
								
							}
							_keys = (cs<<1) ;
							_inds = _patact_index_offsets[cs] ;
							if ( ( data[p ]) <= 122&& ( data[p ]) >= 10 )
							{
								int _ic = (int)_patact_char_class[(int)( data[p ]) - 10];
								if ( _ic <= (int)_patact_trans_keys[_keys+1]&& _ic >= (int)_patact_trans_keys[_keys ] )
								_trans = (uint )_patact_indices[_inds + (int)( _ic - (int)_patact_trans_keys[_keys ])  ];
								
								else
								_trans = (uint )_patact_index_defaults[cs];
								
							}
							
							else
							{
								_trans = (uint )_patact_index_defaults[cs];
							}
							
							
						}
						
						if ( _cont == 1 )
						{
							cs = (int)_patact_cond_targs[_trans];
							switch ( _patact_cond_actions[_trans]  ) {
								case 15:
								{{te = p+1;
									}}
								
								break;
								case 19:
								{{te = p+1;
										{Console.Write( "space\n" );}
									}}
								
								break;
								case 21:
								{{te = p;
										p = p - 1;
										{Console.Write( "word\n" );}
									}}
								
								break;
								case 20:
								{{te = p;
										p = p - 1;
										{Console.Write( "num\n" );}
									}}
								
								break;
								case 8:
								{{te = p+1;
										{Console.Write( "word (c/lbh)\n" );}
									}}
								
								break;
								case 22:
								{{te = p+1;
										{Console.Write( "space\n" );}
									}}
								
								break;
								case 6:
								{{te = p+1;
										{Console.Write( "num (c/switch)\n" );}
									}}
								
								break;
								case 23:
								{{te = p+1;
									}}
								
								break;
								case 27:
								{{te = p;
										p = p - 1;
										{Console.Write( "word (w/lbh)\n" );{p = (( te-1))-1;
											}
											{cs = 21;
											}}
									}}
								
								break;
								case 25:
								{{te = p;
										p = p - 1;
										{Console.Write( "num (w/switch)\n" );{p = (( te-1))-1;
											}
											{cs = 21;
											}}
									}}
								
								break;
								case 7:
								{{p = ((te))-1;
										{Console.Write( "word (w/lbh)\n" );{p = (( te-1))-1;
											}
											{cs = 21;
											}}
									}}
								
								break;
								case 5:
								{{switch ( act  ) {
											case 7:
											p = ((te))-1;
											{Console.Write( "num (w/switch)\n" );}
											
											break;
											case 8:
											p = ((te))-1;
											{Console.Write( "num (w/switch)\n" );{p = (( te-1))-1;
												}
												{cs = 21;
												}}
											
											break;
											
										}
									}
								}
								
								break;
								case 28:
								{{te = p+1;
										{Console.Write( "in semi\n" );{cs = 17;
											}}
									}}
								
								break;
								case 4:
								{{te = p+1;
										{Console.Write( "word (c/lbh)\n" );}
									}}
								
								break;
								case 11:
								{{te = p+1;
										{Console.Write( "space\n" );}
									}}
								
								break;
								case 2:
								{{te = p+1;
										{Console.Write( "num (c/switch)\n" );}
									}}
								
								break;
								case 14:
								{{te = p+1;
										{Console.Write( "going to semi\n" );{p = p - 1;
											}{cs = 28;
											}}
									}}
								
								break;
								case 12:
								{{te = p+1;
										{Console.Write( "immdiate\n" );{cs = 24;
											}}
									}}
								
								break;
								case 18:
								{{te = p;
										p = p - 1;
										{Console.Write( "word (w/lbh)\n" );{p = p - 1;
											}{cs = 21;
											}}
									}}
								
								break;
								case 16:
								{{te = p;
										p = p - 1;
										{Console.Write( "num (w/switch)\n" );{p = p - 1;
											}{cs = 21;
											}}
									}}
								
								break;
								case 3:
								{{p = ((te))-1;
										{Console.Write( "word (w/lbh)\n" );{p = p - 1;
											}{cs = 21;
											}}
									}}
								
								break;
								case 1:
								{{switch ( act  ) {
											case 15:
											p = ((te))-1;
											{Console.Write( "num (w/switch)\n" );}
											
											break;
											case 16:
											p = ((te))-1;
											{Console.Write( "num (w/switch)\n" );{p = p - 1;
												}{cs = 21;
												}}
											
											break;
											
										}
									}
								}
								
								break;
								case 26:
								{{te = p+1;
									}}
								{{act = 7;
									}}
								
								break;
								case 24:
								{{te = p+1;
									}}
								{{act = 8;
									}}
								
								break;
								case 17:
								{{te = p+1;
									}}
								{{act = 15;
									}}
								
								break;
								case 13:
								{{te = p+1;
									}}
								{{act = 16;
									}}
								
								break;
								
							}
							switch ( _patact_to_state_actions[cs]  ) {
								case 9:
								{{ts = 0;
									}}
								
								break;
								
							}
							if ( cs == 0 )
							_cont = 0;
							
							if ( _cont == 1 )
							p += 1;
							
						}
					}
					
				}
				
			}
		}
		
		void finish( )
		{
			if ( cs >= patact_first_final )
			Console.WriteLine( "ACCEPT" );
			else
			Console.WriteLine( "FAIL" );
		}
		
		static readonly string[] inp = {
			"abcd foix\n",
			"abcd\nanother\n",
			"123 foix\n",
			"!abcd foix\n",
			"!abcd\nanother\n",
			"!123 foix\n",
			";",
		};
		
		
		static readonly int inplen = 7;
		
		public static void Main (string[] args)
		{
			Test machine = new Test();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].ToCharArray(), inp[i].Length );
				machine.finish();
			}
		}
	}
}
