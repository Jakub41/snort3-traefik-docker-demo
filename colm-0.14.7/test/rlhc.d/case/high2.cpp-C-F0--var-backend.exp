#include <stdio.h>
#include <string.h>

struct Fsm
{
	int cs;
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	int init( );
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	int execute( const unsigned char *data, int len );
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	int finish( );
};



static const char  _Fsm_actions [] = { 0, 1, 0, 0 ,  };
static const unsigned char  _Fsm_trans_keys [] = { 1u, 0u, 2u, 2u, 0u, 0u, 1u, 0u, 0u,  };
static const char  _Fsm_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0 ,  };
static const char  _Fsm_index_offsets [] = { 0, 0, 1, 2, 0 ,  };
static const char  _Fsm_indices [] = { 0, 2, 0 ,  };
static const char  _Fsm_index_defaults [] = { 0, 1, 1, 1, 0 ,  };
static const char  _Fsm_trans_cond_spaces [] = { -1, -1, -1, 0 ,  };
static const char  _Fsm_cond_targs [] = { 2, 0, 3, 0 ,  };
static const char  _Fsm_cond_actions [] = { 1, 0, 0, 0 ,  };
static const char  _Fsm_nfa_targs [] = { 0, 0 ,  };
static const char  _Fsm_nfa_offsets [] = { 0, 0, 0, 0, 0 ,  };
static const char  _Fsm_nfa_push_actions [] = { 0, 0 ,  };
static const char  _Fsm_nfa_pop_trans [] = { 0, 0 ,  };
static const int  Fsm_start  = 1;
static const int  Fsm_first_final  = 3;
static const int  Fsm_error  = 0;
static const int  Fsm_en_main  = 1;
int Fsm::init( )
{

	{
		cs = ( int ) Fsm_start;
	}
	return 0;
}

int Fsm::execute( const unsigned char *_data, int _len )
{
	const unsigned char *p = _data;
	const unsigned char *pe = _data+_len;
	
	{
		unsigned int _trans = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_acts;
		unsigned int _nacts;
		const unsigned char  *_keys;
		const char  *_inds;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _Fsm_trans_keys + (cs<<1);
					_inds = _Fsm_indices + _Fsm_index_offsets[cs];
					if ( ((*( p  ))
					)<= 232 && ((*( p  ))
					)>= 10  )
					{
						int _ic = ( int ) _Fsm_char_class[( int ) ((*( p  ))
						)- 10];
						if ( _ic <= ( int ) (*( _keys+1  ))
						&& _ic >= ( int ) (*( _keys  ))
						)
						_trans = ( unsigned int  ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
						) ))
						;
						
						else
						_trans = ( unsigned int  ) _Fsm_index_defaults[cs];
						
					}
					
					else
					{
						_trans = ( unsigned int  ) _Fsm_index_defaults[cs];
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _Fsm_cond_targs[_trans];
					if ( _Fsm_cond_actions[_trans]!= 0  )
					{
						_acts = _Fsm_actions + _Fsm_cond_actions[_trans];
						_nacts = ( unsigned int  ) (*( _acts  ))
						;
						_acts += 1;
						while ( _nacts > 0  )
						{
							switch ( (*( _acts  ))
							) {
								case 0 :
								{
									printf("yes\n");
									
								}
								
								break;
								
							}
							_nacts -= 1;
							_acts += 1;
						}
						
					}
					
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
	if ( cs == Fsm_error )
	return -1;
	if ( cs >= Fsm_first_final )
	return 1;
	return 0;
}

int Fsm::finish()
{
	if ( cs == Fsm_error )
	return -1;
	if ( cs >= Fsm_first_final )
	return 1;
	return 0;
}

Fsm fsm;

void test( unsigned char *buf, int len )
{
	fsm.init();
	fsm.execute( buf, len );
	if ( fsm.finish() > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}

unsigned char data1[] = { 0xe8, 10 };
unsigned char data2[] = { 0xf8, 10 };

int main()
{
	test( data1, 2 );
	test( data2, 2 );
	return 0;
}

