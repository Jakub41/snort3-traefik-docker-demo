host( "working/cond10.rl", 1 ) @{/*
	* @@LANG: c++
	*
	* This test case exercises repetition of a machine that accepts zero-length
	* string. It is very ambiguous and not useful as a pattern. 
	*/
	
	#include <iostream>
	#include <string.h>
	
	using std::cout;
	using std::endl;
	
	
	
}@
array s8 _foo_actions( 0, 6 ) = { 0, 1, 1, 1, 3, 2, 0, 2, 2, 1, 5, 2, 5, 3, 2, 5, 6, 3, 0, 2, 4, 0 };

array char _foo_trans_keys( 0, 10 ) = { 1, 0, 4, 4, 2, 2, 8, 8, 9, 9, 10, 10, 7, 7, 6, 6, 5, 5, 4, 4, 0, 10, 0, 10, 0, 10, 1, 0, 0 };

array s8 _foo_char_class( 0, 10 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 4, 1, 5, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 3, 3, 3, 6, 3, 3, 3, 3, 3, 3, 7, 3, 3, 3, 3, 3, 3, 8, 9, 3, 3, 3, 3, 10, 3, 0 };

array s8 _foo_index_offsets( 0, 42 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 20, 31, 42, 0 };

array s8 _foo_indices( 0, 16 ) = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 11, 10, 10, 12, 10, 10, 12, 12, 12, 12, 12, 13, 10, 10, 14, 10, 10, 14, 14, 14, 14, 14, 15, 10, 10, 16, 10, 10, 16, 16, 16, 16, 16, 0 };

array s8 _foo_index_defaults( 0, 10 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 1, 0 };

array s8 _foo_trans_cond_spaces( -1, 14 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 14, 13, 14, 13, 14, 13, 0 };

array s16 _foo_trans_offsets( 0, 178 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 18, 50, 82, 114, 146, 178, 0 };

array s8 _foo_cond_targs( 0, 13 ) = { 2, 0, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 13, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 13, 0, 11, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 13, 0, 0, 12, 12, 0, 0, 12, 12, 0, 0, 12, 12, 0, 13, 12, 12, 0, 0, 0, 0, 11, 11, 11, 11, 0, 0, 0, 13, 11, 11, 11, 11, 0, 0, 0, 0, 11, 11, 11, 11, 0, 0, 0, 13, 11, 11, 11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 13, 0, 0, 0, 0, 0, 0, 12, 12, 0, 0, 0, 0, 0, 13, 12, 13, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 13, 0, 11, 0, 11, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 13, 0, 11, 0, 11, 0, 0, 12, 12, 0, 0, 12, 12, 0, 0, 12, 12, 0, 13, 12, 12, 0, 0, 12, 12, 0, 0, 12, 12, 0, 0, 12, 12, 0, 13, 12, 12, 0 };

array s8 _foo_cond_actions( 0, 14 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 14, 0, 0, 0, 0, 0, 11, 0, 11, 0, 0, 0, 14, 0, 11, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 14, 0, 0, 8, 8, 0, 0, 8, 8, 0, 0, 8, 8, 0, 14, 8, 8, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 14, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 0, 14, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 14, 0, 0, 0, 0, 0, 0, 8, 8, 0, 0, 0, 0, 0, 14, 8, 14, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 14, 0, 3, 0, 3, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 14, 0, 3, 0, 3, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 14, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 14, 1, 1, 0 };

array s8 _foo_from_state_actions( 0, 17 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 5, 5, 0, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 13;
value int foo_error = 0;

value int foo_en_main = 1;

host( "working/cond10.rl", 55 ) @{
	
	void test( const char *str )
	{
		int cs = foo_start;
		const char *p = str;
		const char *pe = str + strlen( str );
		int match = 0;
		
		long q_4 = 0, q_5 = 0, q_6 = 0;
		
		cout << "run:" << endl;
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		int _cpc;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_acts = offset( _foo_actions, _foo_from_state_actions[cs] );
					_nacts = cast(uint)deref( _foo_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _foo_actions, _acts ) ) {
							case 0 {
								host( "working/cond10.rl", 28 ) ${ q_4 = 0; }$
							}
							case 2 {
								host( "working/cond10.rl", 34 ) ${ q_5 = 0; }$
							}
							case 4 {
								host( "working/cond10.rl", 40 ) ${ q_6 = 0; }$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					_keys = offset( _foo_trans_keys, (cs<<1) );
					_inds = offset( _foo_indices, _foo_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 32 )
					{
						int _ic = cast(int)_foo_char_class[cast(int)( deref( data, p )) - 32];
						if ( _ic <= cast(int)deref( _foo_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _foo_trans_keys, _keys ) )
						_trans = cast(uint)deref( _foo_indices, _inds + cast(int)( _ic - cast(int)deref( _foo_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_foo_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_foo_index_defaults[cs];
					}
					
					_cond = cast(uint)_foo_trans_offsets[_trans];
					
					_cpc = 0;
					switch ( _foo_trans_cond_spaces[_trans] ) {
						
						case 0 {
							if ( host( "working/cond10.rl", 30 ) ={ q_4 >= 1 }= ) _cpc += 1;
						}
						case 1 {
							if ( host( "working/cond10.rl", 31 ) ={ q_4 < 25 }= ) _cpc += 1;
						}
						case 2 {
							if ( host( "working/cond10.rl", 36 ) ={ q_5 >= 1 }= ) _cpc += 1;
						}
						case 3 {
							if ( host( "working/cond10.rl", 37 ) ={ q_5 < 5 }= ) _cpc += 1;
						}
						case 4 {
							if ( host( "working/cond10.rl", 43 ) ={ q_6 < 100 }= ) _cpc += 1;
						}
						case 5 {
							if ( host( "working/cond10.rl", 30 ) ={ q_4 >= 1 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 36 ) ={ q_5 >= 1 }= ) _cpc += 2;
						}
						case 6 {
							if ( host( "working/cond10.rl", 30 ) ={ q_4 >= 1 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 37 ) ={ q_5 < 5 }= ) _cpc += 2;
						}
						case 7 {
							if ( host( "working/cond10.rl", 31 ) ={ q_4 < 25 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 43 ) ={ q_6 < 100 }= ) _cpc += 2;
						}
						case 8 {
							if ( host( "working/cond10.rl", 30 ) ={ q_4 >= 1 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 36 ) ={ q_5 >= 1 }= ) _cpc += 2;
							if ( host( "working/cond10.rl", 42 ) ={ q_6 >= 100 }= ) _cpc += 4;
						}
						case 9 {
							if ( host( "working/cond10.rl", 30 ) ={ q_4 >= 1 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 37 ) ={ q_5 < 5 }= ) _cpc += 2;
							if ( host( "working/cond10.rl", 43 ) ={ q_6 < 100 }= ) _cpc += 4;
						}
						case 10 {
							if ( host( "working/cond10.rl", 31 ) ={ q_4 < 25 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 36 ) ={ q_5 >= 1 }= ) _cpc += 2;
							if ( host( "working/cond10.rl", 43 ) ={ q_6 < 100 }= ) _cpc += 4;
						}
						case 11 {
							if ( host( "working/cond10.rl", 30 ) ={ q_4 >= 1 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 31 ) ={ q_4 < 25 }= ) _cpc += 2;
							if ( host( "working/cond10.rl", 36 ) ={ q_5 >= 1 }= ) _cpc += 4;
							if ( host( "working/cond10.rl", 43 ) ={ q_6 < 100 }= ) _cpc += 8;
						}
						case 12 {
							if ( host( "working/cond10.rl", 30 ) ={ q_4 >= 1 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 36 ) ={ q_5 >= 1 }= ) _cpc += 2;
							if ( host( "working/cond10.rl", 37 ) ={ q_5 < 5 }= ) _cpc += 4;
							if ( host( "working/cond10.rl", 43 ) ={ q_6 < 100 }= ) _cpc += 8;
						}
						case 13 {
							if ( host( "working/cond10.rl", 30 ) ={ q_4 >= 1 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 31 ) ={ q_4 < 25 }= ) _cpc += 2;
							if ( host( "working/cond10.rl", 36 ) ={ q_5 >= 1 }= ) _cpc += 4;
							if ( host( "working/cond10.rl", 42 ) ={ q_6 >= 100 }= ) _cpc += 8;
							if ( host( "working/cond10.rl", 43 ) ={ q_6 < 100 }= ) _cpc += 16;
						}
						case 14 {
							if ( host( "working/cond10.rl", 30 ) ={ q_4 >= 1 }= ) _cpc += 1;
							if ( host( "working/cond10.rl", 36 ) ={ q_5 >= 1 }= ) _cpc += 2;
							if ( host( "working/cond10.rl", 37 ) ={ q_5 < 5 }= ) _cpc += 4;
							if ( host( "working/cond10.rl", 42 ) ={ q_6 >= 100 }= ) _cpc += 8;
							if ( host( "working/cond10.rl", 43 ) ={ q_6 < 100 }= ) _cpc += 16;
						}
					}
					_cond += cast(uint)_cpc;
				}
				if ( _cont == 1 ) {
					cs = cast(int)_foo_cond_targs[_cond];
					
					if ( _foo_cond_actions[_cond] != 0 ) {
						_acts = offset( _foo_actions, _foo_cond_actions[_cond] );
						_nacts = cast(uint)deref( _foo_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _foo_actions, _acts ) )
							{
								case 1 {
									host( "working/cond10.rl", 29 ) ${ q_4++; }$
								}
								case 3 {
									host( "working/cond10.rl", 35 ) ${ q_5++; }$
								}
								case 5 {
									host( "working/cond10.rl", 41 ) ${ q_6++; }$
								}
								case 6 {
									host( "working/cond10.rl", 49 ) ${ match = 1; }$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/cond10.rl", 67 ) @{
		if ( match )
		cout << "  success" << endl;
		else
		cout << "  failure" << endl;
		cout << endl;
	}
	
	int main()
	{
		return 0;
	}
	
}@