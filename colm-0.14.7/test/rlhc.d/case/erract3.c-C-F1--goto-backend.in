host( "working/erract3.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#define IDENT_BUFLEN 256
	
	struct erract
	{
		int cs;
	};
	
	
	
}@
array char _erract_trans_keys( 0, 5 ) = { 0, 3, 0, 0, 0, 2, 0, 4, 0, 4, 0, 5, 0, 0, 0 };

array s8 _erract_char_class( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 };

array s8 _erract_index_offsets( 0, 24 ) = { 0, 4, 5, 8, 13, 18, 24, 0 };

array s8 _erract_indices( 0, 9 ) = { 1, 0, 0, 2, 4, 1, 0, 5, 1, 0, 0, 0, 6, 1, 0, 0, 0, 7, 1, 0, 0, 0, 0, 8, 9, 0 };

array s8 _erract_index_defaults( 0, 3 ) = { 0, 3, 0, 0, 0, 0, 0, 0 };

array s8 _erract_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _erract_cond_targs( 0, 6 ) = { 1, 1, 2, 1, 1, 3, 4, 5, 6, 0, 0 };

array s8 _erract_cond_actions( 0, 3 ) = { 1, 2, 0, 0, 3, 0, 0, 0, 0, 3, 0 };

array s8 _erract_eof_actions( 0, 1 ) = { 0, 0, 1, 1, 1, 1, 1, 0 };

array s8 _erract_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _erract_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int erract_start = 0;
value int erract_first_final = 0;
value int erract_error = -1;

value int erract_en_main = 0;

host( "working/erract3.rl", 26 ) @{
	
	void erract_init( struct erract *fsm )
	{
	}@
	{
		host( "-", 1 ) ={ fsm->cs}= = cast(int)erract_start;
	}
	host( "working/erract3.rl", 30 ) @{
	}
	
	void erract_execute( struct erract *fsm, const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		const char *eof = pe;
	}@
	{
		int _trans = 0;
		index char _keys;
		index s8 _inds;
		entry {
			if ( p == pe )
			goto _test_eof;
			label _resume {
				_keys = offset( _erract_trans_keys, (host( "-", 1 ) ={ fsm->cs}=<<1) );
				_inds = offset( _erract_indices, _erract_index_offsets[host( "-", 1 ) ={ fsm->cs}=] );
				
				if ( ( deref( data, p )) <= 111 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_erract_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _erract_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _erract_trans_keys, _keys ) )
					_trans = cast(int)deref( _erract_indices, _inds + cast(int)( _ic - cast(int)deref( _erract_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_erract_index_defaults[host( "-", 1 ) ={ fsm->cs}=];
				}
				else {
					_trans = cast(int)_erract_index_defaults[host( "-", 1 ) ={ fsm->cs}=];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				host( "-", 1 ) ={ fsm->cs}= = cast(int)_erract_cond_targs[_trans];
				
				if ( _erract_cond_actions[_trans] == 0 )
				goto _again;
				
				switch ( _erract_cond_actions[_trans] ) {
					case 1 {
						host( "working/erract3.rl", 18 ) ${ printf("hello fails\n");}$
					}
					case 3 {
						host( "working/erract3.rl", 20 ) ${printf("newline\n");}$
					}
					case 2 {
						host( "working/erract3.rl", 20 ) ${printf("newline\n");}$	host( "working/erract3.rl", 18 ) ${ printf("hello fails\n");}$
					}
				}
				
				
			}
			label _again {
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == eof )
				{
					switch ( _erract_eof_actions[host( "-", 1 ) ={ fsm->cs}=] ) {
						case 1 {
							host( "working/erract3.rl", 18 ) ${ printf("hello fails\n");}$
						}
					}
				}
				
			}
		}
	}
	host( "working/erract3.rl", 38 ) @{
	}
	
	int erract_finish( struct erract *fsm )
	{
		if ( fsm->cs == erract_error )
		return -1;
		else if ( fsm->cs >= erract_first_final )
		return 1;
		return 0;
	}
	
	#include <stdio.h>
	#include <string.h>
	
	struct erract fsm;
	
	void test( char *buf )
	{
		int len = strlen(buf);
		erract_init( &fsm );
		erract_execute( &fsm, buf, len );
		if ( erract_finish( &fsm ) > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test(
		"hello\n"
		"hello\n"
		"hello\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"hello there\n"
		);
		
		test(
		"hello\n"
		"hello\n"
		"he"	);
		
		test( "" );
		
		return 0;
	}
	
}@