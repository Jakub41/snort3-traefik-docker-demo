host( "working/atoi1_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	var neg  int ;
	var value  int ;
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array s8 _atoi_actions( 0, 4 ) = { 0, 1, 0, 1, 2, 2, 0, 1, 2, 0, 2, 2, 3, 4, 0 };

array s8 _atoi_key_offsets( 0, 9 ) = { 0, 0, 4, 6, 9, 0 };

array byte _atoi_trans_keys( 0, 57 ) = { u(43), u(45), u(48), u(57), u(48), u(57), u(10), u(48), u(57), u(0) };

array s8 _atoi_single_lengths( 0, 2 ) = { 0, 2, 0, 1, 0, 0 };

array s8 _atoi_range_lengths( 0, 1 ) = { 0, 1, 1, 1, 0, 0 };

array s8 _atoi_index_offsets( 0, 9 ) = { 0, 0, 4, 6, 9, 0 };

array s8 _atoi_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _atoi_trans_offsets( 0, 9 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };

array s8 _atoi_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _atoi_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _atoi_cond_targs( 0, 4 ) = { 2, 2, 3, 0, 3, 0, 4, 3, 0, 0, 0 };

array s8 _atoi_cond_actions( 0, 11 ) = { 1, 5, 8, 0, 3, 0, 11, 3, 0, 0, 0 };

array s8 _atoi_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _atoi_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int atoi_start = 1;
value int atoi_first_final = 4;
value int atoi_error = 0;

value int atoi_en_main = 1;

host( "working/atoi1_go.rl", 46 ) @{
	
	func prepare() {
		value = 0;
		neg = 0;
	}@
	{
		cs = cast(int)atoi_start;
	}
	host( "working/atoi1_go.rl", 51 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index byte _keys;
		index s8 _ckeys;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _atoi_trans_keys, _atoi_key_offsets[cs] );
				_trans = cast(uint)_atoi_index_offsets[cs];
				
				_klen = cast(int)_atoi_single_lengths[cs];
				if ( _klen > 0 ) {
					index byte _lower;
					index byte _mid;
					index byte _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _atoi_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _atoi_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_atoi_range_lengths[cs];
				if ( _klen > 0 ) {
					index byte _lower;
					index byte _mid;
					index byte _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _atoi_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _atoi_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _atoi_cond_keys, _atoi_trans_offsets[_trans] );
				_klen = cast(int)_atoi_trans_lengths[_trans];
				_cond = cast(uint)_atoi_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _atoi_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _atoi_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_atoi_cond_targs[_cond];
				
				if ( _atoi_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = offset( _atoi_actions, _atoi_cond_actions[_cond] );
				_nacts = cast(uint)deref( _atoi_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( deref( _atoi_actions, _acts ) )
					{
						case 0 {
							host( "working/atoi1_go.rl", 15 ) ${neg = 0;
								value = 0;
							}$
						}
						case 1 {
							host( "working/atoi1_go.rl", 19 ) ${neg = 1;
							}$
						}
						case 2 {
							host( "working/atoi1_go.rl", 22 ) ${value = value * 10 + ( int ) ( ={( deref( data, p ))}= - 48 )
								;
							}$
						}
						case 3 {
							host( "working/atoi1_go.rl", 26 ) ${if ( neg != 0 ) {
									value = -1 * value;
									
								}
							}$
						}
						case 4 {
							host( "working/atoi1_go.rl", 31 ) ${fmt.Print( value );fmt.Print( "\n" );}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/atoi1_go.rl", 57 ) @{
	}
	func finish() {
		if cs >= atoi_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"1\n",
		"12\n",
		"222222\n",
		"+2123\n",
		"213 3213\n",
		"-12321\n",
		"--123\n",
		"-99\n",
		" -3000\n",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@