package main
import "fmt"

var i  int ;
var c  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _foo_trans_keys [] byte  = [] byte  { 1, 0, 2, 2, 2, 2, 0, 2, 1, 0, 0 }
var _foo_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0  }
var _foo_index_offsets [] int8  = [] int8  { 0, 0, 1, 2, 5, 0  }
var _foo_indices [] int8  = [] int8  { 0, 2, 3, 1, 4, 0  }
var _foo_index_defaults [] int8  = [] int8  { 0, 1, 1, 1, 1, 0  }
var _foo_trans_cond_spaces [] int8  = [] int8  { -1, -1, 0, 0, 0, 0  }
var _foo_trans_offsets [] int8  = [] int8  { 0, 1, 2, 4, 6, 0  }
var _foo_cond_targs [] int8  = [] int8  { 2, 0, 3, 2, 4, 0, 0, 3, 0  }
var _foo_cond_actions [] int8  = [] int8  { 1, 0, 1, 2, 0, 0, 0, 2, 0  }
var _foo_nfa_targs [] int8  = [] int8  { 0, 0  }
var _foo_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0  }
var _foo_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _foo_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var foo_start  int  = 1
var foo_first_final  int  = 4
var foo_error  int  = 0
var foo_en_main  int  = 1
func prepare() {

	{
		cs = int(foo_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		var  _cpc int 
		var  _trans  uint   = 0
		var  _have  uint   = 0
		var  _cont  uint   = 1
		var  _cond  uint   = 0
		var  _keys int
		var  _inds int
		for _cont == 1  {
			{
			
				if cs == 0  {
					_cont = 0;
					
				}
				_have = 0;
				if p == pe  {
					{
						if _have == 0  {
							_cont = 0;
							
						}
					}
					
				}
				if _cont == 1  {
					{
						if _have == 0  {
							{
								_keys = int((cs<<1) );
								_inds = int(_foo_index_offsets[cs] );
								switch {
									case ( data[p ]) <= 57 && ( data[p ]) >= 10 :
									{
										var  _ic  int   = int(_foo_char_class[int(( data[p ]) )- 10])
										switch {
											case _ic <= int(_foo_trans_keys[_keys+1 ])&& _ic >= int(_foo_trans_keys[_keys ]):
											_trans = uint(_foo_indices[_inds + int(( _ic - int(_foo_trans_keys[_keys ]))  )]);
											
											default:
											_trans = uint(_foo_index_defaults[cs]);
											
										}
									}
									
									default:
									{
										_trans = uint(_foo_index_defaults[cs]);
									}
									
									
								}
								_cond = uint(_foo_trans_offsets[_trans]);
								_cpc = 0;
								switch _foo_trans_cond_spaces[_trans]  {
									case 0 :
									if (i > 0) {
										_cpc += 1;
										
									}
									
									break;
									
								}
								_cond += uint(_cpc);
							}
							
						}
						if _cont == 1  {
							{
								cs = int(_foo_cond_targs[_cond]);
								switch _foo_cond_actions[_cond]  {
									case 2 :
									{i = i - 1;
										c = ( int ) ( (( data[p ])) )
										;
										fmt.Print( "item: " );fmt.Print( c );fmt.Print( "\n" );}
									
									break;
									case 1 :
									{i = ( int ) ( (( data[p ])) - 48 )
										;
										fmt.Print( "count: " );fmt.Print( i );fmt.Print( "\n" );}
									
									break;
									
								}
								if cs == 0  {
									_cont = 0;
									
								}
								if _cont == 1  {
									p += 1;
									
								}
							}
						}
					}
					
				}
			}
			
		}
	}
}
func finish() {
	if cs >= foo_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"00\n",
	"019\n",
	"190\n",
	"1719\n",
	"1040000\n",
	"104000a\n",
	"104000\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
