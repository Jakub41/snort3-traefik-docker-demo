#include <stddef.h>
#include <stdint.h>
#include <stdlib.h> 
#include <stdbool.h>
#include <string.h>
#include <stdio.h>

const char s[4096];

struct nfa_stack
{
	void *data;
	unsigned long sz;
};

struct nfa_bp_rec
{
	long state;
	const char *p;
	long popTrans;
	long q_2;
};

static const char  _genrep_actions [] = { 0, 0, 1, 0, 1, 1, 1, 6, 1, 0, 2, 1, 3, 2, 1, 4, 2, 1, 5, 3, 1, 8, 2, 0 ,  };
static const unsigned char  _genrep_trans_keys [] = { 1u, 0u, 3u, 3u, 2u, 2u, 4u, 4u, 4u, 4u, 5u, 5u, 1u, 0u, 0u, 0u, 1u, 0u, 1u, 0u, 7u, 7u, 3u, 3u, 2u, 2u, 6u, 6u, 2u, 2u, 1u, 0u, 1u, 0u, 0u,  };
static const char  _genrep_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 1, 1, 6, 1, 7, 0 ,  };
static const char  _genrep_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 8, 9, 10, 11, 11, 0 ,  };
static const char  _genrep_indices [] = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 ,  };
static const char  _genrep_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 0 ,  };
static const char  _genrep_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _genrep_cond_targs [] = { 2, 0, 3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 0 ,  };
static const char  _genrep_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0 ,  };
static const char  _genrep_nfa_targs [] = { 0, 1, 7, 3, 10, 7, 9, 0 ,  };
static const char  _genrep_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _genrep_nfa_push_actions [] = { 0, 0, 1, 0, 1, 1, 1, 0 ,  };
static const char  _genrep_nfa_pop_trans [] = { 0, 0, 4, 0, 8, 7, 6, 0 ,  };
static const int  genrep_start  = 1;
static const int  genrep_first_final  = 16;
static const int  genrep_error  = 0;
static const int  genrep_en_main  = 1;
int test( const char *p )
{
	int len = strlen( p ) + 1;
	const char *pe = p + len;
	int cs;
	
	struct nfa_bp_rec *nfa_bp = (struct nfa_bp_rec*) s;
	long nfa_len = 0;
	long nfa_count = 0;
	
	long q_2 = 0;
	
	printf( "testing: %s\n", p );
	
	
	{
		cs = ( int ) genrep_start;
		nfa_len = 0;
	}
	
	{
		unsigned int _nfa_cont = 1;
		unsigned int _nfa_repeat = 1;
		while ( _nfa_cont != 0  )
		{
			unsigned int _trans = 0;
			unsigned int _have = 0;
			unsigned int _cont = 1;
			const char  *_acts;
			unsigned int _nacts;
			const unsigned char  *_keys;
			const char  *_inds;
			while ( _cont == 1  )
			{
			
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( _have == 0  )
					_cont = 0;
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						if ( _genrep_nfa_offsets[cs] )
						{
							int alt = 0; 
							int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[cs]];
							while ( alt < new_recs  )
							{ 
								nfa_bp[nfa_len].state 
								= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[cs]+ 1 + alt];
								nfa_bp[nfa_len].p 
								= p;
								nfa_bp[nfa_len].popTrans 
								= ( long ) _genrep_nfa_offsets[cs]+ 1 + alt;
								switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[cs]+ 1 + alt] ) {
									case 1 :
									{
										nfa_bp[nfa_len].q_2 = q_2;
										
									}
									
									break;
									
								}
								nfa_len += 1;
								alt += 1;
							}
							
						}
						
						_keys = _genrep_trans_keys + (cs<<1);
						_inds = _genrep_indices + _genrep_index_offsets[cs];
						if ( ((*( p  ))
						)<= 116 && ((*( p  ))
						)>= 32  )
						{
							int _ic = ( int ) _genrep_char_class[( int ) ((*( p  ))
							)- 32];
							if ( _ic <= ( int ) (*( _keys+1  ))
							&& _ic >= ( int ) (*( _keys  ))
							)
							_trans = ( unsigned int  ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
							) ))
							;
							
							else
							_trans = ( unsigned int  ) _genrep_index_defaults[cs];
							
						}
						
						else
						{
							_trans = ( unsigned int  ) _genrep_index_defaults[cs];
						}
						
						
					}
					
					if ( _cont == 1  )
					{
						cs = ( int ) _genrep_cond_targs[_trans];
						if ( _genrep_cond_actions[_trans]!= 0  )
						{
							_acts = _genrep_actions + _genrep_cond_actions[_trans];
							_nacts = ( unsigned int  ) (*( _acts  ))
							;
							_acts += 1;
							while ( _nacts > 0  )
							{
								switch ( (*( _acts  ))
								) {
									case 0 :
									{
										printf( "------ MATCH\n" );
										
									}
									
									break;
									
								}
								_nacts -= 1;
								_acts += 1;
							}
							
						}
						
						
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
					}
				}
				
			}
			
			_nfa_repeat = 1;
			while ( _nfa_repeat  )
			{
				_nfa_repeat = 0;
				if ( nfa_len > 0  )
				{
					int _pop_test = 1;
					nfa_count += 1;
					nfa_len -= 1;
					p = nfa_bp[nfa_len].p;
					switch ( _genrep_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
						case 6 :
						_pop_test = (({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) );
						if ( !_pop_test  )
						break;
						
						_pop_test = (({ 1; })
						);
						
						break;
						case 7 :
						_pop_test = (({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) );
						if ( !_pop_test  )
						break;
						
						_pop_test = (({ ++q_2 < 2; })
						);
						
						break;
						case 8 :
						_pop_test = (({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) );
						if ( !_pop_test  )
						break;
						
						_pop_test = (({ ++q_2 >= 2; })
						);
						
						break;
						case 4 :
						_pop_test = (({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) );
						if ( !_pop_test  )
						break;
						
						{
							printf( "  -> leaving\n" );
							
						}
						
						_pop_test = (({  q_2 = 0; 1; })
						);
						
						break;
						
					}
					if ( _pop_test  )
					{
						cs = nfa_bp[nfa_len].state;
						_nfa_cont = 1;
						_nfa_repeat = 0;
					}
					
					else
					{
						_nfa_cont = 0;
						_nfa_repeat = 1;
					}
					
				}
				
				else
				{
					_nfa_cont = 0;
					_nfa_repeat = 0;
				}
				
			}
			
		}
		
	}
	return 0;
}

int main()
{
	test( "hellothere" );
	test( "hello there" );
	test( "hello  there" );
	test( "hello   there" );
	test( "hello    there" );
	return 0;
}

