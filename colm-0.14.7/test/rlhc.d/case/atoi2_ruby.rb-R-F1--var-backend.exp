#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_state_chart_trans_keys 
	private :_state_chart_trans_keys, :_state_chart_trans_keys=
end
self._state_chart_trans_keys = [
1, 0, 4, 4, 0, 4, 2, 4, 0 , 
]

class << self
	attr_accessor :_state_chart_char_class 
	private :_state_chart_char_class, :_state_chart_char_class=
end
self._state_chart_char_class = [
0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 , 
]

class << self
	attr_accessor :_state_chart_index_offsets 
	private :_state_chart_index_offsets, :_state_chart_index_offsets=
end
self._state_chart_index_offsets = [
0, 0, 1, 6, 0 , 
]

class << self
	attr_accessor :_state_chart_indices 
	private :_state_chart_indices, :_state_chart_indices=
end
self._state_chart_indices = [
0, 2, 1, 1, 1, 0, 3, 4, 5, 0 , 
]

class << self
	attr_accessor :_state_chart_index_defaults 
	private :_state_chart_index_defaults, :_state_chart_index_defaults=
end
self._state_chart_index_defaults = [
0, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_state_chart_trans_cond_spaces 
	private :_state_chart_trans_cond_spaces, :_state_chart_trans_cond_spaces=
end
self._state_chart_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_state_chart_cond_targs 
	private :_state_chart_cond_targs, :_state_chart_cond_targs=
end
self._state_chart_cond_targs = [
2, 0, 3, 1, 1, 2, 0 , 
]

class << self
	attr_accessor :_state_chart_cond_actions 
	private :_state_chart_cond_actions, :_state_chart_cond_actions=
end
self._state_chart_cond_actions = [
1, 0, 2, 3, 4, 5, 0 , 
]

class << self
	attr_accessor :_state_chart_nfa_targs 
	private :_state_chart_nfa_targs, :_state_chart_nfa_targs=
end
self._state_chart_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_state_chart_nfa_offsets 
	private :_state_chart_nfa_offsets, :_state_chart_nfa_offsets=
end
self._state_chart_nfa_offsets = [
0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_state_chart_nfa_push_actions 
	private :_state_chart_nfa_push_actions, :_state_chart_nfa_push_actions=
end
self._state_chart_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_state_chart_nfa_pop_trans 
	private :_state_chart_nfa_pop_trans, :_state_chart_nfa_pop_trans=
end
self._state_chart_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :state_chart_start 
end
self.state_chart_start  = 3;

class << self
	attr_accessor :state_chart_first_final 
end
self.state_chart_first_final  = 3;

class << self
	attr_accessor :state_chart_error 
end
self.state_chart_error  = 0;

class << self
	attr_accessor :state_chart_en_main 
end
self.state_chart_en_main  = 3;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	neg = 1
	value = 1
	value = 0;
	neg = 0;
	begin
		cs = state_chart_start;
		
	end
	begin
		_trans = 0;
		_have = 0;
		_cont = 1;
		_keys = 0;
		_inds = 0;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( _have == 0  )
							_cont = 0;
							
						end
						
					end
					
				end
				if ( _cont == 1  )
					begin
						if ( _have == 0  )
							begin
								_keys = (cs<<1) ;
								_inds = _state_chart_index_offsets[cs] ;
								if ( ( data[p ].ord) <= 57 && ( data[p ].ord) >= 10  )
									begin
										_ic = _state_chart_char_class[( data[p ].ord) - 10];
										if ( _ic <= _state_chart_trans_keys[_keys+1 ]&& _ic >= _state_chart_trans_keys[_keys ] )
											_trans = _state_chart_indices[_inds + ( _ic - _state_chart_trans_keys[_keys ])  ];
											
											else
											_trans = _state_chart_index_defaults[cs];
											
										end
										
									end
									
									else
									begin
										_trans = _state_chart_index_defaults[cs];
										
									end
									
								end
								
							end
							
						end
						if ( _cont == 1  )
							begin
								cs = _state_chart_cond_targs[_trans];
								case  _state_chart_cond_actions[_trans]  
								when -2 then
								begin
								end
								when 3  then
								begin
									begin
										neg = 0;
										value = 0;
										
									end
									
								end
								when 1  then
								begin
									begin
										value = value * 10 + ( ( data[p ].ord) - 48 )
										;
										
									end
									
								end
								when 4  then
								begin
									begin
										neg = 0;
										value = 0;
										
									end
									begin
										neg = 1;
										
									end
									
								end
								when 5  then
								begin
									begin
										neg = 0;
										value = 0;
										
									end
									begin
										value = value * 10 + ( ( data[p ].ord) - 48 )
										;
										
									end
									
								end
								when 2  then
								begin
									begin
										if ( neg != 0 )
											value = -1 * value;
											
										end
										
									end
									begin
										print( value );
										print( "\n" );
										
									end
									
									
								end
							end
							if ( cs == 0  )
								_cont = 0;
								
							end
							if ( _cont == 1  )
								p += 1;
								
							end
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end
if cs >= state_chart_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"1\n",
	"12\n",
	"222222\n",
	"+2123\n",
	"213 3213\n",
	"-12321\n",
	"--123\n",
	"-99\n",
	" -3000\n",
	]
	
	inplen = 9
	
	inp.each { |str| run_machine(str) }
	
