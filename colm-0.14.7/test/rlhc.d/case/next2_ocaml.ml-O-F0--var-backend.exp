(*
* @LANG: ocaml
* @GENERATED: true
*)

let target = ref 0
let last = ref 0






let _next2_actions : int array = [|
0; 1; 0; 1; 1; 1; 2; 1; 3; 1; 4; 1; 5; 0 ; 
|]
let _next2_trans_keys : int array = [|
1; 0; 15; 15; 13; 13; 8; 8; 13; 13; 11; 11; 6; 6; 5; 5; 9; 9; 8; 8; 6; 6; 12; 12; 14; 14; 9; 9; 12; 12; 7; 7; 10; 10; 6; 6; 6; 6; 0; 4; 1; 0; 1; 0; 1; 0; 1; 0; 0 ; 
|]
let _next2_char_class : int array = [|
0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 3; 4; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 5; 6; 1; 1; 7; 1; 1; 1; 1; 1; 8; 9; 1; 1; 10; 11; 12; 13; 1; 14; 15; 0 ; 
|]
let _next2_index_offsets : int array = [|
0; 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 23; 23; 23; 23; 0 ; 
|]
let _next2_indices : int array = [|
0; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 0; 1; 19; 20; 21; 0 ; 
|]
let _next2_index_defaults : int array = [|
0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0 ; 
|]
let _next2_trans_cond_spaces : int array = [|
-1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; 0 ; 
|]
let _next2_cond_targs : int array = [|
19; 0; 3; 4; 5; 6; 7; 20; 9; 10; 21; 12; 13; 22; 15; 16; 17; 18; 23; 19; 19; 1; 0 ; 
|]
let _next2_cond_actions : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 3; 0; 0; 0; 0; 5; 7; 9; 11; 0 ; 
|]
let _next2_nfa_targs : int array = [|
0; 0 ; 
|]
let _next2_nfa_offsets : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _next2_nfa_push_actions : int array = [|
0; 0 ; 
|]
let _next2_nfa_pop_trans : int array = [|
0; 0 ; 
|]
let next2_start  : int  = 19
let next2_first_final  : int  = 19
let next2_error  : int  = 0
let next2_en_unused  : int  = 2
let next2_en_one  : int  = 8
let next2_en_two  : int  = 11
let next2_en_three  : int  = 14
let next2_en_main  : int  = 19
let exec data = 
let buffer = String.create(1024) in 
let blen :int ref = ref 0 in
let cs = ref 0 in
let p = ref 0 in
let pe = ref (String.length data) in
begin
	cs  := next2_start;
	
end;
begin
	let _trans  : int  ref = ref 0 in
	let _have  : int  ref = ref 0 in
	let _cont  : int  ref = ref 1 in
	let _acts : int ref = ref 0 in
	let _nacts : int  ref = ref 0 in
	let _keys : int ref = ref 0 in
	let _inds : int ref = ref 0 in
	while _cont.contents= 1  do
	begin
		if cs.contents= 0  then
		begin
			_cont  := 0;
			
		end
		;_have  := 0;
		if p.contents= pe.contents then
		begin
			begin
				if _have.contents= 0  then
				begin
					_cont  := 0;
					
				end
				;
			end;
			
		end
		;if _cont.contents= 1  then
		begin
			begin
				if _have.contents= 0  then
				begin
					begin
						_keys  := ( cs.contents lsl 1 );
						_inds  := _next2_index_offsets.(cs.contents);
						if ( Char.code data.[p.contents] )<= 120 && ( Char.code data.[p.contents] )>= 10  then
						begin
							begin
								let _ic  : int  ref = ref _next2_char_class.(( Char.code data.[p.contents] )- 10) in
								if _ic.contents<= _next2_trans_keys.( _keys.contents+1  )&& _ic.contents>= _next2_trans_keys.( _keys.contents ) then
								begin
									_trans  := _next2_indices.( _inds.contents+ ( _ic.contents- _next2_trans_keys.( _keys.contents ) ) );
									
								end
								else
								begin
									_trans  := _next2_index_defaults.(cs.contents);
									
								end
								;
							end;
							
						end
						else
						begin
							begin
								_trans  := _next2_index_defaults.(cs.contents);
								
							end;
							
						end
						;
					end;
					
				end
				;if _cont.contents= 1  then
				begin
					begin
						cs  := _next2_cond_targs.(_trans.contents);
						if _next2_cond_actions.(_trans.contents)!= 0  then
						begin
							begin
								_acts  := _next2_cond_actions.(_trans.contents);
								_nacts  := _next2_actions.( _acts.contents );
								_acts  := _acts.contents + 1;
								while _nacts.contents> 0  do
								begin
									if _next2_actions.( _acts.contents ) = 0  then
									begin
										begin
											print_string( "one\n" );
											target := 19;
											begin
												cs  := (target.contents);
												
											end;
											
											
										end;
										
									end
									else if _next2_actions.( _acts.contents ) = 1  then
									begin
										begin
											print_string( "two\n" );
											target := 19;
											begin
												cs  := (target.contents);
												
											end;
											
											
										end;
										
									end
									else if _next2_actions.( _acts.contents ) = 2  then
									begin
										begin
											print_string( "three\n" );
											target := 19;
											begin
												cs  := (target.contents);
												
											end;
											
											
										end;
										
									end
									else if _next2_actions.( _acts.contents ) = 3  then
									begin
										begin
											target := 8;
											begin
												cs  := (target.contents);
												
											end;
											
											last := 1;
											
										end;
										
									end
									else if _next2_actions.( _acts.contents ) = 4  then
									begin
										begin
											target := 11;
											begin
												cs  := (target.contents);
												
											end;
											
											last := 2;
											
										end;
										
									end
									else if _next2_actions.( _acts.contents ) = 5  then
									begin
										begin
											if last .contents == 2  then
											begin
												target := 14;
												begin
													cs  := (target.contents);
													
												end;
												
												
											end 
											;
											last := 3;
											
										end;
										
									end
									;
									_nacts  := _nacts.contents - 1;
									_acts  := _acts.contents + 1;
									
								end;
								
								done;
								
							end;
							
						end
						;if cs.contents= 0  then
						begin
							_cont  := 0;
							
						end
						;if _cont.contents= 1  then
						begin
							p  := p.contents + 1;
							
						end
						;
					end;
					
				end
				;
			end;
			
		end
		;
	end;
	
	done;
	
end;
if !cs >= next2_first_final then
print_string "ACCEPT\n"
else
print_string "FAIL\n"
;;

let () =
exec "1one3x2two3three\n";
()
;;

