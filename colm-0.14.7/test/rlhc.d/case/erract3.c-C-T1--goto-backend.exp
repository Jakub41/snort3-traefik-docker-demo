#include <stdio.h>
#define IDENT_BUFLEN 256

struct erract
{
	int cs;
};



static const char  _erract_key_offsets [] = { 0, 2, 3, 5, 7, 9, 11, 0 ,  };
static const char  _erract_trans_keys [] = { 10, 104, 10, 10, 101, 10, 108, 10, 108, 10, 111, 10, 0 ,  };
static const char  _erract_single_lengths [] = { 2, 1, 2, 2, 2, 2, 1, 0 ,  };
static const char  _erract_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _erract_index_offsets [] = { 0, 3, 5, 8, 11, 14, 17, 0 ,  };
static const char  _erract_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _erract_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 0 ,  };
static const char  _erract_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _erract_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _erract_cond_targs [] = { 1, 2, 1, 1, 1, 1, 3, 1, 1, 4, 1, 1, 5, 1, 1, 6, 1, 0, 1, 0 ,  };
static const char  _erract_cond_actions [] = { 2, 0, 1, 3, 0, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 3, 1, 0 ,  };
static const char  _erract_eof_actions [] = { 0, 0, 1, 1, 1, 1, 1, 0 ,  };
static const char  _erract_nfa_targs [] = { 0, 0 ,  };
static const char  _erract_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _erract_nfa_push_actions [] = { 0, 0 ,  };
static const char  _erract_nfa_pop_trans [] = { 0, 0 ,  };
static const int  erract_start  = 0;
static const int  erract_first_final  = 0;
static const int  erract_error  = -1;
static const int  erract_en_main  = 0;
void erract_init( struct erract *fsm )
{

	{
		(fsm->cs) = ( int ) erract_start;
	}
}

void erract_execute( struct erract *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	const char *eof = pe;
	
	{
		int _klen;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		if ( p == pe  )
		goto _test_eof;
		
		_resume :
		_keys = _erract_trans_keys + _erract_key_offsets[(fsm->cs)];
		_trans = ( unsigned int  ) _erract_index_offsets[(fsm->cs)];
		_klen = ( int ) _erract_single_lengths[(fsm->cs)];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _erract_range_lengths[(fsm->cs)];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _erract_cond_keys + _erract_trans_offsets[_trans];
		_klen = ( int ) _erract_trans_lengths[_trans];
		_cond = ( unsigned int  ) _erract_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			(fsm->cs) = -1;
			goto _again;
		}
		
		_match_cond :
		(fsm->cs) = ( int ) _erract_cond_targs[_cond];
		if ( _erract_cond_actions[_cond]== 0  )
		goto _again;
		
		
		switch ( _erract_cond_actions[_cond] ) {
			case 1 :
			{
				printf("hello fails\n");
			}
			
			break;
			case 3 :
			{
				printf("newline\n");
			}
			
			break;
			case 2 :
			{
				printf("newline\n");
			}
			{
				printf("hello fails\n");
			}
			
			break;
			
		}
		
		_again :
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			switch ( _erract_eof_actions[(fsm->cs)] ) {
				case 1 :
				{
					printf("hello fails\n");
				}
				
				break;
				
			}
		}
		
		
		
	}
}

int erract_finish( struct erract *fsm )
{
	if ( fsm->cs == erract_error )
	return -1;
	else if ( fsm->cs >= erract_first_final )
	return 1;
	return 0;
}

#include <stdio.h>
#include <string.h>

struct erract fsm;

void test( char *buf )
{
	int len = strlen(buf);
	erract_init( &fsm );
	erract_execute( &fsm, buf, len );
	if ( erract_finish( &fsm ) > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}

int main()
{
	test(
	"hello\n"
	"hello\n"
	"hello\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"hello there\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"he"	);
	
	test( "" );
	
	return 0;
}

