host( "working/cond5.rl", 1 ) @{/* 
	* @@LANG: c++
	*/
	
	#include <iostream>
	#include <string.h>
	using std::cout;
	using std::endl;
	
}@
array s8 _foo_actions( 0, 4 ) = { 0, 2, 0, 4, 2, 1, 4, 2, 2, 4, 2, 3, 4, 3, 0, 3, 4, 3, 1, 2, 4, 0 };

array char _foo_trans_keys( 0, 2 ) = { 1, 0, 0, 2, 0, 2, 0, 2, 1, 0, 0 };

array s8 _foo_char_class( 0, 2 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 };

array s8 _foo_index_offsets( 0, 9 ) = { 0, 0, 3, 6, 9, 0 };

array s8 _foo_indices( 0, 6 ) = { 0, 1, 2, 3, 1, 4, 5, 1, 6, 0 };

array s8 _foo_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 0 };

array s8 _foo_trans_cond_spaces( -1, 2 ) = { -1, -1, 2, -1, 0, -1, 1, 0 };

array s8 _foo_trans_offsets( 0, 10 ) = { 0, 1, 2, 6, 7, 9, 10, 0 };

array s8 _foo_cond_targs( 0, 4 ) = { 4, 0, 0, 2, 3, 1, 4, 0, 2, 4, 0, 3, 0 };

array s8 _foo_cond_actions( 0, 17 ) = { 17, 0, 0, 1, 10, 13, 4, 0, 1, 7, 0, 10, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 4;

value int foo_en_main = 1;

host( "working/cond5.rl", 13 ) @{
	
	void test( const char *str )
	{
		int cs = foo_start;
		int c = 0;
		const char *p = str;
		const char *pe = str + strlen( str );
		char last = '0';
		
		cout << "run:";
	}@
	{
		int _trans = 0;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _foo_trans_keys, (cs<<1) );
				_inds = offset( _foo_indices, _foo_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 57 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_foo_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _foo_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _foo_trans_keys, _keys ) )
					_trans = cast(int)deref( _foo_indices, _inds + cast(int)( _ic - cast(int)deref( _foo_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_foo_index_defaults[cs];
				}
				else {
					_trans = cast(int)_foo_index_defaults[cs];
				}
				
				_cond = cast(uint)_foo_trans_offsets[_trans];
				
				_cpc = 0;
				switch ( _foo_trans_cond_spaces[_trans] ) {
					
					case 0 {
						if ( host( "working/cond5.rl", 28 ) ={c++ < 5}= ) _cpc += 1;
					}
					case 1 {
						if ( host( "working/cond5.rl", 32 ) ={ *p == last+1 }= ) _cpc += 1;
					}
					case 2 {
						if ( host( "working/cond5.rl", 28 ) ={c++ < 5}= ) _cpc += 1;
						if ( host( "working/cond5.rl", 32 ) ={ *p == last+1 }= ) _cpc += 2;
					}
				}
				_cond += cast(uint)_cpc;
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_foo_cond_targs[_cond];
				
				if ( _foo_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = offset( _foo_actions, _foo_cond_actions[_cond] );
				_nacts = cast(uint)deref( _foo_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _foo_actions, _acts ) )
					{
						case 0 {
							host( "working/cond5.rl", 25 ) ${ cout << " d1"; }$
						}
						case 1 {
							host( "working/cond5.rl", 26 ) ${ cout << " see_five"; }$
						}
						case 2 {
							host( "working/cond5.rl", 30 ) ${ cout << " in_sequence"; }$
						}
						case 3 {
							host( "working/cond5.rl", 31 ) ${ last = *p; cout << " d2"; }$
						}
						case 4 {
							host( "working/cond5.rl", 34 ) ${cout << " |";}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/cond5.rl", 37 ) @{
		if ( cs < foo_first_final )
		cout << " failure";
		cout << endl;
	}
	
	int main()
	{
		test( "123456789012\n" );  // fails both
		test( "123456789\n" );  // fails five
		test( "1234\n" );  // fails five
		test( "13245\n" );  // fails sequence
		test( "12345\n" );  // succeeds in both
		return 0;
	}
	
}@