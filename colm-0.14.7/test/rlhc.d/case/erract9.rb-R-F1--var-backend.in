host( "working/erract9.rl", 1 ) @{#
	# @@LANG: ruby
	#
	# Test the host language scanning for ruby.
	#
	
	
	
}@
array char _erract9_trans_keys( 0, 3 ) = { 1, 0, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0 };

array s8 _erract9_char_class( 0, 3 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 0 };

array s8 _erract9_index_offsets( 0, 5 ) = { 0, 0, 1, 2, 3, 4, 5, 0 };

array s8 _erract9_indices( 0, 5 ) = { 1, 2, 3, 4, 5, 0 };

array s8 _erract9_index_defaults( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract9_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, 0 };

array s8 _erract9_cond_targs( 0, 6 ) = { 0, 2, 3, 4, 5, 6, 0 };

array s8 _erract9_cond_actions( 0, 3 ) = { 2, 3, 3, 3, 3, 3, 0 };

array s8 _erract9_to_state_actions( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 0 };

array s8 _erract9_eof_actions( 0, 2 ) = { 0, 2, 2, 2, 2, 2, 0, 0 };

array s8 _erract9_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _erract9_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _erract9_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _erract9_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int erract9_start = 1;
value int erract9_first_final = 6;
value int erract9_error = 0;

value int erract9_en_main = 1;

host( "working/erract9.rl", 18 ) @{
	
	def run_machine( data )
	p = 0;
	pe = data.length
	cs = 0
	
}@
{
	cs = cast(int)erract9_start;
}
host( "working/erract9.rl", 25 ) @{
}@
{
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	index char _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( p == eof )
			{
				if ( _have == 0 ) {
					switch ( _erract9_eof_actions[cs] ) {
						case 2 {
							host( "working/erract9.rl", 11 ) ${ print("err: ", data[p..p], "\n"); }$
						}
					}
				}
			}
			
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _erract9_trans_keys, (cs<<1) );
				_inds = offset( _erract9_indices, _erract9_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 104 && ( deref( data, p )) >= 88 )
				{
					int _ic = cast(int)_erract9_char_class[cast(int)( deref( data, p )) - 88];
					if ( _ic <= cast(int)deref( _erract9_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _erract9_trans_keys, _keys ) )
					_trans = cast(uint)deref( _erract9_indices, _inds + cast(int)( _ic - cast(int)deref( _erract9_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_erract9_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_erract9_index_defaults[cs];
				}
				
			}
			if ( _cont == 1 ) {
				cs = cast(int)_erract9_cond_targs[_trans];
				
				switch ( _erract9_cond_actions[_trans] ) {
					case 3 {
						host( "working/erract9.rl", 10 ) ${ print("char: ", data[p..p], "\n"); }$
					}
					case 2 {
						host( "working/erract9.rl", 11 ) ${ print("err: ", data[p..p], "\n"); }$
					}
				}
				
				switch ( _erract9_to_state_actions[cs] ) {
					case 1 {
						host( "working/erract9.rl", 12 ) ${ print("to state: " , data[p..p], "\n"); }$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/erract9.rl", 26 ) @{
	
	print("rest: " , data[p..p+2], "\n")
	end
	
	inp = [
	"hello\n",
	]
	
	inp.each { |str| run_machine(str) }
	
}@