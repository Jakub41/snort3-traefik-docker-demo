host( "working/lmgoto.rl", 1 ) @{/*
	* @@LANG: c++
	*/
	
	#include <iostream>
	#include <string.h>
	using namespace std;
	
	#define TK_Dlit 192
	#define TK_Slit 193
	#define TK_Float 194
	#define TK_Id 195
	#define TK_NameSep 197
	#define TK_Arrow 211
	#define TK_PlusPlus 212
	#define TK_MinusMinus 213
	#define TK_ArrowStar 214
	#define TK_DotStar 215
	#define TK_ShiftLeft 216
	#define TK_ShiftRight 217
	#define TK_IntegerDecimal 218
	#define TK_IntegerOctal 219
	#define TK_IntegerHex 220
	#define TK_EqualsEquals 223
	#define TK_NotEquals 224
	#define TK_AndAnd 225
	#define TK_OrOr 226
	#define TK_MultAssign 227
	#define TK_DivAssign 228
	#define TK_PercentAssign 229
	#define TK_PlusAssign 230
	#define TK_MinusAssign 231
	#define TK_AmpAssign 232
	#define TK_CaretAssign 233
	#define TK_BarAssign 234
	#define TK_DotDotDot 240
	#define TK_Whitespace 241
	#define TK_Comment 242
	
	struct Scanner
	{
		int cs, act;
		const char *ts, *te;
		bool isCxx;
		
		void token( int tok );
		void run( const char *buf );
	};
	
	
	
	
}@
array s8 _Scanner_actions( 0, 49 ) = { 0, 1, 0, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 1, 45, 1, 46, 1, 47, 1, 48, 1, 49, 2, 0, 1, 2, 3, 8, 2, 3, 9, 2, 3, 10, 2, 3, 11, 0 };

array char _Scanner_trans_keys( 0, 28 ) = { 1, 0, 0, 24, 1, 0, 0, 24, 1, 0, 11, 11, 9, 14, 13, 14, 13, 20, 2, 28, 2, 28, 16, 16, 16, 16, 6, 16, 16, 16, 9, 16, 10, 17, 8, 8, 8, 14, 13, 26, 13, 26, 8, 16, 11, 27, 11, 26, 22, 26, 22, 26, 22, 26, 13, 26, 22, 26, 11, 26, 15, 15, 16, 16, 13, 27, 3, 27, 16, 16, 16, 28, 0, 8, 12, 12, 0 };

array s8 _Scanner_char_class( 0, 28 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 4, 5, 6, 7, 4, 4, 8, 9, 4, 10, 11, 12, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 4, 4, 16, 17, 4, 4, 18, 18, 18, 18, 19, 20, 21, 21, 21, 21, 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 23, 21, 21, 21, 21, 21, 4, 24, 4, 25, 21, 4, 18, 18, 18, 18, 19, 20, 21, 21, 21, 21, 21, 26, 21, 21, 21, 21, 21, 21, 21, 21, 23, 21, 21, 27, 21, 21, 4, 28, 4, 4, 0 };

array s16 _Scanner_index_offsets( 0, 344 ) = { 0, 0, 25, 25, 50, 50, 51, 57, 59, 67, 94, 121, 122, 123, 134, 135, 143, 151, 152, 159, 173, 187, 196, 213, 229, 234, 239, 244, 258, 263, 279, 280, 281, 296, 321, 322, 335, 344, 0 };

array s8 _Scanner_indices( 0, 76 ) = { 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 8, 9, 9, 0, 0, 10, 10, 10, 10, 12, 12, 11, 11, 11, 12, 12, 12, 14, 1, 15, 16, 17, 4, 18, 19, 20, 21, 22, 23, 24, 25, 26, 15, 27, 27, 27, 27, 28, 27, 15, 29, 27, 27, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 33, 34, 35, 32, 32, 32, 32, 32, 32, 32, 32, 32, 36, 37, 38, 32, 32, 32, 32, 32, 32, 39, 40, 32, 32, 32, 32, 32, 41, 42, 44, 45, 32, 32, 46, 32, 47, 47, 47, 47, 48, 48, 48, 48, 49, 50, 48, 50, 48, 48, 48, 50, 10, 10, 48, 48, 48, 48, 48, 50, 48, 50, 48, 48, 48, 50, 51, 32, 32, 32, 52, 32, 32, 32, 53, 47, 54, 55, 55, 54, 54, 54, 54, 49, 54, 54, 56, 56, 54, 54, 56, 57, 47, 58, 55, 55, 58, 58, 58, 58, 49, 58, 58, 59, 59, 58, 58, 59, 60, 60, 58, 58, 60, 61, 61, 54, 54, 61, 62, 62, 54, 54, 62, 12, 12, 63, 63, 63, 12, 12, 12, 63, 64, 64, 63, 63, 64, 65, 65, 63, 63, 65, 47, 54, 24, 24, 54, 54, 54, 54, 49, 54, 54, 56, 56, 54, 54, 56, 66, 67, 27, 27, 68, 68, 68, 27, 27, 27, 27, 27, 27, 68, 68, 27, 27, 1, 68, 68, 68, 4, 68, 68, 68, 68, 68, 27, 27, 68, 68, 68, 27, 27, 27, 27, 27, 27, 68, 68, 27, 27, 69, 70, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 71, 73, 72, 72, 72, 72, 72, 72, 72, 74, 76, 0 };

array s8 _Scanner_index_defaults( 0, 75 ) = { 0, 1, 1, 4, 4, 7, 0, 0, 11, 13, 13, 32, 32, 32, 32, 32, 32, 43, 32, 48, 48, 32, 54, 58, 58, 54, 54, 63, 63, 54, 32, 32, 68, 68, 32, 32, 72, 75, 0 };

array s8 _Scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _Scanner_cond_targs( 0, 37 ) = { 9, 1, 9, 2, 3, 9, 4, 9, 9, 7, 20, 9, 27, 10, 11, 9, 12, 13, 14, 15, 16, 18, 21, 22, 29, 30, 31, 32, 33, 34, 35, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 17, 9, 9, 9, 5, 19, 9, 6, 9, 9, 9, 9, 9, 23, 25, 8, 9, 24, 9, 26, 9, 9, 28, 9, 9, 9, 9, 9, 9, 9, 36, 36, 37, 36, 36, 0 };

array s8 _Scanner_cond_actions( 0, 103 ) = { 89, 0, 17, 0, 0, 15, 0, 87, 61, 0, 0, 85, 0, 0, 0, 63, 0, 0, 0, 0, 0, 5, 0, 100, 100, 0, 0, 0, 94, 0, 0, 83, 81, 31, 41, 33, 47, 37, 53, 43, 55, 45, 0, 79, 57, 59, 0, 97, 71, 0, 19, 65, 67, 39, 73, 103, 0, 0, 75, 0, 23, 0, 21, 77, 0, 25, 27, 29, 69, 49, 51, 35, 11, 9, 0, 13, 7, 0 };

array s8 _Scanner_to_state_actions( 0, 91 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };

array s8 _Scanner_from_state_actions( 0, 3 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0 };

array s8 _Scanner_eof_trans( 0, 76 ) = { 0, 1, 1, 1, 1, 8, 1, 1, 12, 0, 32, 33, 33, 33, 33, 33, 33, 44, 33, 49, 49, 33, 55, 59, 59, 55, 55, 64, 64, 55, 33, 33, 69, 69, 33, 33, 0, 76, 0 };

array s8 _Scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Scanner_start = 9;
value int Scanner_error = 0;

value int Scanner_en_comment = 36;
value int Scanner_en_main = 9;

host( "working/lmgoto.rl", 140 ) @{
	
	void Scanner::token( int tok )
	{
		const char *data = ts;
		int len = te - ts;
		cout << "<" << tok << "> ";
		if ( data != 0 ) {
			for ( int i = 0; i < len; i++ )
			cout << data[i];
		}
		cout << '\n';
	}
	
	void Scanner::run( const char *buf )
	{
		int len = strlen( buf );
	}@
	{
		cs = cast(int)Scanner_start;
		ts = nil;
		te = nil;
		act = 0;
	}
	host( "working/lmgoto.rl", 157 ) @{
		const char *p = buf;
		const char *pe = buf + len;
		const char *eof = pe;
	}@
	{
		int _trans = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_acts = offset( _Scanner_actions, _Scanner_from_state_actions[cs] );
				_nacts = cast(uint)deref( _Scanner_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _Scanner_actions, _acts ) ) {
						case 2 {
							host( "NONE", 1 ) ${${ts = p;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				_keys = offset( _Scanner_trans_keys, (cs<<1) );
				_inds = offset( _Scanner_indices, _Scanner_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 126 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_Scanner_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _Scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _Scanner_trans_keys, _keys ) )
					_trans = cast(int)deref( _Scanner_indices, _inds + cast(int)( _ic - cast(int)deref( _Scanner_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_Scanner_index_defaults[cs];
				}
				else {
					_trans = cast(int)_Scanner_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_Scanner_cond_targs[_trans];
				
				if ( _Scanner_cond_actions[_trans] == 0 )
				goto _again;
				
				_acts = offset( _Scanner_actions, _Scanner_cond_actions[_trans] );
				_nacts = cast(uint)deref( _Scanner_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _Scanner_actions, _acts ) )
					{
						case 3 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
						}
						case 4 {
							host( "working/lmgoto.rl", 56 ) ${${te = p+1;host( "working/lmgoto.rl", 56 ) ${
										if ( ! isCxx )
										${cs = 9; goto _again;}$else {
											cout << "comm char: " << ts[0] << endl;
											cout << "comm char: " << ts[1] << endl;
										}
									}$}$}$
						}
						case 5 {
							host( "working/lmgoto.rl", 65 ) ${${te = p+1;host( "working/lmgoto.rl", 65 ) ${
										if ( isCxx )
										${cs = 9; goto _again;}$else
										cout << "comm char: " << ts[0] << endl;
									}$}$}$
						}
						case 6 {
							host( "working/lmgoto.rl", 72 ) ${${te = p+1;host( "working/lmgoto.rl", 72 ) ${
										cout << "comm char: " << ts[0] << endl;
									}$}$}$
						}
						case 7 {
							host( "working/lmgoto.rl", 72 ) ${${te = p;p = p - 1;host( "working/lmgoto.rl", 72 ) ${
										cout << "comm char: " << ts[0] << endl;
									}$}$}$
						}
						case 8 {
							host( "working/lmgoto.rl", 84 ) ${${act = 6;}$}$
						}
						case 9 {
							host( "working/lmgoto.rl", 92 ) ${${act = 7;}$}$
						}
						case 10 {
							host( "working/lmgoto.rl", 95 ) ${${act = 8;}$}$
						}
						case 11 {
							host( "working/lmgoto.rl", 98 ) ${${act = 9;}$}$
						}
						case 12 {
							host( "working/lmgoto.rl", 80 ) ${${te = p+1;host( "working/lmgoto.rl", 80 ) ${ token( TK_Slit );}$}$}$
						}
						case 13 {
							host( "working/lmgoto.rl", 81 ) ${${te = p+1;host( "working/lmgoto.rl", 81 ) ${ token( TK_Dlit );}$}$}$
						}
						case 14 {
							host( "working/lmgoto.rl", 92 ) ${${te = p+1;host( "working/lmgoto.rl", 92 ) ${ token( TK_Float );}$}$}$
						}
						case 15 {
							host( "working/lmgoto.rl", 95 ) ${${te = p+1;host( "working/lmgoto.rl", 95 ) ${ token( TK_IntegerDecimal );}$}$}$
						}
						case 16 {
							host( "working/lmgoto.rl", 98 ) ${${te = p+1;host( "working/lmgoto.rl", 98 ) ${ token( TK_IntegerOctal );}$}$}$
						}
						case 17 {
							host( "working/lmgoto.rl", 101 ) ${${te = p+1;host( "working/lmgoto.rl", 101 ) ${ token( TK_IntegerHex );}$}$}$
						}
						case 18 {
							host( "working/lmgoto.rl", 104 ) ${${te = p+1;host( "working/lmgoto.rl", 104 ) ${token( TK_NameSep );}$}$}$
						}
						case 19 {
							host( "working/lmgoto.rl", 105 ) ${${te = p+1;host( "working/lmgoto.rl", 105 ) ${token( TK_EqualsEquals );}$}$}$
						}
						case 20 {
							host( "working/lmgoto.rl", 106 ) ${${te = p+1;host( "working/lmgoto.rl", 106 ) ${token( TK_NotEquals );}$}$}$
						}
						case 21 {
							host( "working/lmgoto.rl", 107 ) ${${te = p+1;host( "working/lmgoto.rl", 107 ) ${token( TK_AndAnd );}$}$}$
						}
						case 22 {
							host( "working/lmgoto.rl", 108 ) ${${te = p+1;host( "working/lmgoto.rl", 108 ) ${token( TK_OrOr );}$}$}$
						}
						case 23 {
							host( "working/lmgoto.rl", 109 ) ${${te = p+1;host( "working/lmgoto.rl", 109 ) ${token( TK_MultAssign );}$}$}$
						}
						case 24 {
							host( "working/lmgoto.rl", 110 ) ${${te = p+1;host( "working/lmgoto.rl", 110 ) ${token( TK_DivAssign );}$}$}$
						}
						case 25 {
							host( "working/lmgoto.rl", 111 ) ${${te = p+1;host( "working/lmgoto.rl", 111 ) ${token( TK_PercentAssign );}$}$}$
						}
						case 26 {
							host( "working/lmgoto.rl", 112 ) ${${te = p+1;host( "working/lmgoto.rl", 112 ) ${token( TK_PlusAssign );}$}$}$
						}
						case 27 {
							host( "working/lmgoto.rl", 113 ) ${${te = p+1;host( "working/lmgoto.rl", 113 ) ${token( TK_MinusAssign );}$}$}$
						}
						case 28 {
							host( "working/lmgoto.rl", 114 ) ${${te = p+1;host( "working/lmgoto.rl", 114 ) ${token( TK_AmpAssign );}$}$}$
						}
						case 29 {
							host( "working/lmgoto.rl", 115 ) ${${te = p+1;host( "working/lmgoto.rl", 115 ) ${token( TK_CaretAssign );}$}$}$
						}
						case 30 {
							host( "working/lmgoto.rl", 116 ) ${${te = p+1;host( "working/lmgoto.rl", 116 ) ${token( TK_BarAssign );}$}$}$
						}
						case 31 {
							host( "working/lmgoto.rl", 117 ) ${${te = p+1;host( "working/lmgoto.rl", 117 ) ${token( TK_PlusPlus );}$}$}$
						}
						case 32 {
							host( "working/lmgoto.rl", 118 ) ${${te = p+1;host( "working/lmgoto.rl", 118 ) ${token( TK_MinusMinus );}$}$}$
						}
						case 33 {
							host( "working/lmgoto.rl", 120 ) ${${te = p+1;host( "working/lmgoto.rl", 120 ) ${token( TK_ArrowStar );}$}$}$
						}
						case 34 {
							host( "working/lmgoto.rl", 121 ) ${${te = p+1;host( "working/lmgoto.rl", 121 ) ${token( TK_DotStar );}$}$}$
						}
						case 35 {
							host( "working/lmgoto.rl", 124 ) ${${te = p+1;host( "working/lmgoto.rl", 124 ) ${ token( TK_DotDotDot );}$}$}$
						}
						case 36 {
							host( "working/lmgoto.rl", 127 ) ${${te = p+1;host( "working/lmgoto.rl", 127 ) ${ token( ts[0] );}$}$}$
						}
						case 37 {
							host( "working/lmgoto.rl", 131 ) ${${te = p+1;host( "working/lmgoto.rl", 131 ) ${ isCxx = false; ${cs = 36; goto _again;}$}$}$}$
						}
						case 38 {
							host( "working/lmgoto.rl", 132 ) ${${te = p+1;host( "working/lmgoto.rl", 132 ) ${ isCxx = true; ${cs = 36; goto _again;}$}$}$}$
						}
						case 39 {
							host( "working/lmgoto.rl", 84 ) ${${te = p;p = p - 1;host( "working/lmgoto.rl", 84 ) ${ token( TK_Id ); }$}$}$
						}
						case 40 {
							host( "working/lmgoto.rl", 92 ) ${${te = p;p = p - 1;host( "working/lmgoto.rl", 92 ) ${ token( TK_Float );}$}$}$
						}
						case 41 {
							host( "working/lmgoto.rl", 95 ) ${${te = p;p = p - 1;host( "working/lmgoto.rl", 95 ) ${ token( TK_IntegerDecimal );}$}$}$
						}
						case 42 {
							host( "working/lmgoto.rl", 98 ) ${${te = p;p = p - 1;host( "working/lmgoto.rl", 98 ) ${ token( TK_IntegerOctal );}$}$}$
						}
						case 43 {
							host( "working/lmgoto.rl", 101 ) ${${te = p;p = p - 1;host( "working/lmgoto.rl", 101 ) ${ token( TK_IntegerHex );}$}$}$
						}
						case 44 {
							host( "working/lmgoto.rl", 119 ) ${${te = p;p = p - 1;host( "working/lmgoto.rl", 119 ) ${token( TK_Arrow );}$}$}$
						}
						case 45 {
							host( "working/lmgoto.rl", 127 ) ${${te = p;p = p - 1;host( "working/lmgoto.rl", 127 ) ${ token( ts[0] );}$}$}$
						}
						case 46 {
							host( "working/lmgoto.rl", 134 ) ${${te = p;p = p - 1;host( "working/lmgoto.rl", 134 ) ${ token( TK_Whitespace );}$}$}$
						}
						case 47 {
							host( "working/lmgoto.rl", 95 ) ${${p = ((te))-1;
									host( "working/lmgoto.rl", 95 ) ${ token( TK_IntegerDecimal );}$}$}$
						}
						case 48 {
							host( "working/lmgoto.rl", 127 ) ${${p = ((te))-1;
									host( "working/lmgoto.rl", 127 ) ${ token( ts[0] );}$}$}$
						}
						case 49 {
							host( "NONE", 1 ) ${${switch( act ) {
										case 0 {
											host( "NONE", 1 ) ${${cs = 0; goto _again;}$}$ }
										case 6 {
											p = ((te))-1;
											host( "working/lmgoto.rl", 84 ) ${ token( TK_Id ); }$ }
										case 7 {
											p = ((te))-1;
											host( "working/lmgoto.rl", 92 ) ${ token( TK_Float );}$ }
										case 8 {
											p = ((te))-1;
											host( "working/lmgoto.rl", 95 ) ${ token( TK_IntegerDecimal );}$ }
										case 9 {
											p = ((te))-1;
											host( "working/lmgoto.rl", 98 ) ${ token( TK_IntegerOctal );}$ }
									}}$
							}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				_acts = offset( _Scanner_actions, _Scanner_to_state_actions[cs] );
				_nacts = cast(uint)deref( _Scanner_actions, _acts ); _acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _Scanner_actions, _acts ) ) {
						case 0 {
							host( "NONE", 1 ) ${${ts = nil;}$}$
						}
						case 1 {
							host( "NONE", 1 ) ${${act = 0;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == eof )
				{
					if ( _Scanner_eof_trans[cs] > 0 ) {
						_trans = cast(int)_Scanner_eof_trans[cs] - 1;
						goto _match_cond;
					}
				}
				
			}
			label _out { {}
			}
		}
	}
	host( "working/lmgoto.rl", 161 ) @{
		
		if ( cs == Scanner_error ) {
			/* Machine failed before finding a token. */
			cout << "PARSE ERROR" << endl;
		}
	}
	
	int main()
	{
		Scanner scanner;
		scanner.run(
		"//hello*/\n"
		"/*hi there*/ hello 0x88"
		);
		return 0;
	}
	
}@