host( "working/atoi2_ocaml.rl", 1 ) @{(*
	* @@LANG: ocaml
	* @@GENERATED: true
	*)
	
	let neg = ref 0
	let value = ref 0
	
	
	
	
	
	
}@
array s8 _state_chart_actions( 0, 4 ) = { 0, 1, 0, 1, 2, 2, 0, 1, 2, 0, 2, 2, 3, 4, 0 };

array s8 _state_chart_key_offsets( 0, 5 ) = { 0, 0, 2, 5, 0 };

array int _state_chart_trans_keys( 0, 57 ) = { 48, 57, 10, 48, 57, 43, 45, 48, 57, 0 };

array s8 _state_chart_single_lengths( 0, 2 ) = { 0, 0, 1, 2, 0 };

array s8 _state_chart_range_lengths( 0, 1 ) = { 0, 1, 1, 1, 0 };

array s8 _state_chart_index_offsets( 0, 5 ) = { 0, 0, 2, 5, 0 };

array s8 _state_chart_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _state_chart_trans_offsets( 0, 8 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 0 };

array s8 _state_chart_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _state_chart_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _state_chart_cond_targs( 0, 3 ) = { 2, 0, 3, 2, 0, 1, 1, 2, 0, 0 };

array s8 _state_chart_cond_actions( 0, 11 ) = { 3, 0, 11, 3, 0, 1, 5, 8, 0, 0 };

array s8 _state_chart_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _state_chart_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _state_chart_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _state_chart_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int state_chart_start = 3;
value int state_chart_first_final = 3;
value int state_chart_error = 0;

value int state_chart_en_main = 3;

host( "working/atoi2_ocaml.rl", 60 ) @{
	
	let exec data = 
	let buffer = String.create(1024) in 
	let blen :int ref = ref 0 in
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
	value := 0;
	neg := 0;
}@
{
	cs = cast(int)state_chart_start;
}
host( "working/atoi2_ocaml.rl", 70 ) @{
}@
{
	int _klen;
	uint _trans = 0;
	uint _cond = 0;
	uint _have = 0;
	uint _cont = 1;
	index s8 _acts;
	uint _nacts;
	index int _keys;
	index s8 _ckeys;
	int _cpc;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _state_chart_trans_keys, _state_chart_key_offsets[cs] );
				_trans = cast(uint)_state_chart_index_offsets[cs];
				_have = 0;
				
				_klen = cast(int)_state_chart_single_lengths[cs];
				if ( _klen > 0 ) {
					index int _lower;
					index int _mid;
					index int _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( _upper >= _lower && _have == 0 ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _state_chart_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _state_chart_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
				}
				
				if ( _have == 0 ) {
					_klen = cast(int)_state_chart_range_lengths[cs];
					if ( _klen > 0 ) {
						index int _lower;
						index int _mid;
						index int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _state_chart_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _state_chart_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								_have = 1;
							}
						}
						if ( _have == 0 )
						_trans += cast(uint)_klen;
					}
				}
				
				_ckeys = offset( _state_chart_cond_keys, _state_chart_trans_offsets[_trans] );
				_klen = cast(int)_state_chart_trans_lengths[_trans];
				_cond = cast(uint)_state_chart_trans_offsets[_trans];
				_have = 0;
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( _have == 0 && _lower <= _upper ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _state_chart_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _state_chart_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						cs = 0;
						_cont = 0;
					}
				}
			}
			if ( _cont == 1 ) {
				cs = cast(int)_state_chart_cond_targs[_cond];
				
				if ( _state_chart_cond_actions[_cond] != 0 ) {
					_acts = offset( _state_chart_actions, _state_chart_cond_actions[_cond] );
					_nacts = cast(uint)deref( _state_chart_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _state_chart_actions, _acts ) )
						{
							case 0 {
								host( "working/atoi2_ocaml.rl", 12 ) ${neg := 0;
									value := 0;
								}$
							}
							case 1 {
								host( "working/atoi2_ocaml.rl", 16 ) ${neg := 1;
								}$
							}
							case 2 {
								host( "working/atoi2_ocaml.rl", 19 ) ${value := value .contents * 10  + ( ={( deref( data, p ))}= - 48 )
									;
								}$
							}
							case 3 {
								host( "working/atoi2_ocaml.rl", 23 ) ${if neg .contents != 0  then
									begin
									value := -1  * value.contents;
									
									end 
									;
								}$
							}
							case 4 {
								host( "working/atoi2_ocaml.rl", 50 ) ${print_int( value.contents );
									print_string( "\n" );
								}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}
		}
	}
}
host( "working/atoi2_ocaml.rl", 71 ) @{
	if !cs >= state_chart_first_final then
	print_string "ACCEPT\n"
	else
	print_string "FAIL\n"
	;;
	
	let () =
	exec "1\n";
	exec "12\n";
	exec "222222\n";
	exec "+2123\n";
	exec "213 3213\n";
	exec "-12321\n";
	exec "--123\n";
	exec "-99\n";
	exec " -3000\n";
	()
	;;
	
}@