#include <stdio.h>
#include <string.h>
#define IDENT_BUFLEN 256



#include <stdio.h>

static const char  _clang_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 0, 8, 2, 1, 0, 2, 2, 1, 2, 2, 8, 2, 3, 1, 2, 3, 8, 2, 4, 1, 2, 4, 8, 2, 5, 1, 2, 5, 8, 2, 6, 1, 2, 6, 8, 2, 7, 1, 2, 7, 8, 3, 2, 1, 0, 3, 3, 1, 0, 3, 4, 1, 0, 3, 5, 1, 0, 3, 6, 1, 0, 3, 7, 1, 0, 0 ,  };
static const short  _clang_key_offsets [] = { 0, 0, 3, 6, 7, 9, 12, 13, 15, 21, 22, 42, 62, 82, 103, 124, 143, 162, 182, 0 ,  };
static const char  _clang_trans_keys [] = { 10, 34, 92, 10, 39, 92, 10, 10, 42, 10, 42, 47, 10, 48, 57, 48, 57, 65, 70, 97, 102, 10, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 42, 47, 48, 95, 33, 46, 49, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 120, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 46, 47, 95, 33, 45, 48, 57, 58, 64, 65, 90, 91, 96, 97, 122, 123, 126, 10, 34, 39, 47, 95, 33, 46, 48, 57, 58, 64, 65, 70, 71, 90, 91, 96, 97, 102, 103, 122, 123, 126, 0 ,  };
static const char  _clang_single_lengths [] = { 0, 3, 3, 1, 2, 3, 1, 0, 0, 1, 6, 6, 6, 7, 7, 5, 5, 6, 5, 0 ,  };
static const char  _clang_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 1, 3, 0, 7, 7, 7, 7, 7, 7, 7, 7, 9, 0 ,  };
static const short  _clang_index_offsets [] = { 0, 0, 4, 8, 10, 13, 17, 19, 21, 25, 27, 41, 55, 69, 84, 99, 112, 125, 139, 0 ,  };
static const char  _clang_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const short  _clang_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 0 ,  };
static const char  _clang_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _clang_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _clang_cond_targs [] = { 1, 12, 9, 1, 2, 12, 3, 2, 2, 2, 4, 5, 4, 4, 5, 10, 4, 10, 6, 15, 0, 18, 18, 18, 0, 1, 1, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 4, 6, 14, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 8, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 15, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 16, 11, 16, 11, 16, 11, 10, 10, 1, 2, 7, 13, 16, 11, 17, 11, 16, 11, 16, 11, 10, 10, 1, 2, 13, 16, 11, 18, 11, 18, 16, 11, 18, 16, 11, 10, 0 ,  };
static const char  _clang_cond_actions [] = { 19, 0, 0, 1, 19, 0, 0, 1, 19, 1, 17, 0, 0, 17, 0, 0, 0, 17, 0, 1, 0, 22, 22, 22, 0, 19, 1, 17, 3, 3, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 0, 58, 55, 55, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 15, 34, 31, 31, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 7, 58, 55, 55, 0, 0, 81, 81, 81, 81, 81, 81, 81, 81, 81, 15, 46, 43, 43, 1, 73, 73, 0, 73, 1, 73, 73, 73, 73, 73, 11, 40, 37, 37, 69, 69, 69, 1, 69, 69, 69, 69, 69, 9, 28, 25, 25, 61, 1, 61, 1, 61, 1, 61, 1, 61, 5, 46, 43, 43, 1, 73, 73, 73, 1, 73, 73, 73, 73, 73, 11, 52, 49, 49, 77, 77, 77, 1, 77, 1, 77, 77, 1, 77, 77, 13, 0 ,  };
static const char  _clang_eof_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 7, 15, 11, 9, 5, 11, 13, 0 ,  };
static const char  _clang_nfa_targs [] = { 0, 0 ,  };
static const char  _clang_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _clang_nfa_push_actions [] = { 0, 0 ,  };
static const char  _clang_nfa_pop_trans [] = { 0, 0 ,  };
static const int  clang_start  = 10;
static const int  clang_first_final  = 10;
static const int  clang_en_main  = 10;
char data[] = 
"/*\n"
" *  Copyright\n"
" */\n"
"\n"
"/*  Aapl.\n"
" */\n"
"\n"
"#define _AAPL_RESIZE_H\n"
"\n"
"#include <assert.h>\n"
"\n"
"#ifdef AAPL_NAMESPACE\n"
"namespace Aapl {\n"
"#endif\n"
"#define LIN_DEFAULT_STEP 256\n"
"#define EXPN_UP( existing, needed ) \\\n"
"		need > eng ? (ned<<1) : eing\n"
"	\n"
"\n"
"/*@}*/\n"
"#undef EXPN_UP\n"
"#ifdef AAPL_NAMESPACE\n"
"#endif /* _AAPL_RESIZE_H */\n";

void test( char *buf )
{
	int len = strlen( buf );
	char *p = buf, *pe = buf + len;
	char *eof = pe;
	char identBuf[IDENT_BUFLEN+1];
	int identLen;
	int curLine;
	int cs;
	
	identLen = 0;
	curLine = 1;
	
	
	{
		cs = ( int ) clang_start;
	}
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _clang_trans_keys + _clang_key_offsets[cs];
		_trans = ( unsigned int  ) _clang_index_offsets[cs];
		_klen = ( int ) _clang_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _clang_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _clang_cond_keys + _clang_trans_offsets[_trans];
		_klen = ( int ) _clang_trans_lengths[_trans];
		_cond = ( unsigned int  ) _clang_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _clang_cond_targs[_cond];
		if ( _clang_cond_actions[_cond]== 0  )
		goto _again;
		
		
		_acts = _clang_actions + _clang_cond_actions[_cond];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					if ( identLen < IDENT_BUFLEN ) {
						identBuf[identLen] = (((*( p  ))
						));
						identLen += 1;
					}
					
				}
				
				break;
				case 1 :
				{
					identLen = 0;
					
				}
				
				break;
				case 2 :
				{
					identBuf[identLen] = 0;
					printf("ident(%i): %s\n", curLine, identBuf);
					
				}
				
				break;
				case 3 :
				{
					identBuf[identLen] = 0;
					printf("literal(%i): %s\n", curLine, identBuf);
					
				}
				
				break;
				case 4 :
				{
					identBuf[identLen] = 0;
					printf("float(%i): %s\n", curLine, identBuf);
					
				}
				
				break;
				case 5 :
				{
					identBuf[identLen] = 0;
					printf("int(%i): %s\n", curLine, identBuf);
					
				}
				
				break;
				case 6 :
				{
					identBuf[identLen] = 0;
					printf("hex(%i): 0x%s\n", curLine, identBuf);
					
				}
				
				break;
				case 7 :
				{
					identBuf[identLen] = 0;
					printf("symbol(%i): %s\n", curLine, identBuf);
					
				}
				
				break;
				case 8 :
				{
					curLine += 1; 
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _clang_actions + _clang_eof_actions[cs];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 2 :
					{
						identBuf[identLen] = 0;
						printf("ident(%i): %s\n", curLine, identBuf);
						
					}
					
					break;
					case 3 :
					{
						identBuf[identLen] = 0;
						printf("literal(%i): %s\n", curLine, identBuf);
						
					}
					
					break;
					case 4 :
					{
						identBuf[identLen] = 0;
						printf("float(%i): %s\n", curLine, identBuf);
						
					}
					
					break;
					case 5 :
					{
						identBuf[identLen] = 0;
						printf("int(%i): %s\n", curLine, identBuf);
						
					}
					
					break;
					case 6 :
					{
						identBuf[identLen] = 0;
						printf("hex(%i): 0x%s\n", curLine, identBuf);
						
					}
					
					break;
					case 7 :
					{
						identBuf[identLen] = 0;
						printf("symbol(%i): %s\n", curLine, identBuf);
						
					}
					
					break;
					
				}
				__nacts -= 1;
				__acts += 1;
			}
			
		}
		
		
		
		_out :
		{}
		
	}
	if ( cs >= clang_first_final )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}

int main()
{
	test( 
	"999 0xaAFF99 99.99 /*\n"
	"*/ 'lksdj' //\n"
	"\"\n"
	"\n"
	"literal\n"
	"\n"
	"\n"
	"\"0x00aba foobardd.ddsf 0x0.9\n" );
	test( 
	"wordwithnum00asdf\n"
	"000wordfollowsnum,makes new symbol\n"
	"\n"
	"finishing early /* unfinished ...\n" );
	test( data );
	return 0;
}

