host( "working/export1.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	
	
}@
export char test_ex_c1 99;
export char test_ex_c2 122;
export char test_ex_c3 116;

host( "working/export1.rl", 25 ) @{
}@
array char _test_trans_keys( 0, 7 ) = { 1, 0, 0, 3, 0, 2, 0, 7, 1, 0, 5, 7, 0 };

array s8 _test_char_class( 0, 7 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 7, 0 };

array s8 _test_index_offsets( 0, 15 ) = { 0, 0, 4, 7, 15, 15, 0 };

array s8 _test_indices( 0, 6 ) = { 0, 1, 1, 2, 3, 1, 4, 5, 1, 1, 1, 6, 6, 6, 6, 2, 4, 6, 0 };

array s8 _test_index_defaults( 0, 7 ) = { 0, 1, 1, 1, 7, 1, 0 };

array s8 _test_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _test_cond_targs( 0, 5 ) = { 5, 0, 1, 5, 2, 5, 3, 4, 0 };

array s8 _test_cond_actions( 0, 3 ) = { 1, 0, 0, 2, 0, 3, 0, 0, 0 };

array s8 _test_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _test_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0 };

array s8 _test_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _test_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int test_start = 4;
value int test_first_final = 4;
value int test_error = 0;

value int test_en_commands = 5;
value int test_en_some_other = 4;

host( "working/export1.rl", 26 ) @{
	
	int test( const char *data, int len )
	{
		int cs = test_en_commands;
		const char *p = data, *pe = data + len;
		
	}@
	{
	}
	host( "working/export1.rl", 33 ) @{
	}@
	{
		int _trans = 0;
		index char _keys;
		index s8 _inds;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _test_trans_keys, (cs<<1) );
				_inds = offset( _test_indices, _test_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_test_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _test_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _test_trans_keys, _keys ) )
					_trans = cast(int)deref( _test_indices, _inds + cast(int)( _ic - cast(int)deref( _test_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_test_index_defaults[cs];
				}
				else {
					_trans = cast(int)_test_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_test_cond_targs[_trans];
				
				if ( _test_cond_actions[_trans] == 0 )
				goto _again;
				
				switch ( _test_cond_actions[_trans] ) {
					case 1 {
						host( "working/export1.rl", 16 ) ${ printf( "c1\n" );}$
					}
					case 3 {
						host( "working/export1.rl", 17 ) ${ printf( "c2\n" );}$
					}
					case 2 {
						host( "working/export1.rl", 18 ) ${ printf( "c3\n" );}$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/export1.rl", 34 ) @{
		
		if ( cs >= test_first_final )
		printf("ACCEPT\n");
		else
		printf("ERROR\n");
		return 0;
	}
	
	char data[] = { 
		test_ex_c1, '1', '2', '\n', 
		test_ex_c2, 'a', 'b', '\n', 
		test_ex_c3, '.', '.', '\n', 0 
	};
	
	int main()
	{
		test( data, strlen( data ) );
		return 0;
	}
	
}@