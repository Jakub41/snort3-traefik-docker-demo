class scan3_java
{
	int
	ts ;
	int
	te ;
	int act ;
	int token ;
	
	
	
	
	
	private static byte  _scanner_key_offsets [] = { 0, 0, 2, 0 ,  };
	private static char  _scanner_trans_keys [] = { 97, 98, 0,  };
	private static byte  _scanner_single_lengths [] = { 0, 2, 0, 0 ,  };
	private static byte  _scanner_range_lengths [] = { 0, 0, 0, 0 ,  };
	private static byte  _scanner_index_offsets [] = { 0, 0, 3, 0 ,  };
	private static byte  _scanner_trans_cond_spaces [] = { -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _scanner_trans_offsets [] = { 0, 1, 2, 3, 4, 0 ,  };
	private static byte  _scanner_trans_lengths [] = { 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _scanner_cond_keys [] = { 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _scanner_cond_targs [] = { 2, 2, 0, 2, 1, 0 ,  };
	private static byte  _scanner_cond_actions [] = { 3, 4, 0, 6, 5, 0 ,  };
	private static byte  _scanner_to_state_actions [] = { 0, 1, 0, 0 ,  };
	private static byte  _scanner_from_state_actions [] = { 0, 2, 0, 0 ,  };
	private static byte  _scanner_eof_trans_indexed [] = { 0, 0, 2, 0 ,  };
	private static byte  _scanner_eof_trans_direct [] = { 0, 0, 5, 0 ,  };
	private static byte  _scanner_nfa_targs [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_offsets [] = { 0, 0, 0, 0 ,  };
	private static byte  _scanner_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  scanner_start  = 1;
	private static int  scanner_first_final  = 1;
	private static int  scanner_error  = 0;
	private static int  scanner_en_main  = 1;
	int cs;
	
	void init()
	{
		{
			cs = (int)scanner_start;
			ts = 0;
			te = 0;
			act = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans = 0;
			int _cond = 0;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					case 1:
					switch ( _scanner_from_state_actions[cs]  ) {
						case 2 :
						{
							{
								ts = p;
								
							}
							
						}
						
						break;
						
					}
					_keys = _scanner_key_offsets[cs] ;
					_trans = (int )_scanner_index_offsets[cs];
					_klen = (int)_scanner_single_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( ( data[p ]) > _scanner_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += (int )(_mid - _keys);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_keys += _klen;
						_trans += (int )_klen;
						
					}
					
					_klen = (int)_scanner_range_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
							_upper = _mid - 2;
							
							else if ( ( data[p ]) > _scanner_trans_keys[_mid + 1 ] )
							_lower = _mid + 2;
							
							else
							{
								_trans += (int )((_mid - _keys)>>1);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_trans += (int )_klen;
						
					}
					
					
					case 2:
					_ckeys = _scanner_trans_offsets[_trans] ;
					_klen = (int)_scanner_trans_lengths[_trans];
					_cond = (int )_scanner_trans_offsets[_trans];
					_cpc = 0;
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < (int)_scanner_cond_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( _cpc > (int)_scanner_cond_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_cond += (int )(_mid - _ckeys);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						cs = 0;
						{
							_goto_targ = 4;
							if (true)
							continue _goto;
						}
						
					}
					
					case 3:
					cs = (int)_scanner_cond_targs[_cond];
					if ( _scanner_cond_actions[_cond] == 0  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					switch ( _scanner_cond_actions[_cond]  ) {
						case 5 :
						{
							{
								switch ( act  ) {
									case 1 :
									p = ((te))-1;
									{
										System.out.print( "pat1\n" );
										
									}
									
									break;
									case 2 :
									p = ((te))-1;
									{
										System.out.print( "pat2\n" );
										
									}
									
									break;
									case 3 :
									p = ((te))-1;
									{
										System.out.print( "pat3\n" );
										
									}
									
									break;
									
								}
								
							}
							
							
						}
						
						break;
						case 3 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 1;
								
							}
							
						}
						
						break;
						case 4 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 2;
								
							}
							
						}
						
						break;
						case 6 :
						{
							{
								te = p+1;
								
							}
							
						}
						{
							{
								act = 3;
								
							}
							
						}
						
						break;
						
					}
					
					case 4:
					switch ( _scanner_to_state_actions[cs]  ) {
						case 1 :
						{
							{
								ts = 0;
								
							}
							
						}
						
						break;
						
					}
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					p += 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 5:
					{
					
					}
					if ( p == eof  )
					{
						if ( _scanner_eof_trans_direct[cs] > 0  )
						{
							_trans = (int )_scanner_eof_trans_direct[cs] - 1;
							_cond = (int )_scanner_trans_offsets[_trans];
							{
								_goto_targ = 3;
								if (true)
								continue _goto;
							}
							
						}
						
						
					}
					
					
					case 6:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= scanner_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"ab89",
	};
	
	static final int inplen = 1;
	
	public static void main (String[] args)
	{
		scan3_java machine = new scan3_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
