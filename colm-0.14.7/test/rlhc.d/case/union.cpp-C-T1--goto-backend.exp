#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

using namespace std;

#define BUFSIZE 2048

struct Concurrent
{
	Concurrent() :
	cur_char(0),
	start_word(0),
	start_comment(0),
	start_literal(0)
	{}
	
	int cur_char;
	int start_word;
	int start_comment;
	int start_literal;
	
	int cs;
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	void init( );
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	void execute( const char *data, int len );
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	int finish( );
};



static const char  _Concurrent_key_offsets [] = { 0, 5, 10, 16, 22, 27, 33, 38, 43, 49, 55, 60, 66, 71, 78, 84, 91, 95, 0 ,  };
static const char  _Concurrent_trans_keys [] = { 32, 39, 47, 9, 13, 32, 39, 47, 9, 13, 32, 39, 47, 92, 9, 13, 32, 39, 47, 92, 9, 13, 32, 39, 47, 9, 13, 32, 39, 42, 47, 9, 13, 32, 39, 42, 9, 13, 32, 39, 42, 9, 13, 32, 39, 42, 92, 9, 13, 32, 39, 42, 92, 9, 13, 32, 39, 42, 9, 13, 32, 39, 42, 47, 9, 13, 32, 39, 47, 9, 13, 32, 39, 42, 47, 92, 9, 13, 32, 39, 47, 92, 9, 13, 32, 39, 42, 47, 92, 9, 13, 32, 47, 9, 13, 32, 42, 9, 13, 0 ,  };
static const char  _Concurrent_single_lengths [] = { 3, 3, 4, 4, 3, 4, 3, 3, 4, 4, 3, 4, 3, 5, 4, 5, 2, 2, 0 ,  };
static const char  _Concurrent_range_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _Concurrent_index_offsets [] = { 0, 5, 10, 16, 22, 27, 33, 38, 43, 49, 55, 60, 66, 71, 78, 84, 91, 95, 0 ,  };
static const char  _Concurrent_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _Concurrent_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 0 ,  };
static const char  _Concurrent_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _Concurrent_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _Concurrent_cond_targs [] = { 0, 2, 5, 0, 1, 0, 2, 5, 0, 1, 3, 4, 15, 16, 3, 2, 3, 4, 15, 16, 3, 2, 0, 2, 5, 0, 1, 0, 2, 6, 5, 0, 1, 7, 8, 11, 7, 6, 7, 8, 11, 7, 6, 9, 10, 13, 17, 9, 8, 9, 10, 13, 17, 9, 8, 7, 8, 11, 7, 6, 7, 8, 11, 12, 7, 6, 0, 2, 5, 0, 1, 9, 10, 13, 14, 17, 9, 8, 3, 4, 15, 16, 3, 2, 3, 4, 8, 15, 16, 3, 2, 3, 15, 3, 2, 9, 13, 9, 8, 0 ,  };
static const char  _Concurrent_cond_actions [] = { 2, 3, 4, 2, 1, 6, 7, 8, 6, 2, 6, 2, 8, 2, 6, 2, 2, 1, 4, 1, 2, 1, 11, 12, 13, 11, 10, 6, 7, 2, 8, 6, 2, 6, 7, 2, 6, 2, 2, 3, 1, 2, 1, 6, 2, 2, 2, 6, 2, 2, 1, 1, 1, 2, 1, 11, 12, 10, 11, 10, 6, 7, 2, 2, 6, 2, 16, 17, 18, 16, 15, 6, 2, 2, 2, 2, 6, 2, 16, 15, 18, 15, 16, 15, 6, 2, 2, 8, 2, 6, 2, 6, 8, 6, 2, 6, 2, 6, 2, 0 ,  };
static const char  _Concurrent_eof_actions [] = { 0, 5, 5, 0, 9, 5, 5, 0, 5, 0, 9, 5, 14, 5, 14, 5, 5, 5, 0 ,  };
static const char  _Concurrent_nfa_targs [] = { 0, 0 ,  };
static const char  _Concurrent_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _Concurrent_nfa_push_actions [] = { 0, 0 ,  };
static const char  _Concurrent_nfa_pop_trans [] = { 0, 0 ,  };
static const int  Concurrent_start  = 0;
static const int  Concurrent_first_final  = 0;
static const int  Concurrent_error  = -1;
static const int  Concurrent_en_main  = 0;
void Concurrent::init( )
{
	cur_char = 0;
	
	{
		cs = ( int ) Concurrent_start;
	}
}

void Concurrent::execute( const char *data, int len )
{
	const char *p = data;
	const char *pe = data + len;
	const char *eof = pe;
	
	
	{
		int _klen;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		if ( p == pe  )
		goto _test_eof;
		
		_resume :
		_keys = _Concurrent_trans_keys + _Concurrent_key_offsets[cs];
		_trans = ( unsigned int  ) _Concurrent_index_offsets[cs];
		_klen = ( int ) _Concurrent_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _Concurrent_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _Concurrent_cond_keys + _Concurrent_trans_offsets[_trans];
		_klen = ( int ) _Concurrent_trans_lengths[_trans];
		_cond = ( unsigned int  ) _Concurrent_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = -1;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _Concurrent_cond_targs[_cond];
		if ( _Concurrent_cond_actions[_cond]== 0  )
		goto _again;
		
		
		switch ( _Concurrent_cond_actions[_cond] ) {
			case 2 :
			{
				cur_char += 1;
				
			}
			
			break;
			case 1 :
			{
				cur_char += 1;
				
			}
			{
				start_word = cur_char;
				
			}
			
			break;
			case 6 :
			{
				cur_char += 1;
				
			}
			{
				cout << "word: " << start_word << 
				" " << cur_char-1 << endl;
				
			}
			
			break;
			case 8 :
			{
				cur_char += 1;
				
			}
			{
				start_comment = cur_char;
				
			}
			
			break;
			case 15 :
			{
				cur_char += 1;
				
			}
			{
				cout << "comment: " << start_comment <<
				" " << cur_char-1 << endl;
				
			}
			
			break;
			case 7 :
			{
				cur_char += 1;
				
			}
			{
				start_literal = cur_char;
				
			}
			
			break;
			case 10 :
			{
				cur_char += 1;
				
			}
			{
				cout << "literal: " << start_literal <<
				" " << cur_char-1 << endl;
				
			}
			
			break;
			case 4 :
			{
				cur_char += 1;
				
			}
			{
				start_word = cur_char;
				
			}
			{
				start_comment = cur_char;
				
			}
			
			break;
			case 3 :
			{
				cur_char += 1;
				
			}
			{
				start_word = cur_char;
				
			}
			{
				start_literal = cur_char;
				
			}
			
			break;
			case 16 :
			{
				cur_char += 1;
				
			}
			{
				cout << "word: " << start_word << 
				" " << cur_char-1 << endl;
				
			}
			{
				cout << "comment: " << start_comment <<
				" " << cur_char-1 << endl;
				
			}
			
			break;
			case 11 :
			{
				cur_char += 1;
				
			}
			{
				cout << "word: " << start_word << 
				" " << cur_char-1 << endl;
				
			}
			{
				cout << "literal: " << start_literal <<
				" " << cur_char-1 << endl;
				
			}
			
			break;
			case 13 :
			{
				cur_char += 1;
				
			}
			{
				start_comment = cur_char;
				
			}
			{
				cout << "literal: " << start_literal <<
				" " << cur_char-1 << endl;
				
			}
			
			break;
			case 18 :
			{
				cur_char += 1;
				
			}
			{
				cout << "comment: " << start_comment <<
				" " << cur_char-1 << endl;
				
			}
			{
				start_comment = cur_char;
				
			}
			
			break;
			case 17 :
			{
				cur_char += 1;
				
			}
			{
				cout << "comment: " << start_comment <<
				" " << cur_char-1 << endl;
				
			}
			{
				start_literal = cur_char;
				
			}
			
			break;
			case 12 :
			{
				cur_char += 1;
				
			}
			{
				cout << "literal: " << start_literal <<
				" " << cur_char-1 << endl;
				
			}
			{
				start_literal = cur_char;
				
			}
			
			break;
			
		}
		
		_again :
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			switch ( _Concurrent_eof_actions[cs] ) {
				case 5 :
				{
					cout << "word: " << start_word << 
					" " << cur_char-1 << endl;
					
				}
				
				break;
				case 14 :
				{
					cout << "word: " << start_word << 
					" " << cur_char-1 << endl;
					
				}
				{
					cout << "comment: " << start_comment <<
					" " << cur_char-1 << endl;
					
				}
				
				break;
				case 9 :
				{
					cout << "word: " << start_word << 
					" " << cur_char-1 << endl;
					
				}
				{
					cout << "literal: " << start_literal <<
					" " << cur_char-1 << endl;
					
				}
				
				break;
				
			}
		}
		
		
		
	}
}

int Concurrent::finish( )
{
	if ( cs == Concurrent_error )
	return -1;
	if ( cs >= Concurrent_first_final )
	return 1;
	return 0;
}

void test( const char *buf )
{
	Concurrent concurrent;
	concurrent.init();
	concurrent.execute( buf, strlen(buf) );
	if ( concurrent.finish() > 0 )
	cout << "ACCEPT" << endl;
	else
	cout << "FAIL" << endl;
}

int main()
{
	test( 
	"/* in a comment,\n"
	" * ' and now in a literal string\n"
	" */ \n"
	" \n"
	"the comment has now ended but the literal string lives on\n"
	"\n"
	"' comment closed\n" );
	test( "/* * ' \\' */ \\' '\n" );
	test( "/**/'\\''/*/*/\n" );
	return 0;
}

