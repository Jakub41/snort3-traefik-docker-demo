#include <string.h>
#include <stdio.h>








static const char  _erract_trans_keys [] = { 1, 0, 3, 3, 2, 2, 4, 4, 4, 4, 5, 5, 0, 0, 1, 0, 0 ,  };
static const char  _erract_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 ,  };
static const char  _erract_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 6, 0 ,  };
static const char  _erract_indices [] = { 1, 3, 4, 5, 6, 8, 0 ,  };
static const char  _erract_index_defaults [] = { 0, 0, 2, 2, 2, 2, 7, 9, 0 ,  };
static const char  _erract_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _erract_cond_targs [] = { 0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0 ,  };
static const char  _erract_cond_actions [] = { 2, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0 ,  };
static const char  _erract_eof_actions [] = { 0, 1, 3, 3, 3, 3, 5, 0, 0 ,  };
static const char  _erract_nfa_targs [] = { 0, 0 ,  };
static const char  _erract_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _erract_nfa_push_actions [] = { 0, 0 ,  };
static const char  _erract_nfa_pop_trans [] = { 0, 0 ,  };
static const int  erract_start  = 1;
static const int  erract_first_final  = 7;
static const int  erract_error  = 0;
static const int  erract_en_main  = 1;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) erract_start;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	char *eof = pe;
	
	{
		int _trans = 0;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _erract_trans_keys + (cs<<1);
		_inds = _erract_indices + _erract_index_offsets[cs];
		if ( ((*( p  ))
		)<= 111 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _erract_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _erract_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _erract_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _erract_cond_targs[_trans];
		if ( _erract_cond_actions[_trans]== 0  )
		goto _again;
		
		
		switch ( _erract_cond_actions[_trans] ) {
			case 2 :
			{
				printf( "%s", "err_start\n" );
				
			}
			{
				printf( "%s", "err_all\n" );
				
			}
			
			break;
			case 4 :
			{
				printf( "%s", "err_all\n" );
				
			}
			{
				printf( "%s", "err_middle\n" );
				
			}
			
			break;
			case 6 :
			{
				printf( "%s", "err_all\n" );
				
			}
			{
				printf( "%s", "err_out\n" );
				
			}
			
			break;
			
		}
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			switch ( _erract_eof_actions[cs] ) {
				case 1 :
				{
					printf( "%s", "err_start\n" );
					
				}
				{
					printf( "%s", "eof_start\n" );
					
				}
				{
					printf( "%s", "err_all\n" );
					
				}
				{
					printf( "%s", "eof_all\n" );
					
				}
				
				break;
				case 3 :
				{
					printf( "%s", "err_all\n" );
					
				}
				{
					printf( "%s", "err_middle\n" );
					
				}
				{
					printf( "%s", "eof_all\n" );
					
				}
				{
					printf( "%s", "eof_middle\n" );
					
				}
				
				break;
				case 5 :
				{
					printf( "%s", "err_all\n" );
					
				}
				{
					printf( "%s", "err_out\n" );
					
				}
				{
					printf( "%s", "eof_all\n" );
					
				}
				{
					printf( "%s", "eof_out\n" );
					
				}
				
				break;
				
			}
		}
		
		
		
		_out :
		{}
		
	}
}

void finish( )
{
	if ( cs >= erract_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"",
	"h",
	"x",
	"he",
	"hx",
	"hel",
	"hex",
	"hell",
	"helx",
	"hello",
	"hellx",
	"hello\n",
	"hellox",
};

int inplen = 13;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

