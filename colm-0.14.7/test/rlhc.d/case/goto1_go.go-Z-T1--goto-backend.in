host( "working/goto1_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	var target  int ;
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array s8 _goto1_key_offsets( 0, 15 ) = { 0, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 0 };

array byte _goto1_trans_keys( 0, 119 ) = { u(10), u(49), u(50), u(117), u(110), u(117), u(115), u(101), u(100), u(111), u(110), u(101), u(116), u(119), u(111), u(0) };

array s8 _goto1_single_lengths( 0, 3 ) = { 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };

array s8 _goto1_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _goto1_index_offsets( 0, 31 ) = { 0, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 30, 31, 0 };

array s8 _goto1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _goto1_trans_offsets( 0, 31 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 };

array s8 _goto1_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _goto1_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _goto1_cond_targs( 0, 17 ) = { 14, 14, 14, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 15, 0, 9, 0, 10, 0, 16, 0, 12, 0, 13, 0, 17, 0, 0, 0, 0, 0, 0 };

array s8 _goto1_cond_actions( 0, 4 ) = { 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0 };

array s8 _goto1_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _goto1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _goto1_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _goto1_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int goto1_start = 1;
value int goto1_first_final = 14;
value int goto1_error = 0;

value int goto1_en_unused = 2;
value int goto1_en_one = 8;
value int goto1_en_two = 11;
value int goto1_en_main = 1;

host( "working/goto1_go.rl", 42 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)goto1_start;
	}
	host( "working/goto1_go.rl", 45 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
	}@
	{
		int _klen;
		index byte _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans = 0;
		uint _cond = 0;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume { 
				_keys = offset( _goto1_trans_keys, _goto1_key_offsets[cs] );
				_trans = cast(uint)_goto1_index_offsets[cs];
				
				_klen = cast(int)_goto1_single_lengths[cs];
				if ( _klen > 0 ) {
					index byte _lower;
					index byte _mid;
					index byte _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _goto1_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _goto1_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_goto1_range_lengths[cs];
				if ( _klen > 0 ) {
					index byte _lower;
					index byte _mid;
					index byte _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _goto1_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _goto1_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _goto1_cond_keys, _goto1_trans_offsets[_trans] );
				_klen = cast(int)_goto1_trans_lengths[_trans];
				_cond = cast(uint)_goto1_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _goto1_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _goto1_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_goto1_cond_targs[_cond];
				
				if ( _goto1_cond_actions[_cond] == 0 )
				goto _again;
				
				switch ( _goto1_cond_actions[_cond] ) {
					case 3 {
						host( "working/goto1_go.rl", 16 ) ${fmt.Print( "one\n" );target = 1;
							${cs = host( "-", 1 ) ={target}=; goto _again;}$
							
						}$
					}
					case 4 {
						host( "working/goto1_go.rl", 21 ) ${fmt.Print( "two\n" );target = 1;
							${cs = host( "-", 1 ) ={target}=; goto _again;}$
							
						}$
					}
					case 1 {
						host( "working/goto1_go.rl", 27 ) ${target = 8;
							${cs = host( "-", 1 ) ={target}=; goto _again;}$ 
						}$
					}
					case 2 {
						host( "working/goto1_go.rl", 30 ) ${target = 11;
							${cs = host( "-", 1 ) ={target}=; goto _again;}$ 
						}$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/goto1_go.rl", 51 ) @{
	}
	func finish() {
		if cs >= goto1_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"1one2two1one\n",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@