#include <iostream>
#include <stdio.h>
#include <string.h>

using namespace std;

struct ErrAct 
{
	int cs;
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	int init( );
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	int execute( const char *data, int len );
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	int finish( );
};



static const char  _ErrAct_actions [] = { 0, 1, 0, 1, 1, 1, 2, 0 ,  };
static const char  _ErrAct_trans_keys [] = { 1, 0, 2, 4, 4, 4, 0, 4, 4, 4, 0, 4, 1, 0, 0 ,  };
static const char  _ErrAct_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 ,  };
static const char  _ErrAct_index_offsets [] = { 0, 0, 3, 4, 9, 10, 15, 0 ,  };
static const char  _ErrAct_indices [] = { 1, 0, 2, 2, 5, 4, 4, 6, 2, 7, 5, 3, 3, 3, 7, 0 ,  };
static const char  _ErrAct_index_defaults [] = { 0, 0, 3, 4, 3, 3, 8, 0 ,  };
static const char  _ErrAct_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _ErrAct_cond_targs [] = { 0, 2, 3, 0, 0, 6, 4, 5, 0, 0 ,  };
static const char  _ErrAct_cond_actions [] = { 1, 0, 0, 3, 5, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_eof_actions [] = { 0, 1, 3, 5, 3, 3, 0, 0 ,  };
static const char  _ErrAct_nfa_targs [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_nfa_push_actions [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_pop_trans [] = { 0, 0 ,  };
static const int  ErrAct_start  = 1;
static const int  ErrAct_first_final  = 6;
static const int  ErrAct_error  = 0;
static const int  ErrAct_en_main  = 1;
int ErrAct::init( )
{

	{
		cs = ( int ) ErrAct_start;
	}
	return 0;
}

int ErrAct::execute( const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	const char *eof = pe;
	
	{
		int _trans = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _ErrAct_trans_keys + (cs<<1);
		_inds = _ErrAct_indices + _ErrAct_index_offsets[cs];
		if ( ((*( p  ))
		)<= 57 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _ErrAct_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _ErrAct_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _ErrAct_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _ErrAct_cond_targs[_trans];
		if ( _ErrAct_cond_actions[_trans]== 0  )
		goto _again;
		
		
		_acts = _ErrAct_actions + _ErrAct_cond_actions[_trans];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf(" DIGIT PLUS MINUS\n"); 
				}
				
				break;
				case 1 :
				{
					printf(" DIGIT\n"); 
				}
				
				break;
				case 2 :
				{
					printf(" DIGIT DECIMAL\n"); 
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _ErrAct_actions + _ErrAct_eof_actions[cs];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 0 :
					{
						printf(" DIGIT PLUS MINUS\n"); 
					}
					
					break;
					case 1 :
					{
						printf(" DIGIT\n"); 
					}
					
					break;
					case 2 :
					{
						printf(" DIGIT DECIMAL\n"); 
					}
					
					break;
					
				}
				__nacts -= 1;
				__acts += 1;
			}
			
		}
		
		
		
		_out :
		{}
		
	}
	if ( cs == ErrAct_error )
	return -1;
	if ( cs >= ErrAct_first_final )
	return 1;
	return 0;
}

int ErrAct::finish( )
{
	if ( cs == ErrAct_error )
	return -1;
	if ( cs >= ErrAct_first_final )
	return 1;
	return 0;
}

#define BUFSIZE 1024

void test( const char *buf )
{
	ErrAct errAct;
	errAct.init();
	errAct.execute( buf, strlen(buf) );
	if ( errAct.finish() > 0 )
	cout << "ACCEPT" << endl;
	else
	cout << "FAIL" << endl;
}

int main()
{
	test( "1\n" );
	test( "+1\n" );
	test( "-1\n" );
	test( "1.1\n" );
	test( "+1.1\n" );
	test( "-1.1\n" );
	test( "a\n" );
	test( "-\n" );
	test( "+\n" );
	test( "-a\n" );
	test( "+b\n" );
	test( "1.\n" );
	test( "1d\n" );
	test( "1.d\n" );
	test( "1.1d\n" );
	return 0;
}

