class eofact_java
{







	private static byte  _eofact_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 2, 0, 2, 0 ,  };
	private static byte  _eofact_key_offsets [] = { 0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 0 ,  };
	private static char  _eofact_trans_keys [] = { 104, 116, 101, 108, 108, 111, 104, 101, 114, 101, 10, 0,  };
	private static byte  _eofact_single_lengths [] = { 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0 ,  };
	private static byte  _eofact_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _eofact_index_offsets [] = { 0, 0, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 22, 0 ,  };
	private static byte  _eofact_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _eofact_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 0 ,  };
	private static byte  _eofact_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _eofact_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _eofact_cond_targs [] = { 2, 6, 0, 3, 0, 4, 0, 5, 0, 10, 0, 7, 0, 8, 0, 9, 0, 12, 0, 11, 0, 0, 0, 0 ,  };
	private static byte  _eofact_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _eofact_eof_actions [] = { 0, 9, 1, 1, 1, 1, 5, 5, 5, 5, 3, 0, 7, 0 ,  };
	private static byte  _eofact_nfa_targs [] = { 0, 0 ,  };
	private static byte  _eofact_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _eofact_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _eofact_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  eofact_start  = 1;
	private static int  eofact_first_final  = 10;
	private static int  eofact_error  = 0;
	private static int  eofact_en_main  = 1;
	int cs;
	
	void init()
	{
		{
			cs = (int)eofact_start;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _klen;
			int _trans = 0;
			int _cond = 0;
			int _have = 0;
			int _cont = 1;
			int _keys;
			int _ckeys;
			int _cpc;
			while ( _cont == 1  )
			{
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( p == eof  )
					{
						if ( _have == 0  )
						{
							int __acts;
							int __nacts;
							__acts = _eofact_eof_actions[cs] ;
							__nacts = (int )_eofact_actions[__acts ];
							__acts += 1;
							while ( __nacts > 0  )
							{
								switch ( _eofact_actions[__acts ] ) {
									case 0 :
									{
										System.out.print( "a1\n" );
										
									}
									
									break;
									case 1 :
									{
										System.out.print( "a2\n" );
										
									}
									
									break;
									case 2 :
									{
										System.out.print( "a3\n" );
										
									}
									
									break;
									case 3 :
									{
										System.out.print( "a4\n" );
										
									}
									
									break;
									
								}
								__nacts -= 1;
								__acts += 1;
								
							}
							
							
						}
						
						
					}
					
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = _eofact_key_offsets[cs] ;
						_trans = (int )_eofact_index_offsets[cs];
						_have = 0;
						_klen = (int)_eofact_single_lengths[cs];
						if ( _klen > 0  )
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( data[p ]) < _eofact_trans_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( ( data[p ]) > _eofact_trans_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_trans += (int )(_mid - _keys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								_keys += _klen;
								_trans += (int )_klen;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_klen = (int)_eofact_range_lengths[cs];
							if ( _klen > 0  )
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( data[p ]) < _eofact_trans_keys[_mid ] )
									_upper = _mid - 2;
									
									else if ( ( data[p ]) > _eofact_trans_keys[_mid + 1 ] )
									_lower = _mid + 2;
									
									else
									{
										_trans += (int )((_mid - _keys)>>1);
										_have = 1;
										
									}
									
									
								}
								
								if ( _have == 0  )
								_trans += (int )_klen;
								
								
							}
							
							
						}
						
						_ckeys = _eofact_trans_offsets[_trans] ;
						_klen = (int)_eofact_trans_lengths[_trans];
						_cond = (int )_eofact_trans_offsets[_trans];
						_have = 0;
						_cpc = 0;
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < (int)_eofact_cond_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( _cpc > (int)_eofact_cond_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_cond += (int )(_mid - _ckeys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								cs = 0;
								_cont = 0;
								
							}
							
							
						}
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_eofact_cond_targs[_cond];
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
	}
	
	void finish( )
	{
		if ( cs >= eofact_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"",
		"h",
		"hell",
		"hello",
		"hello\n",
		"t",
		"ther",
		"there",
		"friend",
	};
	
	static final int inplen = 9;
	
	public static void main (String[] args)
	{
		eofact_java machine = new eofact_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
