package main
import "fmt"

var target  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _goto1_trans_keys [] byte  = [] byte  { 1, 0, 0, 3, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 1, 0, 1, 0, 1, 0, 1, 0, 0 }
var _goto1_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0  }
var _goto1_index_offsets [] int8  = [] int8  { 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 16, 16, 0  }
var _goto1_indices [] int8  = [] int8  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0  }
var _goto1_index_defaults [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _goto1_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _goto1_cond_targs [] int8  = [] int8  { 14, 0, 14, 14, 3, 4, 5, 6, 7, 15, 9, 10, 16, 12, 13, 17, 0  }
var _goto1_cond_actions [] int8  = [] int8  { 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 0  }
var _goto1_nfa_targs [] int8  = [] int8  { 0, 0  }
var _goto1_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _goto1_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _goto1_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var goto1_start  int  = 1
var goto1_first_final  int  = 14
var goto1_error  int  = 0
var goto1_en_unused  int  = 2
var goto1_en_one  int  = 8
var goto1_en_two  int  = 11
var goto1_en_main  int  = 1
func prepare() {

	{
		cs = int(goto1_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		var  _trans  uint   = 0
		var  _have  uint   = 0
		var  _cont  uint   = 1
		var  _keys int
		var  _inds int
		for _cont == 1  {
			{
			
				if cs == 0  {
					_cont = 0;
					
				}
				_have = 0;
				if p == pe  {
					{
						if _have == 0  {
							_cont = 0;
							
						}
					}
					
				}
				if _cont == 1  {
					{
						if _have == 0  {
							{
								_keys = int((cs<<1) );
								_inds = int(_goto1_index_offsets[cs] );
								switch {
									case ( data[p ]) <= 119 && ( data[p ]) >= 10 :
									{
										var  _ic  int   = int(_goto1_char_class[int(( data[p ]) )- 10])
										switch {
											case _ic <= int(_goto1_trans_keys[_keys+1 ])&& _ic >= int(_goto1_trans_keys[_keys ]):
											_trans = uint(_goto1_indices[_inds + int(( _ic - int(_goto1_trans_keys[_keys ]))  )]);
											
											default:
											_trans = uint(_goto1_index_defaults[cs]);
											
										}
									}
									
									default:
									{
										_trans = uint(_goto1_index_defaults[cs]);
									}
									
									
								}
							}
							
						}
						if _cont == 1  {
							{
								cs = int(_goto1_cond_targs[_trans]);
								switch _goto1_cond_actions[_trans]  {
									case 3 :
									{fmt.Print( "one\n" );target = 1;
										{cs = (target);
										}
										
									}
									
									break;
									case 4 :
									{fmt.Print( "two\n" );target = 1;
										{cs = (target);
										}
										
									}
									
									break;
									case 1 :
									{target = 8;
										{cs = (target);
										} 
									}
									
									break;
									case 2 :
									{target = 11;
										{cs = (target);
										} 
									}
									
									break;
									
								}
								if cs == 0  {
									_cont = 0;
									
								}
								if _cont == 1  {
									p += 1;
									
								}
							}
						}
					}
					
				}
			}
			
		}
	}
}
func finish() {
	if cs >= goto1_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"1one2two1one\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
