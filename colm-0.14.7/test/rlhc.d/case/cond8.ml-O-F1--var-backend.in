host( "working/cond8.rl", 1 ) @{(*
	* @@LANG: ocaml
	*)
	
	let id x = x
	let fail fmt = Printf.ksprintf failwith fmt
	let pr fmt = Printf.ksprintf print_endline fmt
	
	let failed fmt = Printf.ksprintf (fun s -> prerr_endline s; exit 1) fmt
	let test' show f x y = if f x <> y then failed "FAILED: test %S" (show x)
	let case = ref 0
	let test f x y = incr case; if f x <> y then failed "FAILED: case %d" !case
	let error f x = match try Some (f x) with _ -> None with Some _ -> failed "FAILED: fail %S" x | None -> ()
	
	
}@
array int _cond_trans_keys( 0, 4 ) = { 1, 0, 0, 0, 0, 1, 4, 4, 3, 4, 0 };

array s8 _cond_char_class( 0, 4 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0 };

array s8 _cond_index_offsets( 0, 4 ) = { 0, 0, 1, 3, 4, 0 };

array s8 _cond_indices( 0, 5 ) = { 0, 0, 2, 3, 4, 5, 0 };

array s8 _cond_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 0 };

array s8 _cond_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, 0, 0, 0 };

array s8 _cond_trans_offsets( 0, 6 ) = { 0, 1, 2, 3, 4, 6, 0 };

array s8 _cond_cond_targs( 0, 4 ) = { 2, 0, 4, 1, 0, 4, 1, 4, 0 };

array s8 _cond_cond_actions( 0, 1 ) = { 0, 0, 0, 0, 0, 1, 0, 1, 0 };

array s8 _cond_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _cond_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _cond_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _cond_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int cond_start = 3;
value int cond_first_final = 3;
value int cond_error = 0;

value int cond_en_main = 3;

host( "working/cond8.rl", 17 ) @{
	
	let fail fmt = Printf.ksprintf failwith fmt
	
	let run data n =
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
	let i = ref 0 in
	
}@
{
	cs = cast(int)cond_start;
}

{
	int _cpc;
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	uint _cond = 0;
	index int _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _cond_trans_keys, (cs<<1) );
				_inds = offset( _cond_indices, _cond_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 48 )
				{
					int _ic = cast(int)_cond_char_class[cast(int)( deref( data, p )) - 48];
					if ( _ic <= cast(int)deref( _cond_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _cond_trans_keys, _keys ) )
					_trans = cast(uint)deref( _cond_indices, _inds + cast(int)( _ic - cast(int)deref( _cond_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_cond_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_cond_index_defaults[cs];
				}
				
				_cond = cast(uint)_cond_trans_offsets[_trans];
				
				_cpc = 0;
				switch ( _cond_trans_cond_spaces[_trans] ) {
					
					case 0 {
						if ( host( "working/cond8.rl", 27 ) ={ i < n }= ) _cpc += 1;
					}
				}
				_cond += cast(uint)_cpc;
			}
			if ( _cont == 1 ) {
				cs = cast(int)_cond_cond_targs[_cond];
				
				switch ( _cond_cond_actions[_cond] ) {
					case 1 {
						host( "working/cond8.rl", 33 ) ${ i := i.contents + 1 }$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/cond8.rl", 38 ) @{
	
	if !cs < cond_first_final then
	print_string "fail\n"
	else
	print_string "ok\n"
	
	let () =
	run "d2:abc" ( ref 1 );
	run "d2:abc" ( ref 2 );
	run "d2:abc" ( ref 3 );
	run "d2:abc" ( ref 4 );
	
}@