#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct high
{
	int cs;
};



static const char  _high_actions [] = { 0, 1, 0, 1, 2, 1, 3, 2, 0, 2, 2, 1, 2, 0 ,  };
static const char  _high_key_offsets [] = { 0, 0 ,  };
static const unsigned int  _high_trans_keys [] = { 4026531840u, 0u, 31u, 32u, 511u, 4026531841u, 4261412864u, 4261412865u, 4294967295u, 0u,  };
static const char  _high_single_lengths [] = { 1, 0 ,  };
static const char  _high_range_lengths [] = { 4, 0 ,  };
static const char  _high_index_offsets [] = { 0, 0 ,  };
static const char  _high_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _high_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 0 ,  };
static const char  _high_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _high_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _high_cond_targs [] = { 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _high_cond_actions [] = { 10, 5, 1, 3, 5, 7, 0 ,  };
static const char  _high_nfa_targs [] = { 0, 0 ,  };
static const char  _high_nfa_offsets [] = { 0, 0 ,  };
static const char  _high_nfa_push_actions [] = { 0, 0 ,  };
static const char  _high_nfa_pop_trans [] = { 0, 0 ,  };
static const int  high_start  = 0;
static const int  high_first_final  = 0;
static const int  high_error  = -1;
static const int  high_en_main  = 0;
void high_init( struct high *fsm )
{

	{
		(fsm->cs) = ( int ) high_start;
	}
}

void high_execute( struct high *fsm, const unsigned int *_data, int _len )
{
	const unsigned int *p = _data;
	const unsigned int *pe = _data+_len;
	
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_acts;
		unsigned int _nacts;
		const unsigned int  *_keys;
		const char  *_ckeys;
		int _cpc;
		while ( _cont == 1  )
		{
		
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _high_trans_keys + _high_key_offsets[(fsm->cs)];
					_trans = ( unsigned int  ) _high_index_offsets[(fsm->cs)];
					_have = 0;
					_klen = ( int ) _high_single_lengths[(fsm->cs)];
					if ( _klen > 0  )
					{
						const unsigned int  *_lower;
						const unsigned int  *_mid;
						const unsigned int  *_upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( ((*( p  ))
							)< (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( ((*( p  ))
							)> (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_trans += ( unsigned int  ) (_mid - _keys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += ( unsigned int  ) _klen;
						}
						
					}
					
					
					if ( _have == 0  )
					{
						_klen = ( int ) _high_range_lengths[(fsm->cs)];
						if ( _klen > 0  )
						{
							const unsigned int  *_lower;
							const unsigned int  *_mid;
							const unsigned int  *_upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 2;
								
								else if ( ((*( p  ))
								)> (*( _mid + 1  ))
								)
								_lower = _mid + 2;
								
								else
								{
									_trans += ( unsigned int  ) ((_mid - _keys)>>1);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							_trans += ( unsigned int  ) _klen;
							
						}
						
					}
					
					
					_ckeys = _high_cond_keys + _high_trans_offsets[_trans];
					_klen = ( int ) _high_trans_lengths[_trans];
					_cond = ( unsigned int  ) _high_trans_offsets[_trans];
					_have = 0;
					_cpc = 0;
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < ( int ) (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( _cpc > ( int ) (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_cond += ( unsigned int  ) (_mid - _ckeys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							(fsm->cs) = -1;
							_cont = 0;
						}
						
					}
				}
				
				if ( _cont == 1  )
				{
					(fsm->cs) = ( int ) _high_cond_targs[_cond];
					if ( _high_cond_actions[_cond]!= 0  )
					{
						_acts = _high_actions + _high_cond_actions[_cond];
						_nacts = ( unsigned int  ) (*( _acts  ))
						;
						_acts += 1;
						while ( _nacts > 0  )
						{
							switch ( (*( _acts  ))
							) {
								case 0 :
								{
									printf("gothigh1\n");
								}
								
								break;
								case 1 :
								{
									printf("gothigh1\n");
								}
								
								break;
								case 2 :
								{
									printf("gothigh2\n");
								}
								
								break;
								case 3 :
								{
									printf("else\n");
								}
								
								break;
								
							}
							_nacts -= 1;
							_acts += 1;
						}
						
					}
					
					
					if ( _cont == 1  )
					p += 1;
					
				}
				
			}
			
		}
		
	}
}

int high_finish( struct high *fsm )
{
	if ( fsm->cs == high_error )
	return -1;
	if ( fsm->cs >= high_first_final )
	return 1;
	return 0;
}

struct high high;

#define BUFSIZE 1024
char cbuf[BUFSIZE];
unsigned int buf[BUFSIZE];
int buflen = 0;
char numbuf[9];
int numlen = 0;

struct tokenizer
{
	int cs;
};



static const char  _tokenizer_actions [] = { 0, 1, 0, 1, 1, 1, 2, 2, 1, 2, 0 ,  };
static const char  _tokenizer_key_offsets [] = { 0, 0, 7, 0 ,  };
static const char  _tokenizer_trans_keys [] = { 32, 9, 13, 48, 57, 97, 102, 32, 9, 13, 48, 57, 97, 102, 0 ,  };
static const char  _tokenizer_single_lengths [] = { 0, 1, 1, 0 ,  };
static const char  _tokenizer_range_lengths [] = { 0, 3, 3, 0 ,  };
static const char  _tokenizer_index_offsets [] = { 0, 0, 5, 0 ,  };
static const char  _tokenizer_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _tokenizer_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 ,  };
static const char  _tokenizer_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _tokenizer_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _tokenizer_cond_targs [] = { 1, 1, 2, 2, 0, 1, 1, 2, 2, 0, 0 ,  };
static const char  _tokenizer_cond_actions [] = { 0, 0, 1, 1, 0, 3, 3, 1, 1, 0, 0 ,  };
static const char  _tokenizer_eof_actions [] = { 0, 5, 7, 0 ,  };
static const char  _tokenizer_nfa_targs [] = { 0, 0 ,  };
static const char  _tokenizer_nfa_offsets [] = { 0, 0, 0, 0 ,  };
static const char  _tokenizer_nfa_push_actions [] = { 0, 0 ,  };
static const char  _tokenizer_nfa_pop_trans [] = { 0, 0 ,  };
static const int  tokenizer_start  = 1;
static const int  tokenizer_first_final  = 1;
static const int  tokenizer_error  = 0;
static const int  tokenizer_en_main  = 1;
void tokenizer_init( struct tokenizer *fsm )
{

	{
		(fsm->cs) = ( int ) tokenizer_start;
	}
}

void tokenizer_execute( struct tokenizer *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	const char *eof = pe;
	
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		while ( _cont == 1  )
		{
		
			if ( (fsm->cs) == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						const char  *__acts;
						unsigned int __nacts;
						__acts = _tokenizer_actions + _tokenizer_eof_actions[(fsm->cs)];
						__nacts = ( unsigned int  ) (*( __acts  ))
						;
						__acts += 1;
						while ( __nacts > 0  )
						{
							switch ( (*( __acts  ))
							) {
								case 1 :
								{
									numbuf[numlen] = 0;
									numlen = 0;
									
									/* Store the number in the buf. If the buf is full then 
									* flush and reset the buffer. */
									buf[buflen++] = strtoul( numbuf, 0, 16 );
									if ( buflen == BUFSIZE ) {
										high_execute( &high, buf, BUFSIZE );
										buflen = 0;
									}
									
								}
								
								break;
								case 2 :
								{
									if ( buflen > 0 )
									high_execute( &high, buf, buflen );
									if ( high_finish( &high ) > 0 )
									printf("ACCEPT\n");
									else
									printf("FAIL\n");
									
								}
								
								break;
								
							}
							__nacts -= 1;
							__acts += 1;
						}
						
					}
					
				}
				
				
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _tokenizer_trans_keys + _tokenizer_key_offsets[(fsm->cs)];
					_trans = ( unsigned int  ) _tokenizer_index_offsets[(fsm->cs)];
					_have = 0;
					_klen = ( int ) _tokenizer_single_lengths[(fsm->cs)];
					if ( _klen > 0  )
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( ((*( p  ))
							)< (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( ((*( p  ))
							)> (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_trans += ( unsigned int  ) (_mid - _keys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += ( unsigned int  ) _klen;
						}
						
					}
					
					
					if ( _have == 0  )
					{
						_klen = ( int ) _tokenizer_range_lengths[(fsm->cs)];
						if ( _klen > 0  )
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 2;
								
								else if ( ((*( p  ))
								)> (*( _mid + 1  ))
								)
								_lower = _mid + 2;
								
								else
								{
									_trans += ( unsigned int  ) ((_mid - _keys)>>1);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							_trans += ( unsigned int  ) _klen;
							
						}
						
					}
					
					
					_ckeys = _tokenizer_cond_keys + _tokenizer_trans_offsets[_trans];
					_klen = ( int ) _tokenizer_trans_lengths[_trans];
					_cond = ( unsigned int  ) _tokenizer_trans_offsets[_trans];
					_have = 0;
					_cpc = 0;
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < ( int ) (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( _cpc > ( int ) (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_cond += ( unsigned int  ) (_mid - _ckeys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							(fsm->cs) = 0;
							_cont = 0;
						}
						
					}
				}
				
				if ( _cont == 1  )
				{
					(fsm->cs) = ( int ) _tokenizer_cond_targs[_cond];
					if ( _tokenizer_cond_actions[_cond]!= 0  )
					{
						_acts = _tokenizer_actions + _tokenizer_cond_actions[_cond];
						_nacts = ( unsigned int  ) (*( _acts  ))
						;
						_acts += 1;
						while ( _nacts > 0  )
						{
							switch ( (*( _acts  ))
							) {
								case 0 :
								{
									if ( numlen < 8 )
									numbuf[numlen++] = (((*( p  ))
									));
									
								}
								
								break;
								case 1 :
								{
									numbuf[numlen] = 0;
									numlen = 0;
									
									/* Store the number in the buf. If the buf is full then 
									* flush and reset the buffer. */
									buf[buflen++] = strtoul( numbuf, 0, 16 );
									if ( buflen == BUFSIZE ) {
										high_execute( &high, buf, BUFSIZE );
										buflen = 0;
									}
									
								}
								
								break;
								
							}
							_nacts -= 1;
							_acts += 1;
						}
						
					}
					
					
					if ( (fsm->cs) == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
				
			}
			
		}
		
	}
}

int tokenizer_finish( struct tokenizer *fsm )
{
	if ( fsm->cs == tokenizer_error )
	return -1;
	if ( fsm->cs >= tokenizer_first_final )
	return 1;
	return 0;
}

struct tokenizer tok;

void test( char *cbuf )
{
	int len = strlen( cbuf );
	high_init( &high );
	tokenizer_init( &tok );
	tokenizer_execute( &tok, cbuf, len );
	if ( tokenizer_finish( &tok ) <= 0 )
	printf("Tokenizer FAIL\n");
}

char data[] =
"10 20 30 40 50 200 300 400 \n"
"d0000000 f0000000 fd000000 fe000000\n"
"ff000000 ffffffffffffffffffffffffff\n"
"ff\n";

int main()
{
	test( data );
	return 0;
}

