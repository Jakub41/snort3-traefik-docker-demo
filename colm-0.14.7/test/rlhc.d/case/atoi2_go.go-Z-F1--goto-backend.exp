package main
import "fmt"

var neg  int ;
var value  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _state_chart_trans_keys [] byte  = [] byte  { 1, 0, 4, 4, 0, 4, 2, 4, 0 }
var _state_chart_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0  }
var _state_chart_index_offsets [] int8  = [] int8  { 0, 0, 1, 6, 0  }
var _state_chart_indices [] int8  = [] int8  { 0, 2, 1, 1, 1, 0, 3, 4, 5, 0  }
var _state_chart_index_defaults [] int8  = [] int8  { 0, 1, 1, 1, 0  }
var _state_chart_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, 0  }
var _state_chart_cond_targs [] int8  = [] int8  { 2, 0, 3, 1, 1, 2, 0  }
var _state_chart_cond_actions [] int8  = [] int8  { 1, 0, 2, 3, 4, 5, 0  }
var _state_chart_nfa_targs [] int8  = [] int8  { 0, 0  }
var _state_chart_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0  }
var _state_chart_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _state_chart_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var state_chart_start  int  = 3
var state_chart_first_final  int  = 3
var state_chart_error  int  = 0
var state_chart_en_main  int  = 3
func prepare() {
	value = 0;
	neg = 0;
	
	{
		cs = int(state_chart_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		var  _trans  int   = 0
		var  _keys int
		var  _inds int
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume :
		_keys = int((cs<<1) );
		_inds = int(_state_chart_index_offsets[cs] );
		switch {
			case ( data[p ]) <= 57 && ( data[p ]) >= 10 :
			{
				var  _ic  int   = int(_state_chart_char_class[int(( data[p ]) )- 10])
				switch {
					case _ic <= int(_state_chart_trans_keys[_keys+1 ])&& _ic >= int(_state_chart_trans_keys[_keys ]):
					_trans = int(_state_chart_indices[_inds + int(( _ic - int(_state_chart_trans_keys[_keys ]))  )]);
					
					default:
					_trans = int(_state_chart_index_defaults[cs]);
					
				}
			}
			
			default:
			{
				_trans = int(_state_chart_index_defaults[cs]);
			}
			
			
		}
		goto _match_cond;
		
		_match_cond :
		cs = int(_state_chart_cond_targs[_trans]);
		if _state_chart_cond_actions[_trans] == 0  {
			goto _again;
			
			
		}
		switch _state_chart_cond_actions[_trans]  {
			case 3 :
			{neg = 0;
				value = 0;
			}
			
			break;
			case 1 :
			{value = value * 10 + ( int ) ( (( data[p ])) - 48 )
				;
			}
			
			break;
			case 4 :
			{neg = 0;
				value = 0;
			}
			{neg = 1;
			}
			
			break;
			case 5 :
			{neg = 0;
				value = 0;
			}
			{value = value * 10 + ( int ) ( (( data[p ])) - 48 )
				;
			}
			
			break;
			case 2 :
			{if ( neg != 0 ) {
					value = -1 * value;
					
				}
			}
			{fmt.Print( value );fmt.Print( "\n" );}
			
			break;
			
		}
		
		_again :
		if cs == 0  {
			goto _out;
			
		}
		p+= 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}
func finish() {
	if cs >= state_chart_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"1\n",
	"12\n",
	"222222\n",
	"+2123\n",
	"213 3213\n",
	"-12321\n",
	"--123\n",
	"-99\n",
	" -3000\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
