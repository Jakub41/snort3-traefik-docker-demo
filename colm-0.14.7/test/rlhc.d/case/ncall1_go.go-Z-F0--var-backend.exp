package main
import "fmt"

var top  int ;
var stack [32] int ;
var target  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _ncall1_actions [] int8  = [] int8  { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0  }
var _ncall1_trans_keys [] byte  = [] byte  { 1, 0, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 0, 3, 1, 0, 1, 0, 1, 0, 0 }
var _ncall1_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0  }
var _ncall1_index_offsets [] int8  = [] int8  { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 16, 16, 0  }
var _ncall1_indices [] int8  = [] int8  { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15, 0  }
var _ncall1_index_defaults [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0  }
var _ncall1_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _ncall1_cond_targs [] int8  = [] int8  { 2, 0, 3, 4, 5, 6, 14, 8, 9, 15, 11, 12, 16, 13, 13, 13, 0  }
var _ncall1_cond_actions [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 5, 7, 0  }
var _ncall1_nfa_targs [] int8  = [] int8  { 0, 0  }
var _ncall1_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _ncall1_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _ncall1_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var ncall1_start  int  = 13
var ncall1_first_final  int  = 13
var ncall1_error  int  = 0
var ncall1_en_unused  int  = 1
var ncall1_en_one  int  = 7
var ncall1_en_two  int  = 10
var ncall1_en_main  int  = 13
func prepare() {

	{
		cs = int(ncall1_start);
		top = 0;
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	
	{
		var  _trans  uint   = 0
		var  _have  uint   = 0
		var  _cont  uint   = 1
		var  _acts int
		var  _nacts uint 
		var  _keys int
		var  _inds int
		for _cont == 1  {
			{
			
				if cs == 0  {
					_cont = 0;
					
				}
				_have = 0;
				if p == pe  {
					{
						if _have == 0  {
							_cont = 0;
							
						}
					}
					
				}
				if _cont == 1  {
					{
						if _have == 0  {
							{
								_keys = int((cs<<1) );
								_inds = int(_ncall1_index_offsets[cs] );
								switch {
									case ( data[p ]) <= 119 && ( data[p ]) >= 10 :
									{
										var  _ic  int   = int(_ncall1_char_class[int(( data[p ]) )- 10])
										switch {
											case _ic <= int(_ncall1_trans_keys[_keys+1 ])&& _ic >= int(_ncall1_trans_keys[_keys ]):
											_trans = uint(_ncall1_indices[_inds + int(( _ic - int(_ncall1_trans_keys[_keys ]))  )]);
											
											default:
											_trans = uint(_ncall1_index_defaults[cs]);
											
										}
									}
									
									default:
									{
										_trans = uint(_ncall1_index_defaults[cs]);
									}
									
									
								}
							}
							
						}
						if _cont == 1  {
							{
								cs = int(_ncall1_cond_targs[_trans]);
								if _ncall1_cond_actions[_trans] != 0  {
									{
										_acts = int(_ncall1_cond_actions[_trans] );
										_nacts = uint(_ncall1_actions[_acts ]);
										_acts += 1;
										for _nacts > 0  {
											{
												switch _ncall1_actions[_acts ] {
													case 0 :
													{fmt.Print( "one\n" );{top-= 1;
															cs = stack[top];
														}
														
													}
													
													break;
													case 1 :
													{fmt.Print( "two\n" );{top-= 1;
															cs = stack[top];
														}
														
													}
													
													break;
													case 2 :
													{target = 7;
														{stack[top] = cs;
															top += 1;
															cs = (target);
														} 
													}
													
													break;
													case 3 :
													{target = 10;
														{stack[top] = cs;
															top += 1;
															cs = (target);
														} 
													}
													
													break;
													
												}
												_nacts -= 1;
												_acts += 1;
											}
											
										}
									}
									
									
								}
								if cs == 0  {
									_cont = 0;
									
								}
								if _cont == 1  {
									p += 1;
									
								}
							}
						}
					}
					
				}
			}
			
		}
	}
}
func finish() {
	if cs >= ncall1_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"1one2two1one\n",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
