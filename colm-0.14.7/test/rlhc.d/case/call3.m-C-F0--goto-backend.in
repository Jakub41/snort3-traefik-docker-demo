host( "working/call3.rl", 1 ) @{/*
	* @@LANG: obj-c
	* @@PROHIBIT_FEATFLAGS: --var-backend
	*/
	
	#include <stdio.h>
	#include <string.h>
	
	#import <Foundation/Foundation.h>
	
	int num = 0;
	
	@@interface CallTest : NSObject
	{
		@@public 
		/* State machine operation data. */
		int cs, top, stack[32];
	};
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	- (void) initFsm;
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	- (void) executeWithData:(const char *)data len:(int)len;
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	- (int) finish;
	
	@@end
	
	@@implementation CallTest
	
	
	
}@
array s8 _CallTest_actions( 0, 3 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 };

array char _CallTest_trans_keys( 0, 13 ) = { 1, 0, 3, 6, 2, 4, 0, 0, 5, 5, 2, 2, 8, 11, 12, 12, 12, 12, 11, 11, 12, 12, 4, 4, 9, 9, 8, 8, 13, 13, 8, 8, 10, 10, 1, 0, 11, 11, 7, 7, 7, 7, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0 };

array s8 _CallTest_char_class( 0, 13 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 8, 1, 1, 1, 1, 1, 9, 1, 1, 10, 11, 1, 1, 12, 1, 1, 1, 13, 0 };

array s8 _CallTest_index_offsets( 0, 27 ) = { 0, 0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 27, 27, 27, 0 };

array s8 _CallTest_indices( 0, 21 ) = { 0, 0, 1, 2, 3, 0, 0, 4, 5, 6, 7, 1, 1, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 19, 20, 21, 0 };

array s8 _CallTest_index_defaults( 0, 22 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 22, 1, 1, 1, 1, 0 };

array s8 _CallTest_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _CallTest_cond_targs( 0, 25 ) = { 2, 0, 4, 3, 23, 5, 6, 7, 12, 8, 9, 10, 11, 3, 14, 15, 16, 17, 24, 19, 20, 21, 25, 0 };

array s8 _CallTest_cond_actions( 0, 7 ) = { 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0 };

array s8 _CallTest_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _CallTest_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _CallTest_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _CallTest_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int CallTest_start = 1;
value int CallTest_first_final = 23;
value int CallTest_error = 0;

value int CallTest_en_even = 13;
value int CallTest_en_odd = 18;
value int CallTest_en_fail = 22;
value int CallTest_en_main = 1;

host( "working/call3.rl", 67 ) @{
	
	- (void) initFsm;
	{
		num = 0;
	}@
	{
		cs = cast(int)CallTest_start;
		top = 0;
	}
	host( "working/call3.rl", 72 ) @{
	}
	
	- (void) executeWithData:(const char *)data len:(int)len;
	{
		const char *p = data;
		const char *pe = data + len;
	}@
	{
		int _trans = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _CallTest_trans_keys, (cs<<1) );
				_inds = offset( _CallTest_indices, _CallTest_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 118 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_CallTest_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _CallTest_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _CallTest_trans_keys, _keys ) )
					_trans = cast(int)deref( _CallTest_indices, _inds + cast(int)( _ic - cast(int)deref( _CallTest_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_CallTest_index_defaults[cs];
				}
				else {
					_trans = cast(int)_CallTest_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_CallTest_cond_targs[_trans];
				
				if ( _CallTest_cond_actions[_trans] == 0 )
				goto _again;
				
				_acts = offset( _CallTest_actions, _CallTest_cond_actions[_trans] );
				_nacts = cast(uint)deref( _CallTest_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _CallTest_actions, _acts ) )
					{
						case 0 {
							host( "working/call3.rl", 44 ) ${
								if ( num & 1 )
								${stack[top] = cs; top += 1;cs = 18; goto _again;}$else
								${stack[top] = cs; top += 1;cs = 13; goto _again;}$}$
						}
						case 1 {
							host( "working/call3.rl", 52 ) ${${p = p - 1; }$ ${top -= 1;cs = stack[top];goto _again;}$}$
						}
						case 2 {
							host( "working/call3.rl", 53 ) ${${p = p - 1; }$ ${top -= 1;cs = stack[top];goto _again;}$}$
						}
						case 3 {
							host( "working/call3.rl", 54 ) ${ num = num * 10 + (={( deref( data, p ))}= - '0'); }$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/call3.rl", 79 ) @{
	}
	
	- (int) finish;
	{
		if ( cs == CallTest_error ) 
		return -1;
		return ( cs >= CallTest_first_final ) ? 1 : 0;
	}
	
	@@end
	
	#define BUFSIZE 1024
	
	void test( char *buf )
	{   
		CallTest *test = [[CallTest alloc] init];
		[test initFsm];
		[test executeWithData:buf len:strlen(buf)];
		if ( [test finish] > 0 )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	int main()
	{
		test( "78 even\n" );
		test( "89 odd\n" );
		test( "1 even\n" );
		test( "0 odd\n" );
		test( "OA ok\n" );
		test( "OA error1\n" );
		test( "OA error2\n" );
		return 0;
	}
	
}@