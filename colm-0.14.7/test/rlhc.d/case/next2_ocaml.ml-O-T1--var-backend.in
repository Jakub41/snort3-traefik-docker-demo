host( "working/next2_ocaml.rl", 1 ) @{(*
	* @@LANG: ocaml
	* @@GENERATED: true
	*)
	
	let target = ref 0
	let last = ref 0
	
	
	
	
	
	
}@
array s8 _next2_key_offsets( 0, 22 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 22, 22, 22, 0 };

array int _next2_trans_keys( 0, 120 ) = { 120, 117, 110, 117, 115, 101, 100, 111, 110, 101, 116, 119, 111, 116, 104, 114, 101, 101, 10, 49, 50, 51, 0 };

array s8 _next2_single_lengths( 0, 4 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0 };

array s8 _next2_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _next2_index_offsets( 0, 44 ) = { 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 41, 42, 43, 44, 0 };

array s8 _next2_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _next2_trans_offsets( 0, 44 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 0 };

array s8 _next2_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _next2_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _next2_cond_targs( 0, 23 ) = { 19, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 20, 0, 9, 0, 10, 0, 21, 0, 12, 0, 13, 0, 22, 0, 15, 0, 16, 0, 17, 0, 18, 0, 23, 0, 19, 19, 19, 1, 0, 0, 0, 0, 0, 0 };

array s8 _next2_cond_actions( 0, 6 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 4, 5, 6, 0, 0, 0, 0, 0, 0 };

array s8 _next2_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _next2_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _next2_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _next2_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int next2_start = 19;
value int next2_first_final = 19;
value int next2_error = 0;

value int next2_en_unused = 2;
value int next2_en_one = 8;
value int next2_en_two = 11;
value int next2_en_three = 14;
value int next2_en_main = 19;

host( "working/next2_ocaml.rl", 59 ) @{
	
	let exec data = 
	let buffer = String.create(1024) in 
	let blen :int ref = ref 0 in
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
}@
{
	cs = cast(int)next2_start;
}
host( "working/next2_ocaml.rl", 67 ) @{
}@
{
	int _klen;
	index int _keys;
	index s8 _ckeys;
	int _cpc;
	uint _trans;
	uint _cond = 0;
	uint _have = 0;
	uint _cont = 1;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _next2_trans_keys, _next2_key_offsets[cs] );
				_trans = cast(uint)_next2_index_offsets[cs];
				_have = 0;
				
				_klen = cast(int)_next2_single_lengths[cs];
				if ( _klen > 0 ) {
					index int _lower;
					index int _mid;
					index int _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( _upper >= _lower && _have == 0 ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _next2_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _next2_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
				}
				
				if ( _have == 0 ) {
					_klen = cast(int)_next2_range_lengths[cs];
					if ( _klen > 0 ) {
						index int _lower;
						index int _mid;
						index int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _next2_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _next2_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								_have = 1;
							}
						}
						if ( _have == 0 )
						_trans += cast(uint)_klen;
					}
				}
				
				_ckeys = offset( _next2_cond_keys, _next2_trans_offsets[_trans] );
				_klen = cast(int)_next2_trans_lengths[_trans];
				_cond = cast(uint)_next2_trans_offsets[_trans];
				_have = 0;
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( _have == 0 && _lower <= _upper ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _next2_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _next2_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						cs = 0;
						_cont = 0;
					}
				}
			}
			if ( _cont == 1 ) {
				cs = cast(int)_next2_cond_targs[_cond];
				
				switch ( _next2_cond_actions[_cond] ) {
					case 1 {
						host( "working/next2_ocaml.rl", 14 ) ${print_string( "one\n" );
							target := 19;
							${cs = host( "-", 1 ) ={target.contents}=;}$
						}$
					}
					case 2 {
						host( "working/next2_ocaml.rl", 19 ) ${print_string( "two\n" );
							target := 19;
							${cs = host( "-", 1 ) ={target.contents}=;}$
						}$
					}
					case 3 {
						host( "working/next2_ocaml.rl", 24 ) ${print_string( "three\n" );
							target := 19;
							${cs = host( "-", 1 ) ={target.contents}=;}$
						}$
					}
					case 4 {
						host( "working/next2_ocaml.rl", 30 ) ${target := 8;
							${cs = host( "-", 1 ) ={target.contents}=;}$
							last := 1;
						}$
					}
					case 5 {
						host( "working/next2_ocaml.rl", 35 ) ${target := 11;
							${cs = host( "-", 1 ) ={target.contents}=;}$
							last := 2;
						}$
					}
					case 6 {
						host( "working/next2_ocaml.rl", 41 ) ${if last .contents == 2  then
							begin
							target := 14;
							${cs = host( "-", 1 ) ={target.contents}=;}$
							
							end 
							;
							last := 3;
						}$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/next2_ocaml.rl", 68 ) @{
	if !cs >= next2_first_final then
	print_string "ACCEPT\n"
	else
	print_string "FAIL\n"
	;;
	
	let () =
	exec "1one3x2two3three\n";
	()
	;;
	
}@