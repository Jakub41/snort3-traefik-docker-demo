package main
import "fmt"

var comm  byte ;
var top  int ;
var stack [32] int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _gotocallret_trans_keys [] byte  = [] byte  { 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 4, 5, 3, 3, 3, 5, 1, 0, 4, 5, 3, 3, 0 }
var _gotocallret_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0  }
var _gotocallret_index_offsets [] int8  = [] int8  { 0, 0, 1, 2, 3, 4, 6, 7, 10, 10, 12, 0  }
var _gotocallret_indices [] int8  = [] int8  { 1, 2, 4, 6, 8, 8, 9, 10, 0, 10, 8, 8, 9, 0  }
var _gotocallret_index_defaults [] int8  = [] int8  { 0, 0, 0, 3, 5, 7, 7, 0, 11, 7, 7, 0  }
var _gotocallret_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _gotocallret_cond_targs [] int8  = [] int8  { 0, 2, 7, 4, 8, 4, 8, 0, 9, 10, 1, 0, 0  }
var _gotocallret_cond_actions [] int8  = [] int8  { 1, 2, 3, 5, 6, 0, 7, 8, 0, 0, 9, 0, 0  }
var _gotocallret_eof_actions [] int8  = [] int8  { 0, 1, 1, 4, 4, 8, 8, 0, 4, 0, 0, 0  }
var _gotocallret_nfa_targs [] int8  = [] int8  { 0, 0  }
var _gotocallret_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _gotocallret_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _gotocallret_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var gotocallret_start  int  = 7
var gotocallret_first_final  int  = 7
var gotocallret_error  int  = 0
var gotocallret_en_garble_line  int  = 3
var gotocallret_en_alp_comm  int  = 5
var gotocallret_en_dig_comm  int  = 6
var gotocallret_en_main  int  = 7
func prepare() {

	{
		cs = int(gotocallret_start);
		top = 0;
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _trans  uint   = 0
		var  _have  uint   = 0
		var  _cont  uint   = 1
		var  _keys int
		var  _inds int
		for _cont == 1  {
			{
			
				if cs == 0  {
					_cont = 0;
					
				}
				_have = 0;
				if p == pe  {
					{
						if p == eof  {
							{
								if _have == 0  {
									{
										switch _gotocallret_eof_actions[cs]  {
											case 4 :
											{fmt.Print( "error: failed to recover\n" );}
											
											break;
											case 8 :
											{{p = p - 1;
												} 
												{top-= 1;
													cs = stack[top];
												}
											}
											
											break;
											case 1 :
											{{p = p - 1;
												}
												{cs = 3;
												}}
											
											break;
											
										}
									}
									
								}
							}
							
							
						}
						if _have == 0  {
							_cont = 0;
							
						}
					}
					
				}
				if _cont == 1  {
					{
						if _have == 0  {
							{
								_keys = int((cs<<1) );
								_inds = int(_gotocallret_index_offsets[cs] );
								switch {
									case ( data[p ]) <= 122 && ( data[p ]) >= 10 :
									{
										var  _ic  int   = int(_gotocallret_char_class[int(( data[p ]) )- 10])
										switch {
											case _ic <= int(_gotocallret_trans_keys[_keys+1 ])&& _ic >= int(_gotocallret_trans_keys[_keys ]):
											_trans = uint(_gotocallret_indices[_inds + int(( _ic - int(_gotocallret_trans_keys[_keys ]))  )]);
											
											default:
											_trans = uint(_gotocallret_index_defaults[cs]);
											
										}
									}
									
									default:
									{
										_trans = uint(_gotocallret_index_defaults[cs]);
									}
									
									
								}
							}
							
						}
						if _cont == 1  {
							{
								cs = int(_gotocallret_cond_targs[_trans]);
								switch _gotocallret_cond_actions[_trans]  {
									case 5 :
									{fmt.Print( "error: garbling line\n" );}
									
									break;
									case 7 :
									{{cs = 7;
										}}
									
									break;
									case 8 :
									{{p = p - 1;
										} 
										{top-= 1;
											cs = stack[top];
										}
									}
									
									break;
									case 9 :
									{comm = (( data[p ]));
									}
									
									break;
									case 3 :
									{fmt.Print( "correct command\n" );}
									
									break;
									case 1 :
									{{p = p - 1;
										}
										{cs = 3;
										}}
									
									break;
									case 6 :
									{fmt.Print( "error: garbling line\n" );}
									{{cs = 7;
										}}
									
									break;
									case 2 :
									{if ( comm >= 97 ) {
											{stack[top] = cs;
												top += 1;
												cs = 5;
											}} else {
											{stack[top] = cs;
												top += 1;
												cs = 6;
											}}
									}
									{fmt.Print( "prints\n" );}
									
									break;
									
								}
								if cs == 0  {
									_cont = 0;
									
								}
								if _cont == 1  {
									p += 1;
									
								}
							}
						}
					}
					
				}
			}
			
		}
	}
}
func finish() {
	if cs >= gotocallret_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"lkajsdf\n",
	"2134\n",
	"(\n",
	"\n",
	"*234234()0909 092 -234aslkf09`1 11\n",
	"1\n",
	"909\n",
	"1 a\n",
	"11 1\n",
	"a 1\n",
	"aa a\n",
	"1 1\n",
	"1 123456\n",
	"a a\n",
	"a abcdef\n",
	"h",
	"a aa1",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
