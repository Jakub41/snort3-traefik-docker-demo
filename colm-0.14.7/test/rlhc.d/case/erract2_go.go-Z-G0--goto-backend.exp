package main
import "fmt"







var cs int;
var blen int;
var buffer [1024] byte;

var _erract_actions [] int8  = [] int8  { 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0  }
var _erract_eof_actions [] int8  = [] int8  { 0, 10, 15, 15, 15, 15, 20, 0, 0  }
var _erract_nfa_targs [] int8  = [] int8  { 0, 0  }
var _erract_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _erract_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _erract_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var erract_start  int  = 1
var erract_first_final  int  = 7
var erract_error  int  = 0
var erract_en_main  int  = 1
func prepare() {

	{
		cs = int(erract_start);
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _acts int
		var  _nacts uint 
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume:
		switch cs  {
			case 1:
			if ( data[p ]) == 104  {
				{
					goto ctr1;
				}
				
			}
			{
				goto ctr0;
			}
			case 0:
			goto _out;
			case 2:
			if ( data[p ]) == 101  {
				{
					goto ctr3;
				}
				
			}
			{
				goto ctr2;
			}
			case 3:
			if ( data[p ]) == 108  {
				{
					goto ctr4;
				}
				
			}
			{
				goto ctr2;
			}
			case 4:
			if ( data[p ]) == 108  {
				{
					goto ctr5;
				}
				
			}
			{
				goto ctr2;
			}
			case 5:
			if ( data[p ]) == 111  {
				{
					goto ctr6;
				}
				
			}
			{
				goto ctr2;
			}
			case 6:
			if ( data[p ]) == 10  {
				{
					goto ctr8;
				}
				
			}
			{
				goto ctr7;
			}
			case 7:
			{
				goto ctr9;
			}
			
		}
		ctr9: cs = 0;
		goto _again;
		ctr0: cs = 0;
		goto f1;
		ctr2: cs = 0;
		goto f3;
		ctr7: cs = 0;
		goto f5;
		ctr1: cs = 2;
		goto _again;
		ctr3: cs = 3;
		goto _again;
		ctr4: cs = 4;
		goto _again;
		ctr5: cs = 5;
		goto _again;
		ctr6: cs = 6;
		goto _again;
		ctr8: cs = 7;
		goto _again;
		
		f1: _acts = int(1 );
		goto execFuncs;
		f3: _acts = int(4 );
		goto execFuncs;
		f5: _acts = int(7 );
		goto execFuncs;
		
		execFuncs:
		_nacts = uint(_erract_actions[_acts ]);
		_acts += 1;
		for _nacts > 0  {
			{
				switch _erract_actions[_acts ] {
					case 0:
					{fmt.Print( "err_start\n" );}
					
					break;
					case 1:
					{fmt.Print( "err_all\n" );}
					
					break;
					case 2:
					{fmt.Print( "err_middle\n" );}
					
					break;
					case 3:
					{fmt.Print( "err_out\n" );}
					
					break;
					
				}
				_acts += 1;
				_nacts -= 1;
			}
			
			
		}
		goto _again;
		
		_again:
		if cs == 0  {
			goto _out;
			
		}
		p += 1;
		if p != pe  {
			goto _resume;
			
		}
		_test_eof: {}
		if p == eof  {
			{
				var  __acts int
				var  __nacts uint 
				__acts = int(_erract_eof_actions[cs] );
				__nacts = uint(_erract_actions[__acts ]);
				__acts += 1;
				for __nacts > 0  {
					{
						switch _erract_actions[__acts ] {
							case 0:
							{fmt.Print( "err_start\n" );}
							
							break;
							case 1:
							{fmt.Print( "err_all\n" );}
							
							break;
							case 2:
							{fmt.Print( "err_middle\n" );}
							
							break;
							case 3:
							{fmt.Print( "err_out\n" );}
							
							break;
							case 4:
							{fmt.Print( "eof_start\n" );}
							
							break;
							case 5:
							{fmt.Print( "eof_all\n" );}
							
							break;
							case 6:
							{fmt.Print( "eof_middle\n" );}
							
							break;
							case 7:
							{fmt.Print( "eof_out\n" );}
							
							break;
							
						}
						__acts += 1;
						__nacts -= 1;
					}
					
				}
			}
			
			
		}
		_out: {}
	}
}
func finish() {
	if cs >= erract_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"",
	"h",
	"x",
	"he",
	"hx",
	"hel",
	"hex",
	"hell",
	"helx",
	"hello",
	"hellx",
	"hello\n",
	"hellox",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
