host( "working/ruby1.rl", 1 ) @{#
	# @@LANG: ruby
	#
	# Test the host language scanning for ruby.
	#
	
	# %%{
		a = 1
		b = /%%\{\}/;
		
		
		
		# %%{
			e = 1
			f = /%%\{\}/;
			
		}@
		array s8 _ruby1_actions( 0, 1 ) = { 0, 1, 0, 0 };
		
		array char _ruby1_trans_keys( 0, 3 ) = { 1, 0, 3, 3, 2, 3, 0, 2, 1, 0, 0 };
		
		array s8 _ruby1_char_class( 0, 3 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0 };
		
		array s8 _ruby1_index_offsets( 0, 6 ) = { 0, 0, 1, 3, 6, 0 };
		
		array s8 _ruby1_indices( 0, 3 ) = { 0, 2, 0, 3, 1, 2, 0 };
		
		array s8 _ruby1_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 0 };
		
		array s8 _ruby1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, 0 };
		
		array s8 _ruby1_cond_targs( 0, 4 ) = { 2, 0, 3, 4, 0 };
		
		array s8 _ruby1_cond_actions( 0, 1 ) = { 0, 0, 0, 1, 0 };
		
		array s8 _ruby1_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _ruby1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };
		
		array s8 _ruby1_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _ruby1_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int ruby1_start = 1;
		value int ruby1_first_final = 4;
		value int ruby1_error = 0;
		
		value int ruby1_en_main = 1;
		
		host( "working/ruby1.rl", 28 ) @{
			
			# %%{
				g = 1
				h = /%%\{\}/;
				
				def run_machine( data )
				p = 0;
				pe = data.length
				cs = 0
				
			}@
			{
				cs = cast(int)ruby1_start;
			}
			host( "working/ruby1.rl", 39 ) @{
			}@
			{
				uint _trans = 0;
				uint _have = 0;
				uint _cont = 1;
				index s8 _acts;
				uint _nacts;
				index char _keys;
				index s8 _inds;
				while ( _cont == 1 ) {
					
					if ( cs == 0 )
					_cont = 0;
					_have = 0;
					if ( p == pe ) {
						if ( _have == 0 )
						_cont = 0;
					}
					if ( _cont == 1 ) {
						if ( _have == 0 ) {
							_keys = offset( _ruby1_trans_keys, (cs<<1) );
							_inds = offset( _ruby1_indices, _ruby1_index_offsets[cs] );
							
							if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 10 )
							{
								int _ic = cast(int)_ruby1_char_class[cast(int)( deref( data, p )) - 10];
								if ( _ic <= cast(int)deref( _ruby1_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _ruby1_trans_keys, _keys ) )
								_trans = cast(uint)deref( _ruby1_indices, _inds + cast(int)( _ic - cast(int)deref( _ruby1_trans_keys, _keys ) )  ); 
								else
								_trans = cast(uint)_ruby1_index_defaults[cs];
							}
							else {
								_trans = cast(uint)_ruby1_index_defaults[cs];
							}
							
						}
						if ( _cont == 1 ) {
							cs = cast(int)_ruby1_cond_targs[_trans];
							
							if ( _ruby1_cond_actions[_trans] != 0 ) {
								_acts = offset( _ruby1_actions, _ruby1_cond_actions[_trans] );
								_nacts = cast(uint)deref( _ruby1_actions, _acts );
								_acts += 1;
								while ( _nacts > 0 )
								{
									switch ( deref( _ruby1_actions, _acts ) )
									{
										case 0 {
											host( "working/ruby1.rl", 14 ) ${
												
												# }
											c = 1
											d = /\}/
										puts "NL"
									}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/ruby1.rl", 40 ) @{
		if  cs >= ruby1_first_final
		puts "ACCEPT"
		else
		puts "FAIL"
		end
		end
		
		inp = [
		"abc1231\n",
		]
		
		inp.each { |str| run_machine(str) }
		
	}@