#include <string.h>
#include <stdio.h>

int i ;
int j ;
int k ;





static const char  _foo_nfa_targs [] = { 0, 0 ,  };
static const char  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_nfa_push_actions [] = { 0, 0 ,  };
static const char  _foo_nfa_pop_trans [] = { 0, 0 ,  };
static const int  foo_start  = 1;
static const int  foo_first_final  = 15;
static const int  foo_error  = 0;
static const int  foo_en_main  = 1;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) foo_start;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	
	{
		int _nbreak;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume:
		switch ( cs  ) {
			case 1:
			if ( 48 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 49  )
			{
				goto ctr0;
			}
			
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			if ( 48 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 49  )
			{
				goto ctr2;
			}
			
			{
				goto ctr1;
			}
			case 3:
			if ( 48 <= ((*( p  ))
			)&& ((*( p  ))
			)<= 49  )
			{
				goto ctr3;
			}
			
			{
				goto ctr1;
			}
			case 4:
			switch ( ((*( p  ))
			) ) {
				case 97:
				{
					goto ctr4;
				}
				case 98:
				{
					int ck = 0;
					if ( (j != 0) )
					ck += 1;
					
					if ( 1 <= ck  )
					{		goto ctr5;
					}
					
					goto ctr6;
					
				}
				
			}
			{
				goto ctr1;
			}
			case 5:
			switch ( ((*( p  ))
			) ) {
				case 97:
				{
					goto ctr7;
				}
				case 98:
				{
					int ck = 0;
					if ( (i != 0) )
					ck += 1;
					
					if ( (j != 0) )
					ck += 2;
					
					if ( (k != 0) )
					ck += 4;
					
					if ( ck < 4  )
					{
						if ( ck < 2  )
						{
							if ( 1 <= ck  )
							{				goto ctr8;
							}
							
						} 
						else if ( ck > 2  )
						{
							goto ctr9;
						} 
						else
						{
							goto ctr5;
						}
						
					} 
					else if ( ck > 4  )
					{
						if ( ck < 6  )
						{
							goto ctr11;
						} 
						else if ( ck > 6  )
						{
							goto ctr13;
						} 
						else
						{
							goto ctr12;
						}
						
					} 
					else
					{
						goto ctr10;
					}
					
					goto ctr6;
					
				}
				
			}
			{
				goto ctr1;
			}
			case 6:
			switch ( ((*( p  ))
			) ) {
				case 97:
				{
					goto ctr7;
				}
				case 98:
				{
					int ck = 0;
					if ( (j != 0) )
					ck += 1;
					
					if ( (k != 0) )
					ck += 2;
					
					if ( ck < 2  )
					{
						if ( 1 <= ck  )
						{			goto ctr5;
						}
						
					} 
					else if ( ck > 2  )
					{
						goto ctr12;
					} 
					else
					{
						goto ctr10;
					}
					
					goto ctr6;
					
				}
				
			}
			{
				goto ctr1;
			}
			case 7:
			if ( ((*( p  ))
			)== 99  )
			{
				goto ctr14;
			}
			
			{
				goto ctr1;
			}
			case 8:
			if ( ((*( p  ))
			)== 10  )
			{
				goto ctr15;
			}
			
			{
				goto ctr1;
			}
			case 15:
			{
				goto ctr1;
			}
			case 9:
			if ( ((*( p  ))
			)== 99  )
			{
				goto ctr16;
			}
			
			{
				goto ctr1;
			}
			case 10:
			if ( ((*( p  ))
			)== 99  )
			{
				goto ctr17;
			}
			
			{
				goto ctr1;
			}
			case 11:
			if ( ((*( p  ))
			)== 99  )
			{
				goto ctr18;
			}
			
			{
				goto ctr1;
			}
			case 12:
			if ( ((*( p  ))
			)== 99  )
			{
				goto ctr19;
			}
			
			{
				goto ctr1;
			}
			case 13:
			if ( ((*( p  ))
			)== 99  )
			{
				goto ctr20;
			}
			
			{
				goto ctr1;
			}
			case 14:
			if ( ((*( p  ))
			)== 99  )
			{
				goto ctr21;
			}
			
			{
				goto ctr1;
			}
			
		}
		ctr1: cs = 0;
		goto _again;
		ctr0: cs = 2;
		goto f0;
		ctr2: cs = 3;
		goto f1;
		ctr3: cs = 4;
		goto f2;
		ctr4: cs = 5;
		goto _again;
		ctr7: cs = 6;
		goto _again;
		ctr14: cs = 8;
		goto f3;
		ctr16: cs = 8;
		goto f5;
		ctr17: cs = 8;
		goto f6;
		ctr18: cs = 8;
		goto f7;
		ctr19: cs = 8;
		goto f8;
		ctr20: cs = 8;
		goto f9;
		ctr21: cs = 8;
		goto f10;
		ctr15: cs = 15;
		goto f4;
		ctr6: cs = 0;
		goto _again;
		ctr5: cs = 7;
		goto _again;
		ctr10: cs = 9;
		goto _again;
		ctr12: cs = 10;
		goto _again;
		ctr8: cs = 11;
		goto _again;
		ctr9: cs = 12;
		goto _again;
		ctr11: cs = 13;
		goto _again;
		ctr13: cs = 14;
		goto _again;
		
		f7:
		_nbreak = 0;
		{
			printf( "%s", "  one\n" );
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f3:
		_nbreak = 0;
		{
			printf( "%s", "  two\n" );
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f5:
		_nbreak = 0;
		{
			printf( "%s", "  three\n" );
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f0:
		_nbreak = 0;
		{
			if ( (((*( p  ))
			)) == 48 )
			{
				i = 0;
				
			} 
			else {
				i = 1;
				
			}
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f1:
		_nbreak = 0;
		{
			if ( (((*( p  ))
			)) == 48 )
			{
				j = 0;
				
			} 
			else {
				j = 1;
				
			}
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f2:
		_nbreak = 0;
		{
			if ( (((*( p  ))
			)) == 48 )
			{
				k = 0;
				
			} 
			else {
				k = 1;
				
			}
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f4:
		_nbreak = 0;
		{
			{
				p += 1;
				_nbreak = 1;
				
			}
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f8:
		_nbreak = 0;
		{
			printf( "%s", "  one\n" );
			
		}
		{
			printf( "%s", "  two\n" );
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f9:
		_nbreak = 0;
		{
			printf( "%s", "  one\n" );
			
		}
		{
			printf( "%s", "  three\n" );
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f6:
		_nbreak = 0;
		{
			printf( "%s", "  two\n" );
			
		}
		{
			printf( "%s", "  three\n" );
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		f10:
		_nbreak = 0;
		{
			printf( "%s", "  one\n" );
			
		}
		{
			printf( "%s", "  two\n" );
			
		}
		{
			printf( "%s", "  three\n" );
			
		}
		if ( _nbreak == 1  )
		goto _out;
		
		
		goto _again;
		
		_again:
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		_out: {}
	}
}

void finish( )
{
	if ( cs >= foo_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"000abc\n",
	"100abc\n",
	"010abc\n",
	"110abc\n",
	"001abc\n",
	"101abc\n",
	"011abc\n",
	"111abc\n",
};

int inplen = 8;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

