package main
import "fmt"

var comm  byte ;
var top  int ;
var stack [32] int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _gotocallret_actions [] int8  = [] int8  { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 5, 1, 7, 1, 8, 2, 0, 1, 2, 4, 6, 0  }
var _gotocallret_trans_keys [] byte  = [] byte  { 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 4, 5, 3, 3, 3, 5, 1, 0, 4, 5, 3, 3, 0 }
var _gotocallret_char_class [] int8  = [] int8  { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0  }
var _gotocallret_index_offsets [] int8  = [] int8  { 0, 0, 1, 2, 3, 4, 6, 7, 10, 10, 12, 0  }
var _gotocallret_indices [] int8  = [] int8  { 1, 2, 4, 6, 8, 8, 9, 10, 0, 10, 8, 8, 9, 0  }
var _gotocallret_index_defaults [] int8  = [] int8  { 0, 0, 0, 3, 5, 7, 7, 0, 11, 7, 7, 0  }
var _gotocallret_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0  }
var _gotocallret_cond_targs [] int8  = [] int8  { 0, 2, 7, 4, 8, 4, 8, 0, 9, 10, 1, 0, 0  }
var _gotocallret_cond_actions [] int8  = [] int8  { 13, 18, 11, 1, 15, 0, 3, 7, 0, 0, 9, 0, 0  }
var _gotocallret_eof_actions [] int8  = [] int8  { 0, 13, 13, 5, 5, 7, 7, 0, 5, 0, 0, 0  }
var _gotocallret_nfa_targs [] int8  = [] int8  { 0, 0  }
var _gotocallret_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0  }
var _gotocallret_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _gotocallret_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var gotocallret_start  int  = 7
var gotocallret_first_final  int  = 7
var gotocallret_error  int  = 0
var gotocallret_en_garble_line  int  = 3
var gotocallret_en_alp_comm  int  = 5
var gotocallret_en_dig_comm  int  = 6
var gotocallret_en_main  int  = 7
func prepare() {

	{
		cs = int(gotocallret_start);
		top = 0;
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _trans  int   = 0
		var  _acts int
		var  _nacts uint 
		var  _keys int
		var  _inds int
		if p == pe  {
			goto _test_eof;
			
		}
		if cs == 0  {
			goto _out;
			
		}
		_resume :
		_keys = int((cs<<1) );
		_inds = int(_gotocallret_index_offsets[cs] );
		switch {
			case ( data[p ]) <= 122 && ( data[p ]) >= 10 :
			{
				var  _ic  int   = int(_gotocallret_char_class[int(( data[p ]) )- 10])
				switch {
					case _ic <= int(_gotocallret_trans_keys[_keys+1 ])&& _ic >= int(_gotocallret_trans_keys[_keys ]):
					_trans = int(_gotocallret_indices[_inds + int(( _ic - int(_gotocallret_trans_keys[_keys ]))  )]);
					
					default:
					_trans = int(_gotocallret_index_defaults[cs]);
					
				}
			}
			
			default:
			{
				_trans = int(_gotocallret_index_defaults[cs]);
			}
			
			
		}
		goto _match_cond;
		
		_match_cond :
		cs = int(_gotocallret_cond_targs[_trans]);
		if _gotocallret_cond_actions[_trans] == 0  {
			goto _again;
			
			
		}
		_acts = int(_gotocallret_cond_actions[_trans] );
		_nacts = uint(_gotocallret_actions[_acts ]);
		_acts += 1;
		for _nacts > 0  {
			{
				switch _gotocallret_actions[_acts ] {
					case 0 :
					{fmt.Print( "error: garbling line\n" );}
					
					break;
					case 1 :
					{{cs = 7;
						}}
					
					break;
					case 3 :
					{{p = p - 1;
						} 
						{top -= 1;
							cs = stack[top];
						}
					}
					
					break;
					case 4 :
					{if ( comm >= 97 ) {
							{stack[top] = cs;
								top += 1;
								cs = 5;
							}} else {
							{stack[top] = cs;
								top += 1;
								cs = 6;
							}}
					}
					
					break;
					case 5 :
					{comm = (( data[p ]));
					}
					
					break;
					case 6 :
					{fmt.Print( "prints\n" );}
					
					break;
					case 7 :
					{fmt.Print( "correct command\n" );}
					
					break;
					case 8 :
					{{p = p - 1;
						}
						{cs = 3;
						}}
					
					break;
					
				}
				_nacts -= 1;
				_acts += 1;
			}
			
			
			
		}
		
		_again :
		if cs == 0  {
			goto _out;
			
		}
		p += 1;
		if p != pe  {
			goto _resume;
			
		}
		
		_test_eof :
		{}
		if p == eof  {
			{
				var  __acts int
				var  __nacts uint 
				__acts = int(_gotocallret_eof_actions[cs] );
				__nacts = uint(_gotocallret_actions[__acts ]);
				__acts += 1;
				for __nacts > 0  {
					{
						switch _gotocallret_actions[__acts ] {
							case 2 :
							{fmt.Print( "error: failed to recover\n" );}
							
							break;
							case 3 :
							{{p = p - 1;
								} 
								{top -= 1;
									cs = stack[top];
								}
							}
							
							break;
							case 8 :
							{{p = p - 1;
								}
								{cs = 3;
								}}
							
							break;
							
						}
						__nacts -= 1;
						__acts += 1;
					}
					
				}
			}
			
			
		}
		
		_out :
		{}
		
	}
}
func finish() {
	if cs >= gotocallret_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"lkajsdf\n",
	"2134\n",
	"(\n",
	"\n",
	"*234234()0909 092 -234aslkf09`1 11\n",
	"1\n",
	"909\n",
	"1 a\n",
	"11 1\n",
	"a 1\n",
	"aa a\n",
	"1 1\n",
	"1 123456\n",
	"a a\n",
	"a abcdef\n",
	"h",
	"a aa1",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
