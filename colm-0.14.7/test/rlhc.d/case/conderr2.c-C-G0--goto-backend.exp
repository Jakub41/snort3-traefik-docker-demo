#include <stdio.h>



static const char  _foo_actions [] = { 0, 1, 0, 1, 1, 0 ,  };
static const char  _foo_eof_actions [] = { 0, 0, 1, 3, 0, 0 ,  };
static const char  _foo_nfa_targs [] = { 0, 0 ,  };
static const char  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_nfa_push_actions [] = { 0, 0 ,  };
static const char  _foo_nfa_pop_trans [] = { 0, 0 ,  };
static const int  foo_start  = 1;
static const int  foo_first_final  = 4;
static const int  foo_error  = 0;
static const int  foo_en_main  = 1;
int main()
{
	char buffer[] = " ;";
	
	char *p = buffer;
	char *pe = buffer + sizeof(buffer);
	char *eof = pe;
	int  cs = foo_start;
	
	
	{
		const char  *_acts;
		unsigned int _nacts;
		
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume:
		switch ( cs  ) {
			case 1:
			switch ( ((*( p  ))
			) ) {
				case 32:
				{
					goto ctr0;
				}
				case 59:
				{
					int ck = 0;
					if ( (0 ) )
					ck += 1;
					
					if ( 1 <= ck  )
					{		goto ctr2;
					}
					
					goto ctr3;
					
				}
				
			}
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			switch ( ((*( p  ))
			) ) {
				case 32:
				{
					goto ctr0;
				}
				case 59:
				{
					int ck = 0;
					if ( (0 ) )
					ck += 1;
					
					if ( ck > 0  )
					{
						goto ctr2;
					} 
					else
					{
						goto ctr5;
					}
					
					
				}
				
			}
			{
				goto ctr4;
			}
			case 3:
			if ( ((*( p  ))
			)== 120  )
			{
				goto ctr7;
			}
			
			{
				goto ctr6;
			}
			case 4:
			{
				goto ctr1;
			}
			
		}
		ctr1: cs = 0;
		goto _again;
		ctr6: cs = 0;
		goto f1;
		ctr0: cs = 2;
		goto _again;
		ctr4: cs = 3;
		goto _again;
		ctr7: cs = 4;
		goto _again;
		ctr3: cs = 0;
		goto _again;
		ctr5: cs = 0;
		goto f0;
		ctr2: cs = 2;
		goto _again;
		
		f0: _acts = _foo_actions + 1 ;
		goto execFuncs;
		f1: _acts = _foo_actions + 3 ;
		goto execFuncs;
		
		execFuncs:
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0:
				{
					printf("A\n"); 
				}
				
				break;
				case 1:
				{
					printf("B\n"); 
				}
				
				break;
				
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		
		goto _again;
		
		_again:
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _foo_actions + _foo_eof_actions[cs];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 0:
					{
						printf("A\n"); 
					}
					
					break;
					case 1:
					{
						printf("B\n"); 
					}
					
					break;
					
				}
				__acts += 1;
				__nacts -= 1;
			}
			
		}
		
		
		_out: {}
	}
	return 0;
} 

