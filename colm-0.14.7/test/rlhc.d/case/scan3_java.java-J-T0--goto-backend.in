host( "working/scan3_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class scan3_java
	{
		int
		ts ;
		int
		te ;
		int act ;
		int token ;
		
		
		
		
		
	}@
	array s8 _scanner_actions( 0, 6 ) = { 0, 1, 0, 1, 1, 1, 6, 2, 2, 3, 2, 2, 4, 2, 2, 5, 0 };
	
	array s8 _scanner_key_offsets( 0, 2 ) = { 0, 0, 2, 0 };
	
	array char _scanner_trans_keys( 0, 98 ) = { u(97), u(98), u(0) };
	
	array s8 _scanner_single_lengths( 0, 2 ) = { 0, 2, 0, 0 };
	
	array s8 _scanner_range_lengths( 0, 0 ) = { 0, 0, 0, 0 };
	
	array s8 _scanner_index_offsets( 0, 3 ) = { 0, 0, 3, 0 };
	
	array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, 0 };
	
	array s8 _scanner_trans_offsets( 0, 4 ) = { 0, 1, 2, 3, 4, 0 };
	
	array s8 _scanner_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 0 };
	
	array s8 _scanner_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };
	
	array s8 _scanner_cond_targs( 0, 2 ) = { 2, 2, 0, 2, 1, 0 };
	
	array s8 _scanner_cond_actions( 0, 13 ) = { 7, 10, 0, 13, 5, 0 };
	
	array s8 _scanner_to_state_actions( 0, 1 ) = { 0, 1, 0, 0 };
	
	array s8 _scanner_from_state_actions( 0, 3 ) = { 0, 3, 0, 0 };
	
	array s8 _scanner_eof_trans_indexed( 0, 2 ) = { 0, 0, 2, 0 };
	
	array s8 _scanner_eof_trans_direct( 0, 5 ) = { 0, 0, 5, 0 };
	
	array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };
	
	array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int scanner_start = 1;
	value int scanner_first_final = 1;
	value int scanner_error = 0;
	
	value int scanner_en_main = 1;
	
	host( "working/scan3_java.rl", 34 ) @{
		int cs;
		
		void init()
		{
		}@
		{
			cs = cast(int)scanner_start;
			ts = nil;
			te = nil;
			act = 0;
		}
		host( "working/scan3_java.rl", 39 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			int eof = len;
			String _s;
		}@
		{
			int _klen;
			uint _trans = 0;
			uint _cond = 0;
			index s8 _acts;
			uint _nacts;
			index char _keys;
			index s8 _ckeys;
			int _cpc;
			entry {
				
				if ( p == pe )
				goto _test_eof;
				if ( cs == 0 )
				goto _out;
				label _resume {
					_acts = offset( _scanner_actions, _scanner_from_state_actions[cs] );
					_nacts = cast(uint)deref( _scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _scanner_actions, _acts ) ) {
							case 1 {
								host( "NONE", 1 ) ${${ts = p;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					_keys = offset( _scanner_trans_keys, _scanner_key_offsets[cs] );
					_trans = cast(uint)_scanner_index_offsets[cs];
					
					_klen = cast(int)_scanner_single_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _scanner_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _scanner_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								goto _match;
							}
						}
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
					
					_klen = cast(int)_scanner_range_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _scanner_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _scanner_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								goto _match;
							}
						}
						_trans += cast(uint)_klen;
					}
					
				}
				label _match {
					_ckeys = offset( _scanner_cond_keys, _scanner_trans_offsets[_trans] );
					_klen = cast(int)_scanner_trans_lengths[_trans];
					_cond = cast(uint)_scanner_trans_offsets[_trans];
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _scanner_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _scanner_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								goto _match_cond;
							}
						}
						cs = 0;
						goto _again;
					}
				}
				label _match_cond {
					cs = cast(int)_scanner_cond_targs[_cond];
					
					if ( _scanner_cond_actions[_cond] == 0 )
					goto _again;
					
					_acts = offset( _scanner_actions, _scanner_cond_actions[_cond] );
					_nacts = cast(uint)deref( _scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _scanner_actions, _acts ) )
						{
							case 2 {
								host( "NONE", 1 ) ${${te = p+1;}$}$
							}
							case 3 {
								host( "working/scan3_java.rl", 22 ) ${${act = 1;}$}$
							}
							case 4 {
								host( "working/scan3_java.rl", 24 ) ${${act = 2;}$}$
							}
							case 5 {
								host( "working/scan3_java.rl", 26 ) ${${act = 3;}$}$
							}
							case 6 {
								host( "NONE", 1 ) ${${switch( act ) {
											case 1 {
												p = ((te))-1;
												host( "working/scan3_java.rl", 22 ) ${System.out.print( "pat1\n" );
												}$ }
											case 2 {
												p = ((te))-1;
												host( "working/scan3_java.rl", 24 ) ${System.out.print( "pat2\n" );
												}$ }
											case 3 {
												p = ((te))-1;
												host( "working/scan3_java.rl", 26 ) ${System.out.print( "pat3\n" );
												}$ }
										}}$
								}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					
				}
				label _again {
					_acts = offset( _scanner_actions, _scanner_to_state_actions[cs] );
					_nacts = cast(uint)deref( _scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _scanner_actions, _acts ) ) {
							case 0 {
								host( "NONE", 1 ) ${${ts = nil;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					if ( cs == 0 )
					goto _out;
					p += 1;
					if ( p != pe )
					goto _resume;
				}
				label _test_eof { {}
					if ( p == eof )
					{
						if ( _scanner_eof_trans_direct[cs] > 0 ) {
							_trans = cast(uint)_scanner_eof_trans_direct[cs] - 1;
							_cond = cast(uint)_scanner_trans_offsets[_trans];
							goto _match_cond;
						}
					}
					
				}
				label _out { {}
				}
			}
		}
		host( "working/scan3_java.rl", 51 ) @{
		}
		
		void finish( )
		{
			if ( cs >= scanner_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"ab89",
		};
		
		static final int inplen = 1;
		
		public static void main (String[] args)
		{
			scan3_java machine = new scan3_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@