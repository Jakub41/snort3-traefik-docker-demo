host( "working/patact_rust.rl", 1 ) @{//
	// @@LANG: rust
	// @@GENERATED: true
	//
	
	static mut comm : u8 = 0;
	static mut top : i32 = 0;
	static mut stack : [ i32 ; 32] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
	static mut ts : i32
	= 0;
	static mut te : i32
	= 0;
	static mut act : i32 = 0;
	static mut value : i32 = 0;
	
	
	
	
	
}@
array u8 _patact_trans_keys( 0, 11 ) = { 1, 0, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 0, 11, 2, 5, 2, 5, 2, 11, 0, 11, 4, 5, 7, 11, 0, 11, 2, 5, 2, 5, 2, 11, 6, 6, 0 };

array s8 _patact_char_class( 0, 11 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 8, 7, 7, 9, 7, 7, 10, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0 };

array s8 _patact_index_offsets( 0, 95 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 28, 32, 36, 46, 58, 60, 65, 77, 81, 85, 95, 0 };

array s8 _patact_indices( 0, 47 ) = { 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 20, 22, 23, 24, 25, 26, 26, 26, 26, 26, 27, 0, 23, 23, 27, 28, 23, 29, 31, 30, 30, 30, 30, 26, 26, 26, 26, 26, 32, 21, 32, 21, 33, 33, 21, 34, 34, 34, 34, 34, 33, 33, 34, 34, 34, 34, 34, 37, 21, 37, 38, 39, 40, 21, 41, 41, 41, 41, 41, 42, 10, 39, 39, 42, 43, 39, 44, 46, 45, 45, 45, 45, 41, 41, 41, 41, 41, 47, 0 };

array s8 _patact_index_defaults( 0, 45 ) = { 0, 0, 0, 0, 0, 5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15, 15, 21, 0, 28, 30, 21, 35, 36, 21, 10, 43, 45, 21, 0 };

array s8 _patact_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _patact_cond_targs( 0, 28 ) = { 17, 2, 3, 4, 17, 17, 6, 7, 8, 17, 24, 10, 11, 12, 24, 24, 14, 15, 16, 24, 17, 0, 17, 18, 19, 17, 20, 1, 17, 18, 17, 5, 21, 22, 23, 21, 21, 24, 24, 25, 26, 27, 9, 24, 25, 24, 13, 28, 0 };

array s8 _patact_cond_actions( 0, 28 ) = { 1, 0, 0, 0, 2, 3, 0, 0, 0, 4, 5, 0, 0, 0, 6, 7, 0, 0, 0, 8, 11, 0, 12, 13, 13, 14, 15, 0, 16, 17, 18, 0, 19, 0, 0, 20, 21, 22, 23, 24, 24, 15, 0, 25, 26, 27, 0, 28, 0 };

array s8 _patact_to_state_actions( 0, 9 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 9, 0, 0, 0, 9, 0 };

array s8 _patact_from_state_actions( 0, 10 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 10, 0, 0, 10, 0, 0, 0, 10, 0 };

array s8 _patact_eof_trans( 0, 46 ) = { 0, 1, 1, 1, 1, 6, 6, 6, 6, 11, 11, 11, 11, 16, 16, 16, 16, 0, 1, 29, 31, 0, 36, 37, 0, 11, 44, 46, 0, 0 };

array s8 _patact_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _patact_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _patact_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _patact_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int patact_start = 17;
value int patact_first_final = 17;
value int patact_error = 0;

value int patact_en_other = 21;
value int patact_en_exec_test = 24;
value int patact_en_semi = 28;
value int patact_en_main = 17;

host( "working/patact_rust.rl", 72 ) @{
	
	unsafe fn m( s: String )
	{
		let data: &[u8] = s.as_bytes();
		let mut p:i32 = 0;
		let mut pe:i32 = s.len() as i32;
		let mut eof:i32 = s.len() as i32;
		let mut cs: i32 = 0;
		let mut buffer = String::new();
		
	}@
	{
		cs = cast(int)patact_start;
		ts = nil;
		te = nil;
		act = 0;
	}
	host( "working/patact_rust.rl", 83 ) @{
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index u8 _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _patact_eof_trans[cs] > 0 ) {
						_trans = cast(uint)_patact_eof_trans[cs] - 1;
						_have = 1;
					}
					if ( _have == 0 ) {
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					switch ( _patact_from_state_actions[cs] ) {
						case 10 {
							host( "NONE", 1 ) ${${ts = p;}$}$
						}
					}
					
					_keys = offset( _patact_trans_keys, (cs<<1) );
					_inds = offset( _patact_indices, _patact_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_patact_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _patact_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _patact_trans_keys, _keys ) )
						_trans = cast(uint)deref( _patact_indices, _inds + cast(int)( _ic - cast(int)deref( _patact_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_patact_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_patact_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_patact_cond_targs[_trans];
					
					switch ( _patact_cond_actions[_trans] ) {
						case 15 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
						}
						case 19 {
							host( "working/patact_rust.rl", 24 ) ${${te = p+1;host( "working/patact_rust.rl", 24 ) ${print!( "{}", "space\n" );
									}$}$}$
						}
						case 21 {
							host( "working/patact_rust.rl", 20 ) ${${te = p;p = p - 1;host( "working/patact_rust.rl", 20 ) ${print!( "{}", "word\n" );
									}$}$}$
						}
						case 20 {
							host( "working/patact_rust.rl", 22 ) ${${te = p;p = p - 1;host( "working/patact_rust.rl", 22 ) ${print!( "{}", "num\n" );
									}$}$}$
						}
						case 8 {
							host( "working/patact_rust.rl", 31 ) ${${te = p+1;host( "working/patact_rust.rl", 31 ) ${print!( "{}", "word (c/lbh)\n" );
									}$}$}$
						}
						case 22 {
							host( "working/patact_rust.rl", 33 ) ${${te = p+1;host( "working/patact_rust.rl", 33 ) ${print!( "{}", "space\n" );
									}$}$}$
						}
						case 6 {
							host( "working/patact_rust.rl", 39 ) ${${te = p+1;host( "working/patact_rust.rl", 39 ) ${print!( "{}", "num (c/switch)\n" );
									}$}$}$
						}
						case 23 {
							host( "working/patact_rust.rl", 41 ) ${${te = p+1;}$}$
						}
						case 27 {
							host( "working/patact_rust.rl", 29 ) ${${te = p;p = p - 1;host( "working/patact_rust.rl", 29 ) ${print!( "{}", "word (w/lbh)\n" );
										${p = (( te-1))-1;}$
										${cs = 21;}$}$}$}$
						}
						case 25 {
							host( "working/patact_rust.rl", 37 ) ${${te = p;p = p - 1;host( "working/patact_rust.rl", 37 ) ${print!( "{}", "num (w/switch)\n" );
										${p = (( te-1))-1;}$
										${cs = 21;}$}$}$}$
						}
						case 7 {
							host( "working/patact_rust.rl", 29 ) ${${p = ((te))-1;
									host( "working/patact_rust.rl", 29 ) ${print!( "{}", "word (w/lbh)\n" );
										${p = (( te-1))-1;}$
										${cs = 21;}$}$}$}$
						}
						case 5 {
							host( "NONE", 1 ) ${${switch( act ) {
										case 7 {
											p = ((te))-1;
											host( "working/patact_rust.rl", 35 ) ${print!( "{}", "num (w/switch)\n" );
											}$ }
										case 8 {
											p = ((te))-1;
											host( "working/patact_rust.rl", 37 ) ${print!( "{}", "num (w/switch)\n" );
												${p = (( te-1))-1;}$
												${cs = 21;}$}$ }
									}}$
							}$
						}
						case 28 {
							host( "working/patact_rust.rl", 45 ) ${${te = p+1;host( "working/patact_rust.rl", 45 ) ${print!( "{}", "in semi\n" );
										${cs = 17;}$}$}$}$
						}
						case 4 {
							host( "working/patact_rust.rl", 52 ) ${${te = p+1;host( "working/patact_rust.rl", 52 ) ${print!( "{}", "word (c/lbh)\n" );
									}$}$}$
						}
						case 11 {
							host( "working/patact_rust.rl", 54 ) ${${te = p+1;host( "working/patact_rust.rl", 54 ) ${print!( "{}", "space\n" );
									}$}$}$
						}
						case 2 {
							host( "working/patact_rust.rl", 60 ) ${${te = p+1;host( "working/patact_rust.rl", 60 ) ${print!( "{}", "num (c/switch)\n" );
									}$}$}$
						}
						case 14 {
							host( "working/patact_rust.rl", 62 ) ${${te = p+1;host( "working/patact_rust.rl", 62 ) ${print!( "{}", "going to semi\n" );
										${p = p - 1; }$${cs = 28;}$}$}$}$
						}
						case 12 {
							host( "working/patact_rust.rl", 64 ) ${${te = p+1;host( "working/patact_rust.rl", 64 ) ${print!( "{}", "immdiate\n" );
										${cs = 24;}$}$}$}$
						}
						case 18 {
							host( "working/patact_rust.rl", 50 ) ${${te = p;p = p - 1;host( "working/patact_rust.rl", 50 ) ${print!( "{}", "word (w/lbh)\n" );
										${p = p - 1; }$${cs = 21;}$}$}$}$
						}
						case 16 {
							host( "working/patact_rust.rl", 58 ) ${${te = p;p = p - 1;host( "working/patact_rust.rl", 58 ) ${print!( "{}", "num (w/switch)\n" );
										${p = p - 1; }$${cs = 21;}$}$}$}$
						}
						case 3 {
							host( "working/patact_rust.rl", 50 ) ${${p = ((te))-1;
									host( "working/patact_rust.rl", 50 ) ${print!( "{}", "word (w/lbh)\n" );
										${p = p - 1; }$${cs = 21;}$}$}$}$
						}
						case 1 {
							host( "NONE", 1 ) ${${switch( act ) {
										case 15 {
											p = ((te))-1;
											host( "working/patact_rust.rl", 56 ) ${print!( "{}", "num (w/switch)\n" );
											}$ }
										case 16 {
											p = ((te))-1;
											host( "working/patact_rust.rl", 58 ) ${print!( "{}", "num (w/switch)\n" );
												${p = p - 1; }$${cs = 21;}$}$ }
									}}$
							}$
						}
						case 26 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
							host( "working/patact_rust.rl", 35 ) ${${act = 7;}$}$
						}
						case 24 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
							host( "working/patact_rust.rl", 37 ) ${${act = 8;}$}$
						}
						case 17 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
							host( "working/patact_rust.rl", 56 ) ${${act = 15;}$}$
						}
						case 13 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
							host( "working/patact_rust.rl", 58 ) ${${act = 16;}$}$
						}
					}
					
					switch ( _patact_to_state_actions[cs] ) {
						case 9 {
							host( "NONE", 1 ) ${${ts = nil;}$}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/patact_rust.rl", 84 ) @{
		
		if ( cs >= patact_first_final ) {
			println!( "ACCEPT" );
		}
		else {
			println!( "FAIL" );
		}
	}
	
	fn main()
	{
		unsafe { m( "abcd foix\n".to_string() ); }
		unsafe { m( "abcd\nanother\n".to_string() ); }
		unsafe { m( "123 foix\n".to_string() ); }
		unsafe { m( "!abcd foix\n".to_string() ); }
		unsafe { m( "!abcd\nanother\n".to_string() ); }
		unsafe { m( "!123 foix\n".to_string() ); }
		unsafe { m( ";".to_string() ); }
	}
	
}@