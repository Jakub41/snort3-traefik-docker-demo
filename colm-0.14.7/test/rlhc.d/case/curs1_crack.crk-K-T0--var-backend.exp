import crack.io cout;
import crack.lang Buffer;

int return_to;





const array[int16 ] _curs1_actions = [ 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 ,  ];
const array[int16 ] _curs1_key_offsets = [ 0, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 0 ,  ];
const array[byte ] _curs1_trans_keys = [ 10, 49, 50, 117, 110, 117, 115, 101, 100, 111, 110, 101, 116, 119, 111, 0,  ];
const array[int16 ] _curs1_single_lengths = [ 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _curs1_range_lengths = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _curs1_index_offsets = [ 0, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 30, 31, 0 ,  ];
const array[int16 ] _curs1_trans_cond_spaces = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  ];
const array[int16 ] _curs1_trans_offsets = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 ,  ];
const array[int16 ] _curs1_trans_lengths = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  ];
const array[int16 ] _curs1_cond_keys = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _curs1_cond_targs = [ 14, 14, 14, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 15, 0, 9, 0, 10, 0, 16, 0, 12, 0, 13, 0, 17, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _curs1_cond_actions = [ 0, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _curs1_nfa_targs = [ 0, 0 ,  ];
const array[int16 ] _curs1_nfa_offsets = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  ];
const array[int16 ] _curs1_nfa_push_actions = [ 0, 0 ,  ];
const array[int16 ] _curs1_nfa_pop_trans = [ 0, 0 ,  ];
const int  curs1_start  = 1;
const int  curs1_first_final  = 14;
const int  curs1_error  = 0;
const int  curs1_en_unused  = 2;
const int  curs1_en_one  = 8;
const int  curs1_en_two  = 11;
const int  curs1_en_main  = 1;
void m( String s )
{
	byteptr data = s.buffer;
	int p = 0;
	int pe = s.size;
	int cs;
	String buffer;
	
	if ( 1 ) {
		cs = int ( curs1_start );
		
	}
	if ( 1 ) {
		int _klen;
		int _ps;
		uint32 _trans = 0;
		uint32 _cond = 0;
		uint32 _have = 0;
		uint32 _cont = 1;
		int _acts = 0;
		uint32 _nacts;
		int _keys = 0;
		int _ckeys = 0;
		int _cpc;
		while ( _cont == 1  )
		{
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _curs1_key_offsets[cs];
					_trans = uint32  ( _curs1_index_offsets[cs] );
					_have = 0;
					_klen = int ( _curs1_single_lengths[cs] );
					if ( _klen > 0  )
					{
						int _lower = 0;
						int _mid = 0;
						int _upper = 0;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( (data[p ])< _curs1_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( (data[p ])> _curs1_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += uint32  ( (_mid - _keys) );
								_have = 1;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += uint32  ( _klen );
							
						}
						
						
					}
					
					if ( _have == 0  )
					{
						_klen = int ( _curs1_range_lengths[cs] );
						if ( _klen > 0  )
						{
							int _lower = 0;
							int _mid = 0;
							int _upper = 0;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( (data[p ])< _curs1_trans_keys[_mid ] )
								_upper = _mid - 2;
								
								else if ( (data[p ])> _curs1_trans_keys[_mid + 1 ] )
								_lower = _mid + 2;
								
								else
								{
									_trans += uint32  ( ((_mid - _keys)>>1) );
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							_trans += uint32  ( _klen );
							
							
						}
						
						
					}
					
					_ckeys = _curs1_trans_offsets[_trans];
					_klen = int ( _curs1_trans_lengths[_trans] );
					_cond = uint32  ( _curs1_trans_offsets[_trans] );
					_have = 0;
					_cpc = 0;
					if ( 1 ) {
						int _lower = 0;
						int _mid = 0;
						int _upper = 0;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < int ( _curs1_cond_keys[_mid ] ) )
							_upper = _mid - 1;
							
							else if ( _cpc > int ( _curs1_cond_keys[_mid ] ) )
							_lower = _mid + 1;
							
							else
							{
								_cond += uint32  ( (_mid - _ckeys) );
								_have = 1;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
							
						}
						
						
					}
					
				}
				
				if ( _cont == 1  )
				{
					_ps = cs;
					cs = int ( _curs1_cond_targs[_cond] );
					if ( _curs1_cond_actions[_cond]!= 0  )
					{
						_acts = _curs1_cond_actions[_cond];
						_nacts = uint32  ( _curs1_actions[_acts ] );
						_acts += 1;
						while ( _nacts > 0  )
						{
							if ( _curs1_actions[_acts ] == 0  ) {
								if ( 1 ) {
									cout.format( "one\n" );
									if ( 1 ) {
										cs = (return_to);
										
									}
									
								}
								
							}
							else if ( _curs1_actions[_acts ] == 1  ) {
								if ( 1 ) {
									cout.format( "two\n" );
									if ( 1 ) {
										cs = (return_to);
										
									}
									
								}
								
							}
							else if ( _curs1_actions[_acts ] == 2  ) {
								if ( 1 ) {
									return_to = (_ps);
									if ( 1 ) {
										cs = 8;
										
									}
									
								}
								
							}
							else if ( _curs1_actions[_acts ] == 3  ) {
								if ( 1 ) {
									return_to = (_ps);
									if ( 1 ) {
										cs = 11;
										
									}
									
								}
								
							}
							;
							_nacts -= 1;
							_acts += 1;
							
						}
						
						
					}
					
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
					
				}
				
				
			}
			
			
		}
		
		
	}
	if ( cs >= curs1_first_final ) {
		cout `ACCEPT\n`;
	}
	else {
		cout `FAIL\n`;
	}
}

void main()
{
	m( "1one2two1one\n" );
}

main();
