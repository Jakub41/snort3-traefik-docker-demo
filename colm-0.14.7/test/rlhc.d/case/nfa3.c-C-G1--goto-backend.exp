#include <stddef.h>
#include <stdint.h>
#include <stdlib.h> 
#include <stdbool.h>
#include <string.h>
#include <stdio.h>

const char s[4096];

struct nfa_stack
{
	void *data;
	unsigned long sz;
};

struct nfa_bp_rec
{
	long state;
	const char *p;
	long popTrans;
	long q_2;
};



static const char  _atoi_nfa_targs [] = { 0, 1, 3, 3, 6, 3, 5, 0 ,  };
static const char  _atoi_nfa_offsets [] = { 0, 0, 1, 0, 3, 0, 0, 0, 0 ,  };
static const char  _atoi_nfa_push_actions [] = { 0, 0, 1, 0, 1, 1, 1, 0 ,  };
static const char  _atoi_nfa_pop_trans [] = { 0, 0, 4, 0, 7, 6, 5, 0 ,  };
static const int  atoi_start  = 1;
static const int  atoi_first_final  = 7;
static const int  atoi_error  = 0;
static const int  atoi_en_main  = 1;
int test( const char *p, bool a, bool b )
{
	int len = strlen( p ) + 1;
	const char *pe = p + len;
	int cs;
	
	struct nfa_bp_rec *nfa_bp = (struct nfa_bp_rec*) s;
	long nfa_len = 0;
	long nfa_count = 0;
	
	long q_2 = 0;
	
	printf( "testing: %s %d %d\n", p, a, b );
	
	
	{
		cs = ( int ) atoi_start;
		nfa_len = 0;
	}
	
	{
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume:
		if ( _atoi_nfa_offsets[cs] )
		{
			int alt = 0; 
			int new_recs = _atoi_nfa_targs[( int ) _atoi_nfa_offsets[cs]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _atoi_nfa_targs[( int ) _atoi_nfa_offsets[cs]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _atoi_nfa_offsets[cs]+ 1 + alt;
				switch ( _atoi_nfa_push_actions[( int ) _atoi_nfa_offsets[cs]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2; 
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		switch ( cs  ) {
			case 1:
			if ( ((*( p  ))
			)== 97  )
			{
				goto ctr0;
			}
			
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			{
				goto ctr1;
			}
			case 3:
			if ( ((*( p  ))
			)== 46  )
			{
				goto ctr2;
			}
			
			{
				goto ctr1;
			}
			case 4:
			{
				goto ctr1;
			}
			case 6:
			if ( ((*( p  ))
			)== 59  )
			{
				goto ctr3;
			}
			
			{
				goto ctr1;
			}
			case 7:
			{
				goto ctr1;
			}
			case 5:
			{
				goto ctr1;
			}
			
		}
		ctr1: cs = 0;
		goto _again;
		ctr0: cs = 2;
		goto _again;
		ctr2: cs = 4;
		goto _again;
		ctr3: cs = 7;
		goto f7;
		
		f7:
		{
			printf( " --> MATCH\n" ); 
		}
		
		goto _again;
		
		_again:
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		_out: {}
		if ( nfa_len > 0  )
		{
			int _cpc;
			nfa_count += 1;
			nfa_len -= 1;
			p = nfa_bp[nfa_len].p;
			int _pop_test = 1;
			switch ( _atoi_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
				case 5 :
				_pop_test = (({ q_2 = nfa_bp[nfa_len].q_2; 1; }) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ 1; }) );
				
				break;
				case 6 :
				_pop_test = (({ q_2 = nfa_bp[nfa_len].q_2; 1; }) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ ++q_2 < 2; }) );
				
				break;
				case 7 :
				_pop_test = (({ q_2 = nfa_bp[nfa_len].q_2; 1; }) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ ++q_2 >= 2; }) );
				
				break;
				case 4 :
				_pop_test = (({ q_2 = nfa_bp[nfa_len].q_2; 1; }) );
				if ( !_pop_test  )
				break;
				
				_cpc = 0;
				if ( (a) )
				_cpc += 1;
				
				if ( (b) )
				_cpc += 2;
				
				_pop_test = _cpc == 1 || _cpc == 3;
				if ( !_pop_test  )
				break;
				
				_pop_test = (({  q_2 = 0; 1; }) );
				
				break;
				
			}
			if ( _pop_test  )
			{
				cs = nfa_bp[nfa_len].state;
				goto _resume;
			}
			
			goto _out;
		}
		
	}
	return 0;
}

int main()
{
	test( "a.;", 0, 0 );
	test( "a.;", 0, 1 );
	test( "a.;", 1, 0 );
	test( "a.;", 1, 1 );
	test( "a..;", 0, 0 );
	test( "a..;", 0, 1 );
	test( "a..;", 1, 0 );
	test( "a..;", 1, 1 );
	test( "a...;", 0, 0 );
	test( "a...;", 0, 1 );
	test( "a...;", 1, 0 );
	test( "a...;", 1, 1 );
	return 0;
}

