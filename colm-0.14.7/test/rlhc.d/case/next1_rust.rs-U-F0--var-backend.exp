static mut target : i32 = 0;





static _next1_actions: [i8 ; 11] = [ 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 , 0 ];
static _next1_trans_keys: [u8 ; 38] = [ 1, 0, 0, 3, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 1, 0, 1, 0, 1, 0, 1, 0, 0 , 0 ];
static _next1_char_class: [i8 ; 112] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0 , 0 ];
static _next1_index_offsets: [i8 ; 20] = [ 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16, 16, 16, 0 , 0 ];
static _next1_indices: [i8 ; 18] = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 , 0 ];
static _next1_index_defaults: [i8 ; 20] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 0 ];
static _next1_trans_cond_spaces: [i8 ; 18] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _next1_cond_targs: [i8 ; 18] = [ 14, 0, 14, 14, 3, 4, 5, 6, 7, 15, 9, 10, 16, 12, 13, 17, 0 , 0 ];
static _next1_cond_actions: [i8 ; 18] = [ 0, 0, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 3, 0 , 0 ];
static _next1_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _next1_nfa_offsets: [i8 ; 20] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _next1_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _next1_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static next1_start : i32 = 1;
static next1_first_final : i32 = 14;
static next1_error : i32 = 0;
static next1_en_unused : i32 = 2;
static next1_en_one : i32 = 8;
static next1_en_two : i32 = 11;
static next1_en_main : i32 = 1;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( next1_start ) as i32;
	}
	
	{
		let mut _trans  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _acts :i32 = 0;
		let mut _nacts = 0;
		let mut _keys :i32 = 0;
		let mut _inds :i32 = 0;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_keys = ( (cs<<1)  ) as i32;
							_inds = ( _next1_index_offsets[(cs) as usize] ) as i32;
							if ( ( data[(p ) as usize]
							) <= 119 && ( data[(p ) as usize]
							) >= 10  ) {
								{
									let mut _ic  = ( _next1_char_class[(( ( data[(p ) as usize]
									)  ) as i32- 10) as usize] ) as i32;
									if ( _ic <= ( _next1_trans_keys[(_keys+1 ) as usize]
									) as i32&& _ic >= ( _next1_trans_keys[(_keys ) as usize]
									) as i32 ) {
										_trans = ( _next1_indices[(_inds + ( ( _ic - ( _next1_trans_keys[(_keys ) as usize]
										) as i32)   ) as i32) as usize]
										) as u32;
										
									}
									else {
										_trans = ( _next1_index_defaults[(cs) as usize] ) as u32;
										
									}
								}
								
							}
							else {
								{
									_trans = ( _next1_index_defaults[(cs) as usize] ) as u32;
								}
								
								
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _next1_cond_targs[(_trans) as usize] ) as i32;
							if ( _next1_cond_actions[(_trans) as usize]!= 0  ) {
								{
									_acts = ( _next1_cond_actions[(_trans) as usize] ) as i32;
									_nacts = ( _next1_actions[(_acts ) as usize]
									) as u32;
									_acts += 1;
									while ( _nacts > 0  )
									{
										match ( _next1_actions[(_acts ) as usize]
										) {
											0  => {
												{print!( "{}", "one\n" );
													target = 1;
													{cs = (target);
													}}
												
											}
											1  => {
												{print!( "{}", "two\n" );
													target = 1;
													{cs = (target);
													}}
												
											}
											2  => {
												{target = 8;
													{cs = (target);
													}}
												
											}
											3  => {
												{target = 11;
													{cs = (target);
													}}
												
											}
											
											_ => {}
										}
										_nacts -= 1;
										_acts += 1;
									}
									
								}
								
								
							}
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= next1_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "1one2two1one\n".to_string() ); }
}

