package main
import "fmt"

var ts  int ;
var te  int ;
var act  int ;
var token  int ;




var cs int;
var blen int;
var buffer [1024] byte;

var _scanner_trans_keys [] byte  = [] byte  { 1, 0, 0, 1, 1, 0, 0 }
var _scanner_char_class [] int8  = [] int8  { 0, 1, 0  }
var _scanner_index_offsets [] int8  = [] int8  { 0, 0, 2, 0  }
var _scanner_indices [] int8  = [] int8  { 0, 2, 0  }
var _scanner_index_defaults [] int8  = [] int8  { 0, 1, 4, 0  }
var _scanner_trans_cond_spaces [] int8  = [] int8  { -1, -1, -1, -1, -1, 0  }
var _scanner_cond_targs [] int8  = [] int8  { 2, 0, 2, 1, 2, 0  }
var _scanner_cond_actions [] int8  = [] int8  { 3, 0, 4, 5, 6, 0  }
var _scanner_to_state_actions [] int8  = [] int8  { 0, 1, 0, 0  }
var _scanner_from_state_actions [] int8  = [] int8  { 0, 2, 0, 0  }
var _scanner_eof_trans [] int8  = [] int8  { 0, 0, 4, 0  }
var _scanner_nfa_targs [] int8  = [] int8  { 0, 0  }
var _scanner_nfa_offsets [] int8  = [] int8  { 0, 0, 0, 0  }
var _scanner_nfa_push_actions [] int8  = [] int8  { 0, 0  }
var _scanner_nfa_pop_trans [] int8  = [] int8  { 0, 0  }
var scanner_start  int  = 1
var scanner_first_final  int  = 1
var scanner_error  int  = 0
var scanner_en_main  int  = 1
func prepare() {

	{
		cs = int(scanner_start);
		ts = 0;
		te = 0;
		act = 0;
	}
}

func exec(data string) {
	var p int = 0
	var pe int = len(data)
	var eof int = pe
	
	{
		var  _trans  uint   = 0
		var  _have  uint   = 0
		var  _cont  uint   = 1
		var  _keys int
		var  _inds int
		for _cont == 1  {
			{
			
				if cs == 0  {
					_cont = 0;
					
				}
				_have = 0;
				if p == pe  {
					{
						if p == eof  {
							{
								if _scanner_eof_trans[cs] > 0  {
									{
										_trans = uint(_scanner_eof_trans[cs] )- 1;
										_have = 1;
									}
									
								}
								if _have == 0  {
									{
									}
									
								}
							}
							
							
						}
						if _have == 0  {
							_cont = 0;
							
						}
					}
					
				}
				if _cont == 1  {
					{
						if _have == 0  {
							{
								switch _scanner_from_state_actions[cs]  {
									case 2 :
									{{ts = p;
										}}
									
									break;
									
								}
								_keys = int((cs<<1) );
								_inds = int(_scanner_index_offsets[cs] );
								switch {
									case ( data[p ]) <= 98 && ( data[p ]) >= 97 :
									{
										var  _ic  int   = int(_scanner_char_class[int(( data[p ]) )- 97])
										switch {
											case _ic <= int(_scanner_trans_keys[_keys+1 ])&& _ic >= int(_scanner_trans_keys[_keys ]):
											_trans = uint(_scanner_indices[_inds + int(( _ic - int(_scanner_trans_keys[_keys ]))  )]);
											
											default:
											_trans = uint(_scanner_index_defaults[cs]);
											
										}
									}
									
									default:
									{
										_trans = uint(_scanner_index_defaults[cs]);
									}
									
									
								}
							}
							
						}
						if _cont == 1  {
							{
								cs = int(_scanner_cond_targs[_trans]);
								switch _scanner_cond_actions[_trans]  {
									case 5 :
									{{switch act  {
												case 1 :
												p = ((te))-1;
												{fmt.Print( "pat1\n" );}
												
												break;
												case 2 :
												p = ((te))-1;
												{fmt.Print( "pat2\n" );}
												
												break;
												case 3 :
												p = ((te))-1;
												{fmt.Print( "pat3\n" );}
												
												break;
												
											}
										}
									}
									
									break;
									case 3 :
									{{te = p+1;
										}}
									{{act = 1;
										}}
									
									break;
									case 4 :
									{{te = p+1;
										}}
									{{act = 2;
										}}
									
									break;
									case 6 :
									{{te = p+1;
										}}
									{{act = 3;
										}}
									
									break;
									
								}
								switch _scanner_to_state_actions[cs]  {
									case 1 :
									{{ts = 0;
										}}
									
									break;
									
								}
								if cs == 0  {
									_cont = 0;
									
								}
								if _cont == 1  {
									p += 1;
									
								}
							}
						}
					}
					
				}
			}
			
		}
	}
}
func finish() {
	if cs >= scanner_first_final {
		fmt.Println("ACCEPT")
	} else {
		fmt.Println("FAIL")
	}
}
var inp []string = []string {
	"ab89",
};

func main() {
	for _, data := range inp {
		prepare()
		exec(data)
		finish()
	}
}
