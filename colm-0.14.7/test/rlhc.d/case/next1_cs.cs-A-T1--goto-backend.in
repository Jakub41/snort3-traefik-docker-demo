host( "working/next1_cs.rl", 1 ) @{/*
	* @@LANG: csharp
	* @@GENERATED: true
	*/
	
	using System;
	// Disables lots of warnings that appear in the test suite
	#pragma warning disable 0168, 0169, 0219, 0162, 0414
	namespace Test {
		class Test
		{
			int target;
			
			
			
			
		}@
		array s8 _next1_key_offsets( 0, 15 ) = { 0, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 0 };
		
		array char _next1_trans_keys( 0, 119 ) = { c(10), c(49), c(50), c(117), c(110), c(117), c(115), c(101), c(100), c(111), c(110), c(101), c(116), c(119), c(111), c(0) };
		
		array s8 _next1_single_lengths( 0, 3 ) = { 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
		
		array s8 _next1_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _next1_index_offsets( 0, 31 ) = { 0, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 30, 31, 0 };
		
		array s8 _next1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
		
		array s8 _next1_trans_offsets( 0, 31 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 };
		
		array s8 _next1_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
		
		array s8 _next1_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _next1_cond_targs( 0, 17 ) = { 14, 14, 14, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 15, 0, 9, 0, 10, 0, 16, 0, 12, 0, 13, 0, 17, 0, 0, 0, 0, 0, 0 };
		
		array s8 _next1_cond_actions( 0, 4 ) = { 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0 };
		
		array s8 _next1_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _next1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _next1_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _next1_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int next1_start = 1;
		value int next1_first_final = 14;
		value int next1_error = 0;
		
		value int next1_en_unused = 2;
		value int next1_en_one = 8;
		value int next1_en_two = 11;
		value int next1_en_main = 1;
		
		host( "working/next1_cs.rl", 35 ) @{
			int cs;
			
			void init()
			{
			}@
			{
				cs = cast(int)next1_start;
			}
			host( "working/next1_cs.rl", 40 ) @{
			}
			
			void exec( char[] data, int len )
			{
				int p = 0;
				int pe = len;
				int eof = len;
				string _s;
				char [] buffer = new char [1024];
				int blen = 0;
			}@
			{
				int _klen;
				index char _keys;
				index s8 _ckeys;
				int _cpc;
				uint _trans = 0;
				uint _cond = 0;
				entry {
					
					if ( p == pe )
					goto _test_eof;
					if ( cs == 0 )
					goto _out;
					label _resume { 
						_keys = offset( _next1_trans_keys, _next1_key_offsets[cs] );
						_trans = cast(uint)_next1_index_offsets[cs];
						
						_klen = cast(int)_next1_single_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( TRUE ) {
								if ( _upper < _lower )
								break;
								
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( deref( data, p )) < deref( _next1_trans_keys, _mid ) )
								_upper = _mid - 1;
								else if ( ( deref( data, p )) > deref( _next1_trans_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_trans += cast(uint)(_mid - _keys);
									goto _match;
								}
							}
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
						
						_klen = cast(int)_next1_range_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( TRUE ) {
								if ( _upper < _lower )
								break;
								
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _next1_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _next1_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									goto _match;
								}
							}
							_trans += cast(uint)_klen;
						}
						
					}
					label _match {
						_ckeys = offset( _next1_cond_keys, _next1_trans_offsets[_trans] );
						_klen = cast(int)_next1_trans_lengths[_trans];
						_cond = cast(uint)_next1_trans_offsets[_trans];
						
						_cpc = 0;
						{
							index s8 _lower;
							index s8 _mid;
							index s8 _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( TRUE ) {
								if ( _upper < _lower )
								break;
								
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < cast(int)deref( _next1_cond_keys, _mid ) )
								_upper = _mid - 1;
								else if ( _cpc > cast(int)deref( _next1_cond_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_cond += cast(uint)(_mid - _ckeys);
									goto _match_cond;
								}
							}
							cs = 0;
							goto _again;
						}
					}
					label _match_cond {
						cs = cast(int)_next1_cond_targs[_cond];
						
						if ( _next1_cond_actions[_cond] == 0 )
						goto _again;
						
						switch ( _next1_cond_actions[_cond] ) {
							case 3 {
								host( "working/next1_cs.rl", 19 ) ${Console.Write( "one\n" );target = 1;
									${cs = host( "-", 1 ) ={target}=;}$}$
							}
							case 4 {
								host( "working/next1_cs.rl", 22 ) ${Console.Write( "two\n" );target = 1;
									${cs = host( "-", 1 ) ={target}=;}$}$
							}
							case 1 {
								host( "working/next1_cs.rl", 26 ) ${target = 8;
									${cs = host( "-", 1 ) ={target}=;}$}$
							}
							case 2 {
								host( "working/next1_cs.rl", 28 ) ${target = 11;
									${cs = host( "-", 1 ) ={target}=;}$}$
							}
						}
						
						
					}
					label _again {
						if ( cs == 0 )
						goto _out;
						p += 1;
						if ( p != pe )
						goto _resume;
					}
					label _test_eof { {}
					}
					label _out { {}
					}
				}
			}
			host( "working/next1_cs.rl", 51 ) @{
			}
			
			void finish( )
			{
				if ( cs >= next1_first_final )
				Console.WriteLine( "ACCEPT" );
				else
				Console.WriteLine( "FAIL" );
			}
			
			static readonly string[] inp = {
				"1one2two1one\n",
			};
			
			
			static readonly int inplen = 1;
			
			public static void Main (string[] args)
			{
				Test machine = new Test();
				for ( int i = 0; i < inplen; i++ ) {
					machine.init();
					machine.exec( inp[i].ToCharArray(), inp[i].Length );
					machine.finish();
				}
			}
		}
	}
}@