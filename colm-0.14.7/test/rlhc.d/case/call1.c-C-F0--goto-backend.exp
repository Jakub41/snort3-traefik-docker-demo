#include <stdio.h>
#include <string.h>

int num = 0;

struct test
{
	int cs, top, stack[32];
};



static const char  _test_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 ,  };
static const char  _test_trans_keys [] = { 1, 0, 3, 6, 2, 4, 0, 0, 5, 5, 2, 2, 8, 11, 12, 12, 12, 12, 11, 11, 12, 12, 4, 4, 9, 9, 8, 8, 13, 13, 8, 8, 10, 10, 1, 0, 11, 11, 7, 7, 7, 7, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0 ,  };
static const char  _test_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 8, 1, 1, 1, 1, 1, 9, 1, 1, 10, 11, 1, 1, 12, 1, 1, 1, 13, 0 ,  };
static const char  _test_index_offsets [] = { 0, 0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 27, 27, 27, 27, 0 ,  };
static const char  _test_indices [] = { 0, 0, 1, 2, 3, 0, 0, 4, 5, 6, 7, 1, 1, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 19, 20, 21, 0 ,  };
static const char  _test_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 1, 1, 22, 1, 1, 1, 1, 0 ,  };
static const char  _test_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _test_cond_targs [] = { 2, 0, 4, 3, 23, 5, 6, 7, 12, 8, 9, 10, 11, 3, 14, 15, 16, 17, 24, 19, 20, 21, 25, 0 ,  };
static const char  _test_cond_actions [] = { 7, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 5, 0 ,  };
static const char  _test_nfa_targs [] = { 0, 0 ,  };
static const char  _test_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _test_nfa_push_actions [] = { 0, 0 ,  };
static const char  _test_nfa_pop_trans [] = { 0, 0 ,  };
static const int  test_start  = 1;
static const int  test_first_final  = 23;
static const int  test_error  = 0;
static const int  test_en_even  = 13;
static const int  test_en_odd  = 18;
static const int  test_en_fail  = 22;
static const int  test_en_main  = 1;
void test_init( struct test *fsm )
{
	num = 0;
	
	{
		fsm->cs = ( int ) test_start;
		fsm->top = 0;
	}
}

void test_execute( struct test *fsm, const char *data, int len )
{
	const char *p = data;
	const char *pe = data+len;
	
	
	{
		int _trans = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( fsm->cs == 0  )
		goto _out;
		
		_resume :
		_keys = _test_trans_keys + (fsm->cs<<1);
		_inds = _test_indices + _test_index_offsets[fsm->cs];
		if ( ((*( p  ))
		)<= 118 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _test_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _test_index_defaults[fsm->cs];
			
		}
		
		else
		{
			_trans = ( int ) _test_index_defaults[fsm->cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		fsm->cs = ( int ) _test_cond_targs[_trans];
		if ( _test_cond_actions[_trans]== 0  )
		goto _again;
		
		
		_acts = _test_actions + _test_cond_actions[_trans];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					if ( num & 1 )
					{
						fsm->stack[fsm->top] = fsm->cs;
						fsm->top += 1;
						fsm->cs = (18);
						goto _again;
					}
					
					else
					{
						fsm->stack[fsm->top] = fsm->cs;
						fsm->top += 1;
						fsm->cs = 13;
						goto _again;
					}
					
				}
				
				break;
				case 1 :
				{
					{
						p = p - 1;
						
					}
					{
						fsm->top -= 1;
						fsm->cs = fsm->stack[fsm->top];
						goto _again;
					}
					
				}
				
				break;
				case 2 :
				{
					{
						p = p - 1;
						
					}
					{
						fsm->top -= 1;
						fsm->cs = fsm->stack[fsm->top];
						goto _again;
					}
					
				}
				
				break;
				case 3 :
				{
					num = num * 10 + ((((*( p  ))
					)) - '0'); 
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( fsm->cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}

int test_finish( struct test *fsm )
{
	if ( fsm->cs == test_error )
	return -1;
	if ( fsm->cs >= test_first_final )
	return 1;
	return 0;
}

#define BUFSIZE 1024

void test( char *buf )
{   
	struct test test;
	test_init( &test );
	test_execute( &test, buf, strlen(buf) );
	if ( test_finish( &test ) > 0 )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

int main()
{
	test( "78 even\n" );
	test( "89 odd\n" );
	test( "1 even\n" );
	test( "0 odd\n" );
	test( "OA ok\n" );
	test( "OA error1\n" );
	test( "OA error2\n" );
	
	return 0;
}


