host( "working/repetition.rl", 1 ) @{/*
	* @@LANG: c++
	*/
	
	/* Test repeptition operators. */
	
	#include <iostream>
	#include <stdlib.h>
	#include <stdio.h>
	#include <string.h>
	
	using namespace std;
	
	struct Rep
	{
		int cs;
		
		int init( );
		int execute( const char *data, int len );
		int finish( );
	};
	
	
	
}@
array char _Rep_trans_keys( 0, 6 ) = { 1, 0, 2, 3, 0, 0, 0, 4, 0, 0, 2, 5, 0, 0, 6, 6, 0, 6, 0, 6, 0, 6, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 6, 6, 0 };

array s8 _Rep_char_class( 0, 6 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 6, 0 };

array s8 _Rep_index_offsets( 0, 73 ) = { 0, 0, 2, 3, 8, 9, 13, 14, 15, 22, 29, 36, 37, 38, 39, 40, 41, 47, 52, 57, 62, 67, 68, 69, 70, 71, 72, 73, 0 };

array s8 _Rep_indices( 0, 30 ) = { 0, 2, 3, 3, 1, 4, 1, 5, 6, 7, 1, 1, 8, 9, 10, 11, 1, 1, 1, 1, 1, 12, 11, 1, 1, 1, 1, 1, 13, 11, 1, 1, 1, 1, 1, 14, 11, 15, 16, 17, 18, 19, 1, 1, 1, 1, 18, 20, 1, 1, 1, 21, 20, 1, 1, 1, 22, 20, 1, 1, 1, 23, 20, 1, 1, 1, 24, 20, 25, 26, 27, 28, 29, 30, 0 };

array s8 _Rep_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _Rep_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _Rep_cond_targs( 0, 27 ) = { 2, 0, 22, 3, 4, 17, 5, 6, 12, 27, 8, 27, 9, 10, 11, 13, 14, 15, 16, 5, 3, 18, 19, 20, 21, 23, 24, 25, 26, 1, 7, 0 };

array s8 _Rep_cond_actions( 0, 3 ) = { 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 1, 0 };

array s8 _Rep_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Rep_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _Rep_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Rep_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Rep_start = 1;
value int Rep_first_final = 27;
value int Rep_error = 0;

value int Rep_en_main = 1;

host( "working/repetition.rl", 43 ) @{
	
	int Rep::init( )
	{
	}@
	{
		cs = cast(int)Rep_start;
	}
	host( "working/repetition.rl", 47 ) @{
		return 1;
	}
	
	int Rep::execute( const char *_data, int _len )
	{
		const char *p = _data;
		const char *pe = _data+_len;
		
	}@
	{
		int _trans = 0;
		index char _keys;
		index s8 _inds;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _Rep_trans_keys, (cs<<1) );
				_inds = offset( _Rep_indices, _Rep_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 100 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_Rep_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _Rep_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _Rep_trans_keys, _keys ) )
					_trans = cast(int)deref( _Rep_indices, _inds + cast(int)( _ic - cast(int)deref( _Rep_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_Rep_index_defaults[cs];
				}
				else {
					_trans = cast(int)_Rep_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_Rep_cond_targs[_trans];
				
				if ( _Rep_cond_actions[_trans] == 0 )
				goto _again;
				
				switch ( _Rep_cond_actions[_trans] ) {
					case 3 {
						host( "working/repetition.rl", 28 ) ${ cout << "end" << endl; }$
					}
					case 1 {
						host( "working/repetition.rl", 26 ) ${ cout << "begin" << endl; }$	host( "working/repetition.rl", 27 ) ${ cout << "in" << endl; }$
					}
					case 2 {
						host( "working/repetition.rl", 28 ) ${ cout << "end" << endl; }$	host( "working/repetition.rl", 26 ) ${ cout << "begin" << endl; }$	host( "working/repetition.rl", 27 ) ${ cout << "in" << endl; }$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/repetition.rl", 56 ) @{
		
		if ( cs == Rep_error )
		return -1;
		if ( cs >= Rep_first_final )
		return 1;
		return 0;
	}
	
	int Rep::finish( )
	{
		if ( cs == Rep_error )
		return -1;
		if ( cs >= Rep_first_final )
		return 1;
		return 0;
	}
	
	void test( const char *buf )
	{
		Rep rep;
		int len = strlen( buf );
		rep.init();
		rep.execute( buf, len );
		if ( rep.finish() > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	int main()
	{
		test(
		"aaaaa\n"
		"-\n"
		"\n"
		"b\n"
		"bb\n"
		"bbb\n"
		"bbbb\n"
		"bbbbb\n"
		"-\n"
		"ccccc\n"
		"ccccccc\n"
		"cccccccccc\n"
		"-\n"
		"dd\n"
		"ddd\n"
		"dddd\n"
		"ddddd\n"
		);
		
		test(
		"a\n"
		"-\n"
		"b\n"
		"-\n"
		"c\n"
		"-\n"
		"d\n"
		);
		
		return 0;
	}
	
}@