host( "working/cond2.rl", 1 ) @{/* 
	* @@LANG: c++
	*/
	
	#include <iostream>
	#include <string.h>
	using std::cout;
	using std::endl;
	
	
	
}@
array char _foo_trans_keys( 0, 2 ) = { 1, 0, 0, 2, 1, 0, 0, 2, 0 };

array s8 _foo_char_class( 0, 2 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 };

array s8 _foo_index_offsets( 0, 3 ) = { 0, 0, 3, 3, 0 };

array s8 _foo_indices( 0, 2 ) = { 0, 1, 2, 0, 1, 2, 0 };

array s8 _foo_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 0 };

array s8 _foo_trans_cond_spaces( -1, 2 ) = { 2, -1, -1, 0 };

array s8 _foo_trans_offsets( 0, 5 ) = { 0, 4, 5, 0 };

array s8 _foo_cond_targs( 0, 3 ) = { 0, 1, 2, 3, 0, 1, 0 };

array s8 _foo_cond_actions( 0, 3 ) = { 0, 1, 2, 3, 0, 0, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 2;

value int foo_en_main = 1;

host( "working/cond2.rl", 27 ) @{
	
	void test( int i, int j, const char *str )
	{
		int cs = foo_start;
		const char *p = str;
		const char *pe = str + strlen( str );
		
		cout << "run:" << endl;
	}@
	{
		int _trans = 0;
		uint _cond = 0;
		index char _keys;
		index s8 _inds;
		int _cpc;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _foo_trans_keys, (cs<<1) );
				_inds = offset( _foo_indices, _foo_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_foo_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _foo_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _foo_trans_keys, _keys ) )
					_trans = cast(int)deref( _foo_indices, _inds + cast(int)( _ic - cast(int)deref( _foo_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_foo_index_defaults[cs];
				}
				else {
					_trans = cast(int)_foo_index_defaults[cs];
				}
				
				_cond = cast(uint)_foo_trans_offsets[_trans];
				
				_cpc = 0;
				switch ( _foo_trans_cond_spaces[_trans] ) {
					
					case 2 {
						if ( host( "working/cond2.rl", 13 ) ={i}= ) _cpc += 1;
						if ( host( "working/cond2.rl", 14 ) ={j}= ) _cpc += 2;
					}
				}
				_cond += cast(uint)_cpc;
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_foo_cond_targs[_cond];
				
				if ( _foo_cond_actions[_cond] == 0 )
				goto _again;
				
				switch ( _foo_cond_actions[_cond] ) {
					case 1 {
						host( "working/cond2.rl", 16 ) ${ cout << "  one" << endl;}$
					}
					case 2 {
						host( "working/cond2.rl", 17 ) ${ cout << "  two" << endl;}$
					}
					case 3 {
						host( "working/cond2.rl", 16 ) ${ cout << "  one" << endl;}$	host( "working/cond2.rl", 17 ) ${ cout << "  two" << endl;}$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/cond2.rl", 36 ) @{
		if ( cs >= foo_first_final )
		cout << "  success" << endl;
		else
		cout << "  failure" << endl;
		cout << endl;
	}
	
	int main()
	{
		test( 0, 0, "hi\n\n" );
		test( 1, 0, "hi\n\n" );
		test( 0, 1, "hi\n" );
		test( 0, 1, "hi\n\n" );
		test( 1, 1, "hi\n" );
		test( 1, 1, "hi\n\n" );
		test( 1, 1, "hi\n\nx" );
		return 0;
	}
	
}@