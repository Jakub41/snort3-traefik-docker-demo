host( "working/gotocallret2_c.rl", 1 ) @{/*
	* @@LANG: c
	* @@GENERATED: true
	*/
	
	#include <string.h>
	#include <stdio.h>
	
	char comm ;
	int top ;
	int stack [32];
	char * ts ;
	char * te ;
	int act ;
	int val ;
	
	
	
	
	
}@
array s8 _GotoCallRet_actions( 0, 20 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 0 };

array s8 _GotoCallRet_key_offsets( 0, 31 ) = { 0, 0, 1, 2, 3, 4, 4, 10, 13, 15, 15, 21, 23, 24, 30, 31, 0 };

array char _GotoCallRet_trans_keys( 0, 125 ) = { 102, 111, 105, 108, 10, 32, 91, 123, 97, 122, 32, 97, 122, 97, 122, 32, 91, 123, 125, 97, 122, 97, 122, 32, 32, 91, 93, 123, 97, 122, 32, 97, 122, 0 };

array s8 _GotoCallRet_single_lengths( 0, 4 ) = { 0, 1, 1, 1, 1, 0, 4, 1, 0, 0, 4, 0, 1, 4, 1, 0, 0 };

array s8 _GotoCallRet_range_lengths( 0, 1 ) = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0 };

array s8 _GotoCallRet_index_offsets( 0, 39 ) = { 0, 0, 2, 4, 6, 8, 9, 15, 18, 20, 21, 27, 29, 31, 37, 39, 0 };

array s8 _GotoCallRet_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _GotoCallRet_trans_offsets( 0, 50 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 };

array s8 _GotoCallRet_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _GotoCallRet_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _GotoCallRet_cond_targs( 0, 15 ) = { 2, 6, 3, 6, 4, 6, 6, 6, 9, 6, 6, 6, 6, 7, 0, 1, 8, 6, 8, 6, 0, 10, 10, 10, 12, 11, 0, 11, 10, 12, 10, 13, 13, 14, 13, 15, 0, 14, 13, 15, 13, 6, 6, 6, 6, 6, 6, 10, 10, 13, 13, 0 };

array s8 _GotoCallRet_cond_actions( 0, 41 ) = { 0, 41, 0, 41, 0, 41, 33, 41, 1, 37, 35, 31, 29, 7, 0, 0, 0, 39, 0, 39, 0, 13, 11, 9, 0, 0, 0, 0, 17, 0, 15, 23, 21, 0, 19, 0, 0, 0, 25, 0, 27, 41, 41, 41, 41, 39, 39, 17, 15, 25, 27, 0 };

array s8 _GotoCallRet_to_state_actions( 0, 3 ) = { 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0 };

array s8 _GotoCallRet_from_state_actions( 0, 5 ) = { 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0 };

array s8 _GotoCallRet_eof_trans_indexed( 0, 27 ) = { 0, 6, 6, 6, 6, 0, 0, 12, 12, 0, 0, 19, 20, 0, 26, 27, 0 };

array s8 _GotoCallRet_eof_trans_direct( 0, 51 ) = { 0, 42, 43, 44, 45, 0, 0, 46, 47, 0, 0, 48, 49, 0, 50, 51, 0 };

array s8 _GotoCallRet_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _GotoCallRet_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _GotoCallRet_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _GotoCallRet_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int GotoCallRet_start = 6;
value int GotoCallRet_first_final = 6;
value int GotoCallRet_error = 0;

value int GotoCallRet_en_handle = 5;
value int GotoCallRet_en_one = 10;
value int GotoCallRet_en_two = 13;
value int GotoCallRet_en_main = 6;

host( "working/gotocallret2_c.rl", 84 ) @{
	int cs;
	int blen;
	char buffer[1024];
	
	void init()
	{
	}@
	{
		cs = cast(int)GotoCallRet_start;
		top = 0;
		ts = nil;
		te = nil;
	}
	host( "working/gotocallret2_c.rl", 91 ) @{
	}
	
	void exec( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
		char *eof = pe;
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _ckeys;
		int _cpc;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_acts = offset( _GotoCallRet_actions, _GotoCallRet_from_state_actions[cs] );
				_nacts = cast(uint)deref( _GotoCallRet_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 ) {
					switch ( deref( _GotoCallRet_actions, _acts ) ) {
						case 2 {
							host( "NONE", 1 ) ${${ts = p;}$}$
						}
					}
					_nacts -= 1;
					_acts += 1;
				}
				
				_keys = offset( _GotoCallRet_trans_keys, _GotoCallRet_key_offsets[cs] );
				_trans = cast(uint)_GotoCallRet_index_offsets[cs];
				
				_klen = cast(int)_GotoCallRet_single_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _GotoCallRet_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _GotoCallRet_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_GotoCallRet_range_lengths[cs];
				if ( _klen > 0 ) {
					index char _lower;
					index char _mid;
					index char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _GotoCallRet_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _GotoCallRet_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _GotoCallRet_cond_keys, _GotoCallRet_trans_offsets[_trans] );
				_klen = cast(int)_GotoCallRet_trans_lengths[_trans];
				_cond = cast(uint)_GotoCallRet_trans_offsets[_trans];
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _GotoCallRet_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _GotoCallRet_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_GotoCallRet_cond_targs[_cond];
				
				if ( _GotoCallRet_cond_actions[_cond] == 0 )
				goto _again;
				
				_acts = offset( _GotoCallRet_actions, _GotoCallRet_cond_actions[_cond] );
				_nacts = cast(uint)deref( _GotoCallRet_actions, _acts );
				_acts += 1;
				while ( _nacts > 0 )
				{
					switch ( deref( _GotoCallRet_actions, _acts ) )
					{
						case 0 {
							host( "working/gotocallret2_c.rl", 22 ) ${printf( "%s", "handle " );
								${p = p - 1; }$if ( val == 1 )
								{
									${cs = host( "-", 1 ) ={10}=;}$
								} 
								if ( val == 2 )
								{
									${cs = host( "-", 1 ) ={13}=;}$
								} 
								if ( val == 3 )
								{
									${cs = 6;}$} 
							}$
						}
						case 3 {
							host( "NONE", 1 ) ${${te = p+1;}$}$
						}
						case 4 {
							host( "working/gotocallret2_c.rl", 38 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 38 ) ${printf( "%s", "{ " );
											${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={10}=; goto _again;}$}$}$}$
							}
							case 5 {
								host( "working/gotocallret2_c.rl", 40 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 40 ) ${printf( "%s", "[ " );
											${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={13}=; goto _again;}$}$}$}$
							}
							case 6 {
								host( "working/gotocallret2_c.rl", 47 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 47 ) ${printf( "%s", "space " );
										}$}$}$
							}
							case 7 {
								host( "working/gotocallret2_c.rl", 42 ) ${${te = p;p = p - 1;host( "working/gotocallret2_c.rl", 42 ) ${printf( "%s", "} " );
										${top-= 1;cs = stack[top]; goto _again;}$}$}$}$
						}
						case 8 {
							host( "working/gotocallret2_c.rl", 44 ) ${${te = p;p = p - 1;host( "working/gotocallret2_c.rl", 44 ) ${printf( "%s", "word " );
										val = 1;
										${cs = host( "-", 1 ) ={5}=; goto _again;}$}$}$}$
						}
						case 9 {
							host( "working/gotocallret2_c.rl", 52 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 52 ) ${printf( "%s", "{ " );
											${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={10}=; goto _again;}$}$}$}$
							}
							case 10 {
								host( "working/gotocallret2_c.rl", 54 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 54 ) ${printf( "%s", "[ " );
											${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={13}=; goto _again;}$}$}$}$
							}
							case 11 {
								host( "working/gotocallret2_c.rl", 61 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 61 ) ${printf( "%s", "space " );
										}$}$}$
							}
							case 12 {
								host( "working/gotocallret2_c.rl", 56 ) ${${te = p;p = p - 1;host( "working/gotocallret2_c.rl", 56 ) ${printf( "%s", "] " );
											${top-= 1;cs = stack[top]; goto _again;}$}$}$}$
							}
							case 13 {
								host( "working/gotocallret2_c.rl", 58 ) ${${te = p;p = p - 1;host( "working/gotocallret2_c.rl", 58 ) ${printf( "%s", "word " );
											val = 2;
											${cs = host( "-", 1 ) ={5}=; goto _again;}$}$}$}$
							}
							case 14 {
								host( "working/gotocallret2_c.rl", 66 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 66 ) ${printf( "%s", "{ " );
												${stack[top] = cs; top += 1;cs = 10; goto _again;}$}$}$}$
								}
								case 15 {
									host( "working/gotocallret2_c.rl", 68 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 68 ) ${printf( "%s", "[ " );
												${stack[top] = cs; top += 1;cs = 13; goto _again;}$}$}$}$
								}
								case 16 {
									host( "working/gotocallret2_c.rl", 73 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 73 ) ${printf( "%s", "this is the foil" );
											}$}$}$
								}
								case 17 {
									host( "working/gotocallret2_c.rl", 75 ) ${${te = p+1;host( "working/gotocallret2_c.rl", 75 ) ${printf( "%s", "space " );
											}$}$}$
								}
								case 18 {
									host( "working/gotocallret2_c.rl", 77 ) ${${te = p+1;}$}$
								}
								case 19 {
									host( "working/gotocallret2_c.rl", 70 ) ${${te = p;p = p - 1;host( "working/gotocallret2_c.rl", 70 ) ${printf( "%s", "word " );
												val = 3;
												${cs = 5; goto _again;}$}$}$}$
								}
								case 20 {
									host( "working/gotocallret2_c.rl", 70 ) ${${p = ((te))-1;
											host( "working/gotocallret2_c.rl", 70 ) ${printf( "%s", "word " );
												val = 3;
												${cs = 5; goto _again;}$}$}$}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
						
						
					}
					label _again {
						_acts = offset( _GotoCallRet_actions, _GotoCallRet_to_state_actions[cs] );
						_nacts = cast(uint)deref( _GotoCallRet_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 ) {
							switch ( deref( _GotoCallRet_actions, _acts ) ) {
								case 1 {
									host( "NONE", 1 ) ${${ts = nil;}$}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
						
						if ( cs == 0 )
						goto _out;
						p += 1;
						if ( p != pe )
						goto _resume;
					}
					label _test_eof { {}
						if ( p == eof )
						{
							if ( _GotoCallRet_eof_trans_direct[cs] > 0 ) {
								_trans = cast(uint)_GotoCallRet_eof_trans_direct[cs] - 1;
								_cond = cast(uint)_GotoCallRet_trans_offsets[_trans];
								goto _match_cond;
							}
						}
						
					}
					label _out { {}
					}
				}
			}
			host( "working/gotocallret2_c.rl", 99 ) @{
			}
			
			void finish( )
			{
				if ( cs >= GotoCallRet_first_final )
				printf( "ACCEPT\n" );
				else
				printf( "FAIL\n" );
			}
			
			char *inp[] = {
				"{a{b[c d]d}c}\n",
				"[a{b[c d]d}c}\n",
			"[a[b]c]d{ef{g{h}i}j}l\n",
			"{{[]}}\n",
			"a b c\n",
			"{a b c}\n",
			"[a b c]\n",
			"{]\n",
				"{{}\n",
					"[[[[[[]]]]]]\n",
					"[[[[[[]]}]]]\n",
			};
			
			int inplen = 11;
			
			int main( )
			{
				int i;
				for ( i = 0; i < inplen; i++ ) {
					init();
					exec( inp[i], strlen(inp[i]) );
					finish();
				}
				return 0;
			}
			
		}@