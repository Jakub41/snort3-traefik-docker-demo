host( "working/java2.rl", 1 ) @{/*
	* @@LANG: java
	* @@PROHIBIT_GENFLAGS: -F0 -F1
	*/
	
	class java2
	{
		
		
	}@
	array s8 _java1_key_offsets( 0, 13 ) = { 0, 0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 0 };
	
	array int _java1_trans_keys( 0, 1073741824 ) = { 1, 2, 3, 4, 5, 9, 6, 7, 8, 1073741824, 10, 11, 12, 0 };
	
	array s8 _java1_single_lengths( 0, 2 ) = { 0, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 0, 0 };
	
	array s8 _java1_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _java1_index_offsets( 0, 25 ) = { 0, 0, 2, 4, 6, 8, 11, 13, 15, 17, 19, 21, 23, 25, 0 };
	
	array s8 _java1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _java1_trans_offsets( 0, 25 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0 };
	
	array s8 _java1_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
	
	array s8 _java1_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _java1_cond_targs( 0, 13 ) = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 10, 0, 7, 0, 8, 0, 9, 0, 13, 0, 11, 0, 12, 0, 9, 0, 0, 0 };
	
	array s8 _java1_cond_actions( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _java1_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _java1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _java1_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _java1_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int java1_start = 1;
	value int java1_first_final = 13;
	value int java1_error = 0;
	
	value int java1_en_main = 1;
	
	host( "working/java2.rl", 20 ) @{
		
		static void test( int data[] )
		{
			int cs, p = 0, pe = data.length;
			int top;
			
		}@
		{
			cs = cast(int)java1_start;
		}
		host( "working/java2.rl", 27 ) @{
		}@
		{
			int _klen;
			uint _trans = 0;
			uint _cond = 0;
			uint _have = 0;
			uint _cont = 1;
			index int _keys;
			index s8 _ckeys;
			int _cpc;
			while ( _cont == 1 ) {
				
				if ( cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						_keys = offset( _java1_trans_keys, _java1_key_offsets[cs] );
						_trans = cast(uint)_java1_index_offsets[cs];
						_have = 0;
						
						_klen = cast(int)_java1_single_lengths[cs];
						if ( _klen > 0 ) {
							index int _lower;
							index int _mid;
							index int _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0 ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( deref( data, p )) < deref( _java1_trans_keys, _mid ) )
								_upper = _mid - 1;
								else if ( ( deref( data, p )) > deref( _java1_trans_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_trans += cast(uint)(_mid - _keys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								_keys += _klen;
								_trans += cast(uint)_klen;
							}
						}
						
						if ( _have == 0 ) {
							_klen = cast(int)_java1_range_lengths[cs];
							if ( _klen > 0 ) {
								index int _lower;
								index int _mid;
								index int _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper ) {
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( deref( data, p )) < deref( _java1_trans_keys, _mid ) )
									_upper = _mid - 2;
									else if ( ( deref( data, p )) > deref( _java1_trans_keys, _mid + 1 ) )
									_lower = _mid + 2;
									else {
										_trans += cast(uint)((_mid - _keys)>>1);
										_have = 1;
									}
								}
								if ( _have == 0 )
								_trans += cast(uint)_klen;
							}
						}
						
						_ckeys = offset( _java1_cond_keys, _java1_trans_offsets[_trans] );
						_klen = cast(int)_java1_trans_lengths[_trans];
						_cond = cast(uint)_java1_trans_offsets[_trans];
						_have = 0;
						
						_cpc = 0;
						{
							index s8 _lower;
							index s8 _mid;
							index s8 _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < cast(int)deref( _java1_cond_keys, _mid ) )
								_upper = _mid - 1;
								else if ( _cpc > cast(int)deref( _java1_cond_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_cond += cast(uint)(_mid - _ckeys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								cs = 0;
								_cont = 0;
							}
						}
					}
					if ( _cont == 1 ) {
						cs = cast(int)_java1_cond_targs[_cond];
						
						if ( cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}
				}
			}
		}
		host( "working/java2.rl", 28 ) @{
			
			if ( cs >= java1_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final int t1[] = { 1, 2, 3, 4, 5, 6, 7, 8, 1073741824 };
		static final int t2[] = { 1, 2, 3, 4, 9, 10, 11, 12, 1073741824 };
		static final int t3[] = { 1, 2, 3, 4, 1073741824 };
		
		public static void main( String args[] )
		{
			test( t1 );
			test( t2 );
			test( t3 );
		}
	}
	
}@