#include <string.h>
#include <stdio.h>

int neg ;
int value ;




static const char  _atoi_actions [] = { 0, 1, 0, 1, 2, 1, 5, 1, 6, 2, 0, 1, 2, 0, 2, 2, 3, 4, 0 ,  };
static const char  _atoi_trans_keys [] = { 1, 0, 2, 4, 4, 4, 0, 4, 1, 0, 0 ,  };
static const char  _atoi_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0 ,  };
static const char  _atoi_index_offsets [] = { 0, 0, 3, 4, 9, 0 ,  };
static const char  _atoi_indices [] = { 0, 2, 3, 4, 5, 1, 1, 1, 4, 0 ,  };
static const char  _atoi_index_defaults [] = { 0, 1, 1, 1, 1, 0 ,  };
static const char  _atoi_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _atoi_cond_targs [] = { 2, 0, 2, 3, 3, 4, 0 ,  };
static const char  _atoi_cond_actions [] = { 1, 0, 9, 12, 3, 15, 0 ,  };
static const char  _atoi_to_state_actions [] = { 0, 5, 5, 5, 5, 0 ,  };
static const char  _atoi_from_state_actions [] = { 0, 7, 7, 7, 7, 0 ,  };
static const char  _atoi_nfa_targs [] = { 0, 0 ,  };
static const char  _atoi_nfa_offsets [] = { 0, 0, 0, 0, 0, 0 ,  };
static const char  _atoi_nfa_push_actions [] = { 0, 0 ,  };
static const char  _atoi_nfa_pop_trans [] = { 0, 0 ,  };
static const int  atoi_start  = 1;
static const int  atoi_first_final  = 4;
static const int  atoi_error  = 0;
static const int  atoi_en_main  = 1;
int cs;

void init()
{
	value = 0;
	neg = 0;
	
	{
		cs = ( int ) atoi_start;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	
	{
		int _trans = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_acts = _atoi_actions + _atoi_from_state_actions[cs];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 6 :
				{
					printf( "from on %d\n", (int)*p );
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		_keys = _atoi_trans_keys + (cs<<1);
		_inds = _atoi_indices + _atoi_index_offsets[cs];
		if ( ((*( p  ))
		)<= 57 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _atoi_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _atoi_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _atoi_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _atoi_cond_targs[_trans];
		if ( _atoi_cond_actions[_trans]== 0  )
		goto _again;
		
		
		_acts = _atoi_actions + _atoi_cond_actions[_trans];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					neg = 0;
					value = 0;
					
				}
				
				break;
				case 1 :
				{
					neg = 1;
					
				}
				
				break;
				case 2 :
				{
					value = value * 10 + ( int ) ( (((*( p  ))
					)) - 48 )
					;
					
				}
				
				break;
				case 3 :
				{
					if ( neg != 0 ) {
						value = -1 * value;
					} 
					
				}
				
				break;
				case 4 :
				{
					printf( "%d", value );
					printf( "%s", "\n" );
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		_acts = _atoi_actions + _atoi_to_state_actions[cs];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 5 :
				{
					printf( "to on %d\n", (int)*p );
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}

void finish( )
{
	if ( cs < atoi_first_final )
	printf( "-> FAIL\n" );
}

char *inp[] = {
	"1\n",
	"12\n",
	"222222\n",
	"+2123\n",
	"-99\n",
	"-12321\n",
	"213 3213\n",
	"--123\n",
	" -3000\n",
};

int inplen = 9;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

