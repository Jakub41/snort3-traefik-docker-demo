static mut ts : i32
= 0;
static mut te : i32
= 0;
static mut act : i32 = 0;
static mut token : i32 = 0;





static _scanner_actions: [i8 ; 19] = [ 0, 1, 0, 1, 1, 1, 5, 1, 6, 1, 7, 2, 2, 3, 2, 2, 4, 0 , 0 ];
static _scanner_key_offsets: [i8 ; 5] = [ 0, 3, 5, 0 , 0 ];
static _scanner_trans_keys: [u8 ; 10] = [ 99, 97, 98, 97, 98, 99, 97, 98, 0 , 0 ];
static _scanner_single_lengths: [i8 ; 5] = [ 1, 2, 1, 0 , 0 ];
static _scanner_range_lengths: [i8 ; 5] = [ 1, 0, 1, 0 , 0 ];
static _scanner_index_offsets: [i8 ; 5] = [ 0, 3, 6, 0 , 0 ];
static _scanner_trans_cond_spaces: [i8 ; 13] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _scanner_trans_offsets: [i8 ; 13] = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 , 0 ];
static _scanner_trans_lengths: [i8 ; 13] = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 0 ];
static _scanner_cond_keys: [i8 ; 13] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _scanner_cond_targs: [i8 ; 13] = [ 1, 0, 1, 2, 2, 1, 1, 0, 1, 1, 1, 0 , 0 ];
static _scanner_cond_actions: [i8 ; 13] = [ 5, 0, 9, 11, 14, 7, 5, 0, 9, 9, 9, 0 , 0 ];
static _scanner_to_state_actions: [i8 ; 5] = [ 0, 1, 0, 0 , 0 ];
static _scanner_from_state_actions: [i8 ; 5] = [ 0, 3, 0, 0 , 0 ];
static _scanner_eof_trans_indexed: [i8 ; 5] = [ 2, 0, 2, 0 , 0 ];
static _scanner_eof_trans_direct: [i8 ; 5] = [ 10, 0, 11, 0 , 0 ];
static _scanner_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _scanner_nfa_offsets: [i8 ; 5] = [ 0, 0, 0, 0 , 0 ];
static _scanner_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _scanner_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static scanner_start : i32 = 1;
static scanner_first_final : i32 = 1;
static scanner_error : i32 = -1;
static scanner_en_main : i32 = 1;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( scanner_start ) as i32;
		ts = 0;
		te = 0;
		act = 0;
	}
	
	{
		let mut _klen = 0;
		let mut _trans  = 0;
		let mut _cond  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _acts :i32 = 0;
		let mut _nacts = 0;
		let mut _keys :i32 = 0;
		let mut _ckeys :i32 = 0;
		let mut _cpc = 0;
		while ( _cont == 1  )
		{
		
			_have = 0;
			if ( p == pe  ) {
				{
					if ( p == eof  ) {
						{
							if ( _scanner_eof_trans_direct[(cs) as usize]> 0  ) {
								{
									_trans = ( _scanner_eof_trans_direct[(cs) as usize] ) as u32- 1;
									_cond = ( _scanner_trans_offsets[(_trans) as usize] ) as u32;
									_have = 1;
								}
								
							}
							if ( _have == 0  ) {
								{
								}
								
							}
						}
						
						
					}
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_acts = ( _scanner_from_state_actions[(cs) as usize] ) as i32;
							_nacts = ( _scanner_actions[(_acts ) as usize]
							) as u32;
							_acts += 1;
							while ( _nacts > 0  )
							{
								match ( _scanner_actions[(_acts ) as usize]
								) {
									1  => {
										{{ts = p;
											}}
										
									}
									
									_ => {}
								}
								_nacts -= 1;
								_acts += 1;
							}
							
							
							_keys = ( _scanner_key_offsets[(cs) as usize] ) as i32;
							_trans = ( _scanner_index_offsets[(cs) as usize] ) as u32;
							_have = 0;
							_klen = ( _scanner_single_lengths[(cs) as usize] ) as i32;
							if ( _klen > 0  ) {
								{
									let mut _lower :i32 = 0;
									let mut _mid :i32 = 0;
									let mut _upper :i32 = 0;
									_lower = _keys;
									_upper = _keys + _klen - 1;
									while ( _upper >= _lower && _have == 0  )
									{
										_mid = _lower + ((_upper-_lower) >> 1);
										if ( ( data[(p ) as usize]
										) < _scanner_trans_keys[(_mid ) as usize]
										) {
											_upper = _mid - 1;
											
										}
										else if ( ( data[(p ) as usize]
										) > _scanner_trans_keys[(_mid ) as usize]
										) {
											_lower = _mid + 1;
											
										}
										else {
											{
												_trans += ( (_mid - _keys) ) as u32;
												_have = 1;
											}
											
										}
									}
									
									if ( _have == 0  ) {
										{
											_keys += _klen;
											_trans += ( _klen ) as u32;
										}
										
									}
								}
								
								
							}
							if ( _have == 0  ) {
								{
									_klen = ( _scanner_range_lengths[(cs) as usize] ) as i32;
									if ( _klen > 0  ) {
										{
											let mut _lower :i32 = 0;
											let mut _mid :i32 = 0;
											let mut _upper :i32 = 0;
											_lower = _keys;
											_upper = _keys + (_klen<<1) - 2;
											while ( _have == 0 && _lower <= _upper  )
											{
												_mid = _lower + (((_upper-_lower) >> 1) & !1
												);
												if ( ( data[(p ) as usize]
												) < _scanner_trans_keys[(_mid ) as usize]
												) {
													_upper = _mid - 2;
													
												}
												else if ( ( data[(p ) as usize]
												) > _scanner_trans_keys[(_mid + 1 ) as usize]
												) {
													_lower = _mid + 2;
													
												}
												else {
													{
														_trans += ( ((_mid - _keys)>>1) ) as u32;
														_have = 1;
													}
													
												}
											}
											
											if ( _have == 0  ) {
												_trans += ( _klen ) as u32;
												
											}
										}
										
									}
								}
								
								
							}
							_ckeys = ( _scanner_trans_offsets[(_trans) as usize] ) as i32;
							_klen = ( _scanner_trans_lengths[(_trans) as usize] ) as i32;
							_cond = ( _scanner_trans_offsets[(_trans) as usize] ) as u32;
							_have = 0;
							_cpc = 0;
							{
								let mut _lower :i32 = 0;
								let mut _mid :i32 = 0;
								let mut _upper :i32 = 0;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( _cpc < ( _scanner_cond_keys[(_mid ) as usize]
									) as i32 ) {
										_upper = _mid - 1;
										
									}
									else if ( _cpc > ( _scanner_cond_keys[(_mid ) as usize]
									) as i32 ) {
										_lower = _mid + 1;
										
									}
									else {
										{
											_cond += ( (_mid - _ckeys) ) as u32;
											_have = 1;
										}
										
									}
								}
								
								if ( _have == 0  ) {
									{
										cs = -1;
										_cont = 0;
									}
									
								}
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _scanner_cond_targs[(_cond) as usize] ) as i32;
							if ( _scanner_cond_actions[(_cond) as usize]!= 0  ) {
								{
									_acts = ( _scanner_cond_actions[(_cond) as usize] ) as i32;
									_nacts = ( _scanner_actions[(_acts ) as usize]
									) as u32;
									_acts += 1;
									while ( _nacts > 0  )
									{
										match ( _scanner_actions[(_acts ) as usize]
										) {
											2  => {
												{{te = p+1;
													}}
												
											}
											3  => {
												{{act = 1;
													}}
												
											}
											4  => {
												{{act = 3;
													}}
												
											}
											5  => {
												{{te = p+1;
														{print!( "{}", "pat2\n" );
														}
													}}
												
											}
											6  => {
												{{te = p+1;
														{print!( "{}", "any\n" );
														}
													}}
												
											}
											7  => {
												{{match ( act  ) {
															1  => {
																p = ((te))-1;
																{print!( "{}", "pat1\n" );
																}
																
															}
															3  => {
																p = ((te))-1;
																{print!( "{}", "any\n" );
																}
																
															}
															
															_ => {}
														}
													}
												}
												
											}
											
											_ => {}
										}
										_nacts -= 1;
										_acts += 1;
									}
									
								}
								
								
							}
							_acts = ( _scanner_to_state_actions[(cs) as usize] ) as i32;
							_nacts = ( _scanner_actions[(_acts ) as usize]
							) as u32;
							_acts += 1;
							while ( _nacts > 0  )
							{
								match ( _scanner_actions[(_acts ) as usize]
								) {
									0  => {
										{{ts = 0;
											}}
										
									}
									
									_ => {}
								}
								_nacts -= 1;
								_acts += 1;
							}
							
							
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
						
					}
				}
				
			}
		}
		
	}
	if ( cs >= scanner_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "a".to_string() ); }
}

