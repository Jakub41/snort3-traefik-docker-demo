class call4_java
{
	int target ;
	int top ;
	int stack [] = new int[32];
	
	
	
	
	
	private static char  _call4_trans_keys [] = { 1, 0, 10, 10, 6, 6, 10, 10, 8, 8, 5, 5, 4, 4, 7, 7, 6, 6, 5, 5, 9, 9, 11, 11, 7, 7, 0, 3, 1, 0, 1, 0, 1, 0, 0,  };
	private static byte  _call4_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 1, 1, 1, 8, 9, 10, 1, 11, 0 ,  };
	private static byte  _call4_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 16, 16, 0 ,  };
	private static byte  _call4_indices [] = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 14, 15, 0 ,  };
	private static byte  _call4_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _call4_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _call4_cond_targs [] = { 2, 0, 3, 4, 5, 6, 14, 8, 9, 15, 11, 12, 16, 13, 13, 13, 0 ,  };
	private static byte  _call4_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 3, 4, 0 ,  };
	private static byte  _call4_nfa_targs [] = { 0, 0 ,  };
	private static byte  _call4_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _call4_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _call4_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  call4_start  = 13;
	private static int  call4_first_final  = 13;
	private static int  call4_error  = 0;
	private static int  call4_en_unused  = 1;
	private static int  call4_en_one  = 7;
	private static int  call4_en_two  = 10;
	private static int  call4_en_main  = 13;
	int cs;
	
	void init()
	{
		{
			cs = (int)call4_start;
			top = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		String _s;
		{
			int _trans = 0;
			int _keys;
			int _inds;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					case 1:
					_keys = (cs<<1) ;
					_inds = _call4_index_offsets[cs] ;
					if ( ( data[p ]) <= 119 && ( data[p ]) >= 10  )
					{
						int _ic = (int)_call4_char_class[(int)( data[p ]) - 10];
						if ( _ic <= (int)_call4_trans_keys[_keys+1 ]&& _ic >= (int)_call4_trans_keys[_keys ] )
						_trans = (int)_call4_indices[_inds + (int)( _ic - (int)_call4_trans_keys[_keys ])  ];
						
						else
						_trans = (int)_call4_index_defaults[cs];
						
						
					}
					
					else
					{
						_trans = (int)_call4_index_defaults[cs];
						
					}
					
					{
						_goto_targ = 2;
						if (true)
						continue _goto;
					}
					
					case 2:
					cs = (int)_call4_cond_targs[_trans];
					if ( _call4_cond_actions[_trans] == 0  )
					{
						_goto_targ = 3;
						if (true)
						continue _goto;
					}
					
					switch ( _call4_cond_actions[_trans]  ) {
						case 1 :
						{
							System.out.print( "one\n" );
							{
								top -= 1;
								cs = stack[top];
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
						}
						
						break;
						case 2 :
						{
							System.out.print( "two\n" );
							{
								top -= 1;
								cs = stack[top];
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
						}
						
						break;
						case 3 :
						{
							target = 7;
							{
								stack[top] = cs;
								top += 1;
								cs = (target);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
						}
						
						break;
						case 4 :
						{
							target = 10;
							{
								stack[top] = cs;
								top += 1;
								cs = (target);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
						}
						
						break;
						
					}
					
					case 3:
					if ( cs == 0  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					p+= 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 4:
					{
					
					}
					
					case 5:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= call4_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"1one2two1one\n",
	};
	
	static final int inplen = 1;
	
	public static void main (String[] args)
	{
		call4_java machine = new call4_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
