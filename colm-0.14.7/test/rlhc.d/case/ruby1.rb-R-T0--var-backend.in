host( "working/ruby1.rl", 1 ) @{#
	# @@LANG: ruby
	#
	# Test the host language scanning for ruby.
	#
	
	# %%{
		a = 1
		b = /%%\{\}/;
		
		
		
		# %%{
			e = 1
			f = /%%\{\}/;
			
		}@
		array s8 _ruby1_actions( 0, 1 ) = { 0, 1, 0, 0 };
		
		array s8 _ruby1_key_offsets( 0, 9 ) = { 0, 0, 2, 6, 9, 0 };
		
		array char _ruby1_trans_keys( 0, 122 ) = { 97, 122, 48, 57, 97, 122, 10, 48, 57, 0 };
		
		array s8 _ruby1_single_lengths( 0, 1 ) = { 0, 0, 0, 1, 0, 0 };
		
		array s8 _ruby1_range_lengths( 0, 2 ) = { 0, 1, 2, 1, 0, 0 };
		
		array s8 _ruby1_index_offsets( 0, 8 ) = { 0, 0, 2, 5, 8, 0 };
		
		array s8 _ruby1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
		
		array s8 _ruby1_trans_offsets( 0, 8 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 0 };
		
		array s8 _ruby1_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
		
		array s8 _ruby1_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _ruby1_cond_targs( 0, 4 ) = { 2, 0, 3, 2, 0, 4, 3, 0, 0, 0 };
		
		array s8 _ruby1_cond_actions( 0, 1 ) = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
		
		array s8 _ruby1_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _ruby1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };
		
		array s8 _ruby1_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _ruby1_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int ruby1_start = 1;
		value int ruby1_first_final = 4;
		value int ruby1_error = 0;
		
		value int ruby1_en_main = 1;
		
		host( "working/ruby1.rl", 28 ) @{
			
			# %%{
				g = 1
				h = /%%\{\}/;
				
				def run_machine( data )
				p = 0;
				pe = data.length
				cs = 0
				
			}@
			{
				cs = cast(int)ruby1_start;
			}
			host( "working/ruby1.rl", 39 ) @{
			}@
			{
				int _klen;
				uint _trans = 0;
				uint _cond = 0;
				uint _have = 0;
				uint _cont = 1;
				index s8 _acts;
				uint _nacts;
				index char _keys;
				index s8 _ckeys;
				int _cpc;
				while ( _cont == 1 ) {
					
					if ( cs == 0 )
					_cont = 0;
					_have = 0;
					if ( p == pe ) {
						if ( _have == 0 )
						_cont = 0;
					}
					if ( _cont == 1 ) {
						if ( _have == 0 ) {
							_keys = offset( _ruby1_trans_keys, _ruby1_key_offsets[cs] );
							_trans = cast(uint)_ruby1_index_offsets[cs];
							_have = 0;
							
							_klen = cast(int)_ruby1_single_lengths[cs];
							if ( _klen > 0 ) {
								index char _lower;
								index char _mid;
								index char _upper;
								_lower = _keys;
								_upper = _keys + _klen - 1;
								while ( _upper >= _lower && _have == 0 ) {
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( ( deref( data, p )) < deref( _ruby1_trans_keys, _mid ) )
									_upper = _mid - 1;
									else if ( ( deref( data, p )) > deref( _ruby1_trans_keys, _mid ) )
									_lower = _mid + 1;
									else {
										_trans += cast(uint)(_mid - _keys);
										_have = 1;
									}
								}
								if ( _have == 0 ) {
									_keys += _klen;
									_trans += cast(uint)_klen;
								}
							}
							
							if ( _have == 0 ) {
								_klen = cast(int)_ruby1_range_lengths[cs];
								if ( _klen > 0 ) {
									index char _lower;
									index char _mid;
									index char _upper;
									_lower = _keys;
									_upper = _keys + (_klen<<1) - 2;
									while ( _have == 0 && _lower <= _upper ) {
										_mid = _lower + (((_upper-_lower) >> 1) & ~1);
										if ( ( deref( data, p )) < deref( _ruby1_trans_keys, _mid ) )
										_upper = _mid - 2;
										else if ( ( deref( data, p )) > deref( _ruby1_trans_keys, _mid + 1 ) )
										_lower = _mid + 2;
										else {
											_trans += cast(uint)((_mid - _keys)>>1);
											_have = 1;
										}
									}
									if ( _have == 0 )
									_trans += cast(uint)_klen;
								}
							}
							
							_ckeys = offset( _ruby1_cond_keys, _ruby1_trans_offsets[_trans] );
							_klen = cast(int)_ruby1_trans_lengths[_trans];
							_cond = cast(uint)_ruby1_trans_offsets[_trans];
							_have = 0;
							
							_cpc = 0;
							{
								index s8 _lower;
								index s8 _mid;
								index s8 _upper;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper ) {
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( _cpc < cast(int)deref( _ruby1_cond_keys, _mid ) )
									_upper = _mid - 1;
									else if ( _cpc > cast(int)deref( _ruby1_cond_keys, _mid ) )
									_lower = _mid + 1;
									else {
										_cond += cast(uint)(_mid - _ckeys);
										_have = 1;
									}
								}
								if ( _have == 0 ) {
									cs = 0;
									_cont = 0;
								}
							}
						}
						if ( _cont == 1 ) {
							cs = cast(int)_ruby1_cond_targs[_cond];
							
							if ( _ruby1_cond_actions[_cond] != 0 ) {
								_acts = offset( _ruby1_actions, _ruby1_cond_actions[_cond] );
								_nacts = cast(uint)deref( _ruby1_actions, _acts );
								_acts += 1;
								while ( _nacts > 0 )
								{
									switch ( deref( _ruby1_actions, _acts ) )
									{
										case 0 {
											host( "working/ruby1.rl", 14 ) ${
												
												# }
											c = 1
											d = /\}/
										puts "NL"
									}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}
			}
		}
	}
	host( "working/ruby1.rl", 40 ) @{
		if  cs >= ruby1_first_final
		puts "ACCEPT"
		else
		puts "FAIL"
		end
		end
		
		inp = [
		"abc1231\n",
		]
		
		inp.each { |str| run_machine(str) }
		
	}@