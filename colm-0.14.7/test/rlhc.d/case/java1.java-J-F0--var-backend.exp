class java1
{


	private static byte  _java1_actions [] = { 0, 1, 0, 0 ,  };
	private static char  _java1_trans_keys [] = { 1, 0, 4, 11, 10, 10, 6, 6, 3, 3, 8, 8, 2, 2, 0, 0, 4, 11, 9, 9, 12, 12, 10, 10, 0, 0, 8, 8, 3, 3, 13, 13, 9, 9, 3, 3, 7, 7, 7, 7, 9, 9, 5, 5, 3, 3, 10, 10, 3, 3, 9, 9, 8, 8, 3, 3, 0, 0, 11, 11, 13, 13, 9, 9, 0, 0, 4, 4, 9, 9, 12, 12, 10, 10, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,  };
	private static byte  _java1_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 1, 5, 6, 1, 1, 7, 1, 8, 9, 1, 1, 10, 1, 11, 12, 1, 13, 0 ,  };
	private static byte  _java1_index_offsets [] = { 0, 0, 8, 9, 10, 11, 12, 13, 14, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 51, 51, 51, 0 ,  };
	private static byte  _java1_indices [] = { 0, 2, 1, 1, 1, 1, 1, 3, 4, 5, 6, 7, 8, 9, 10, 1, 1, 1, 1, 11, 1, 12, 13, 14, 15, 16, 17, 15, 18, 15, 19, 20, 21, 8, 22, 23, 24, 8, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 0 ,  };
	private static byte  _java1_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _java1_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _java1_cond_targs [] = { 2, 0, 17, 21, 3, 4, 5, 6, 7, 8, 9, 13, 15, 10, 11, 12, 38, 14, 16, 18, 19, 20, 22, 23, 24, 26, 27, 28, 39, 30, 31, 32, 40, 34, 35, 36, 37, 41, 0 ,  };
	private static byte  _java1_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _java1_nfa_targs [] = { 0, 0 ,  };
	private static byte  _java1_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _java1_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _java1_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  java1_start  = 1;
	private static int  java1_first_final  = 38;
	private static int  java1_error  = 0;
	private static int  java1_en_one  = 25;
	private static int  java1_en_two  = 29;
	private static int  java1_en_four  = 33;
	private static int  java1_en_main  = 1;
	static void test( char data[] )
	{
		int cs, p = 0, pe = data.length;
		int top;
		
		{
			cs = (int)java1_start;
			
		}
		{
			int _trans = 0;
			int _have = 0;
			int _cont = 1;
			int _acts;
			int _nacts;
			int _keys;
			int _inds;
			while ( _cont == 1  )
			{
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = (cs<<1) ;
						_inds = _java1_index_offsets[cs] ;
						if ( ( data[p ]) <= 119 && ( data[p ]) >= 10  )
						{
							int _ic = (int)_java1_char_class[(int)( data[p ]) - 10];
							if ( _ic <= (int)_java1_trans_keys[_keys+1 ]&& _ic >= (int)_java1_trans_keys[_keys ] )
							_trans = (int )_java1_indices[_inds + (int)( _ic - (int)_java1_trans_keys[_keys ])  ];
							
							else
							_trans = (int )_java1_index_defaults[cs];
							
							
						}
						
						else
						{
							_trans = (int )_java1_index_defaults[cs];
							
						}
						
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_java1_cond_targs[_trans];
						if ( _java1_cond_actions[_trans] != 0  )
						{
							_acts = _java1_cond_actions[_trans] ;
							_nacts = (int )_java1_actions[_acts ];
							_acts += 1;
							while ( _nacts > 0  )
							{
								switch ( _java1_actions[_acts ] ) {
									case 0 :
									{
										int s = 25; {
											cs = (s);
											
										}
										char c = (( data[p ]));
									}
									
									break;
									
								}
								_nacts -= 1;
								_acts += 1;
								
							}
							
							
						}
						
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
		if ( cs >= java1_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	public static void main( String args[] )
	{
		test( "hello\none\n".toCharArray() );
		test( "there\ntwo\n".toCharArray() );
		test( "friend\nfour\n".toCharArray() );
	}
}

