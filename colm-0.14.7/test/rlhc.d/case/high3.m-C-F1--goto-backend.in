host( "working/high3.rl", 1 ) @{/*
	* @@LANG: obj-c
	*/
	
	/**
	* Test a high character to make sure signedness 
	* isn't messing us up.
	*/
	
	#include <stdio.h>
	#include <objc/Object.h>
	#include <Foundation/Foundation.h>
	
	@@interface Fsm : NSObject
	{
		@@public
		int cs;
	};
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	- (int) initFsm;
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	- (void) executeWithData:(const unsigned char *)data len:(int)len;
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	- (int) finish;
	
	@@end
	
	@@implementation Fsm
	
	
	
}@
array unsigned char _Fsm_trans_keys( 0, 2 ) = { u(1), u(0), u(2), u(2), u(0), u(0), u(1), u(0), u(0) };

array s8 _Fsm_char_class( 0, 2 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0 };

array s8 _Fsm_index_offsets( 0, 2 ) = { 0, 0, 1, 2, 0 };

array s8 _Fsm_indices( 0, 2 ) = { 0, 2, 0 };

array s8 _Fsm_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 0 };

array s8 _Fsm_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, 0 };

array s8 _Fsm_cond_targs( 0, 3 ) = { 2, 0, 3, 0 };

array s8 _Fsm_cond_actions( 0, 1 ) = { 1, 0, 0, 0 };

array s8 _Fsm_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Fsm_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _Fsm_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Fsm_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int Fsm_start = 1;
value int Fsm_first_final = 3;
value int Fsm_error = 0;

value int Fsm_en_main = 1;

host( "working/high3.rl", 55 ) @{
	
	- (int) initFsm;
	{
	}@
	{
		cs = cast(int)Fsm_start;
	}
	host( "working/high3.rl", 59 ) @{
		return 1;
	}
	
	- (void) executeWithData:(const unsigned char *)_data len:(int)_len;
	{
		const unsigned char *p = _data;
		const unsigned char *pe = _data + _len;
	}@
	{
		int _trans = 0;
		index unsigned char _keys;
		index s8 _inds;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				_keys = offset( _Fsm_trans_keys, (cs<<1) );
				_inds = offset( _Fsm_indices, _Fsm_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 232 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_Fsm_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _Fsm_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _Fsm_trans_keys, _keys ) )
					_trans = cast(int)deref( _Fsm_indices, _inds + cast(int)( _ic - cast(int)deref( _Fsm_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_Fsm_index_defaults[cs];
				}
				else {
					_trans = cast(int)_Fsm_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_Fsm_cond_targs[_trans];
				
				if ( _Fsm_cond_actions[_trans] == 0 )
				goto _again;
				
				switch ( _Fsm_cond_actions[_trans] ) {
					case 1 {
						host( "working/high3.rl", 47 ) ${
							printf("yes\n");
						}$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
	}
	host( "working/high3.rl", 67 ) @{
	}
	
	- (int) finish;
	{
		if ( cs == Fsm_error )
		return -1;
		else if ( cs >= Fsm_first_final )
		return 1;
		return 0;
	}
	
	
	@@end
	
	
	#define BUFSIZE 2048
	
	Fsm *fsm;
	unsigned char buf[BUFSIZE];
	
	void test( unsigned char *buf, int len )
	{
		fsm = [[Fsm alloc] init];
		[fsm initFsm];
		[fsm executeWithData:buf len:len];
		if ( [fsm finish] > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	unsigned char data1[] = { 0xe8, 10 };
	unsigned char data2[] = { 0xf8, 10 };
	
	int main()
	{
		test( data1, 2 );
		test( data2, 2 );
		return 0;
	}
	
}@