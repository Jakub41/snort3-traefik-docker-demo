const _foo_trans_keys = UInt8[1, 0, 2, 2, 2, 2, 2, 2, 3, 4, 3, 4, 3, 4, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 1, 0, 0 , ]
const _foo_char_class = Int8[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 0 , ]
const _foo_index_offsets = Int8[0, 0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 , ]
const _foo_indices = Int8[0, 2, 3, 4, 5, 6, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 , ]
const _foo_index_defaults = Int8[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , ]
const _foo_trans_cond_spaces = Int8[-1, -1, -1, -1, -1, 1, -1, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, 0 , ]
const _foo_trans_offsets = Int8[0, 1, 2, 3, 4, 5, 7, 8, 16, 20, 21, 22, 23, 24, 25, 26, 27, 0 , ]
const _foo_cond_targs = Int8[2, 0, 3, 4, 5, 0, 7, 6, 0, 11, 7, 12, 9, 13, 10, 14, 0, 7, 9, 10, 8, 15, 8, 8, 8, 8, 8, 8, 0 , ]
const _foo_cond_actions = Int8[1, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 5, 6, 7, 8, 9, 10, 11, 0 , ]
const _foo_nfa_targs = Int8[0, 0 , ]
const _foo_nfa_offsets = Int8[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , ]
const _foo_nfa_push_actions = Int8[0, 0 , ]
const _foo_nfa_pop_trans = Int8[0, 0 , ]
const foo_start  = 1
const foo_first_final  = 15
const foo_error  = 0
const foo_en_main  = 1
function m( data::AbstractString )
	p = 0
	pe = length(data)
	eof = length(data)
	cs = 0
	buffer = ""
	i = 0;
	j = 0;
	k = 0;
	
	cs = convert(Int, foo_start )
	_cpc= 0
	;
	_trans = 0;
	_have = 0;
	_cont = 1;
	_cond = 0;
	_keys = 0;
	_inds = 0;
	while _cont == 1 
		if cs == 0 
			_cont = 0
			
		end
		_have = 0
		if p == pe 
			if _have == 0 
				_cont = 0
				
			end
			
		end
		if _cont == 1 
			if _have == 0 
				_keys = (cs<<1)
				_inds = _foo_index_offsets[1+(cs)]
				if (data[1+(p )])<= 99 && (data[1+(p )])>= 10 
					_ic = convert(Int, _foo_char_class[1+(convert(Int, (data[1+(p )]) )- 10)] );
					if _ic <= convert(Int, _foo_trans_keys[1+(_keys+1 )] )&& _ic >= convert(Int, _foo_trans_keys[1+(_keys )] )
						_trans = convert(UInt, _foo_indices[1+(_inds + convert(Int, (_ic - convert(Int, _foo_trans_keys[1+(_keys )] )) ))] )
						
					else
						_trans = convert(UInt, _foo_index_defaults[1+(cs)] )
						
					end
					
				else
					_trans = convert(UInt, _foo_index_defaults[1+(cs)] )
					
				end
				_cond = convert(UInt, _foo_trans_offsets[1+(_trans)] )
				_cpc = 0
				if _foo_trans_cond_spaces[1+(_trans)] == 0 
					if (i != 0)
						_cpc += 1
						
					end
					
				elseif _foo_trans_cond_spaces[1+(_trans)] == 1 
					if (j != 0)
						_cpc += 1
						
					end
					
				elseif _foo_trans_cond_spaces[1+(_trans)] == 2 
					if (k != 0)
						_cpc += 1
						
					end
					
				elseif _foo_trans_cond_spaces[1+(_trans)] == 3 
					if (i != 0)
						_cpc += 1
						
					end
					if (j != 0)
						_cpc += 2
						
					end
					
				elseif _foo_trans_cond_spaces[1+(_trans)] == 4 
					if (j != 0)
						_cpc += 1
						
					end
					if (k != 0)
						_cpc += 2
						
					end
					
				elseif _foo_trans_cond_spaces[1+(_trans)] == 5 
					if (i != 0)
						_cpc += 1
						
					end
					if (j != 0)
						_cpc += 2
						
					end
					if (k != 0)
						_cpc += 4
						
					end
					
				end
				_cond += convert(UInt, _cpc )
				
			end
			if _cont == 1 
				cs = convert(Int, _foo_cond_targs[1+(_cond)] )
				if _foo_cond_actions[1+(_cond)] == 8 
					print( "  one\n" );
					
				elseif _foo_cond_actions[1+(_cond)] == 4 
					print( "  two\n" );
					
				elseif _foo_cond_actions[1+(_cond)] == 6 
					print( "  three\n" );
					
				elseif _foo_cond_actions[1+(_cond)] == 1 
					if ( ((data[1+(p )])) == 48 )
						i = 0;
						
					else
						i = 1;
						
					end
					
				elseif _foo_cond_actions[1+(_cond)] == 2 
					if ( ((data[1+(p )])) == 48 )
						j = 0;
						
					else
						j = 1;
						
					end
					
				elseif _foo_cond_actions[1+(_cond)] == 3 
					if ( ((data[1+(p )])) == 48 )
						k = 0;
						
					else
						k = 1;
						
					end
					
				elseif _foo_cond_actions[1+(_cond)] == 5 
					{
						p+= 1
						_cont = 0
						
					}
					
				elseif _foo_cond_actions[1+(_cond)] == 9 
					print( "  one\n" );
					print( "  two\n" );
					
				elseif _foo_cond_actions[1+(_cond)] == 10 
					print( "  one\n" );
					print( "  three\n" );
					
				elseif _foo_cond_actions[1+(_cond)] == 7 
					print( "  two\n" );
					print( "  three\n" );
					
				elseif _foo_cond_actions[1+(_cond)] == 11 
					print( "  one\n" );
					print( "  two\n" );
					print( "  three\n" );
					
				end
				if cs == 0 
					_cont = 0
					
				end
				if _cont == 1 
					p += 1
					
				end
				
			end
			
		end
		
	end
	if ( cs >= foo_first_final )
		println( "ACCEPT" );
	else
		println( "FAIL" );
	end
end

m( "000abc\n" );
m( "100abc\n" );
m( "010abc\n" );
m( "110abc\n" );
m( "001abc\n" );
m( "101abc\n" );
m( "011abc\n" );
m( "111abc\n" );
