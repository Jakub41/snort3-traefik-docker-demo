#include <iostream>
#include <stdio.h>
#include <string.h>

using namespace std;

struct ErrAct 
{
	int cs;
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	int init( );
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	int execute( const char *data, int len );
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	int finish( );
};



static const char  _ErrAct_actions [] = { 0, 1, 0, 1, 1, 1, 2, 0 ,  };
static const char  _ErrAct_key_offsets [] = { 0, 0, 4, 6, 10, 12, 15, 0 ,  };
static const char  _ErrAct_trans_keys [] = { 43, 45, 48, 57, 48, 57, 10, 46, 48, 57, 48, 57, 10, 48, 57, 0 ,  };
static const char  _ErrAct_single_lengths [] = { 0, 2, 0, 2, 0, 1, 0, 0 ,  };
static const char  _ErrAct_range_lengths [] = { 0, 1, 1, 1, 1, 1, 0, 0 ,  };
static const char  _ErrAct_index_offsets [] = { 0, 0, 4, 6, 10, 12, 15, 0 ,  };
static const char  _ErrAct_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _ErrAct_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0 ,  };
static const char  _ErrAct_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _ErrAct_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_cond_targs [] = { 2, 2, 3, 0, 3, 0, 6, 4, 3, 0, 5, 0, 6, 5, 0, 0, 0 ,  };
static const char  _ErrAct_cond_actions [] = { 0, 0, 0, 1, 0, 3, 0, 0, 0, 5, 0, 3, 0, 0, 3, 0, 0 ,  };
static const char  _ErrAct_eof_actions [] = { 0, 1, 3, 5, 3, 3, 0, 0 ,  };
static const char  _ErrAct_nfa_targs [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_nfa_push_actions [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_pop_trans [] = { 0, 0 ,  };
static const int  ErrAct_start  = 1;
static const int  ErrAct_first_final  = 6;
static const int  ErrAct_error  = 0;
static const int  ErrAct_en_main  = 1;
int ErrAct::init( )
{

	{
		cs = ( int ) ErrAct_start;
	}
	return 0;
}

int ErrAct::execute( const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	const char *eof = pe;
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _ErrAct_trans_keys + _ErrAct_key_offsets[cs];
		_trans = ( unsigned int  ) _ErrAct_index_offsets[cs];
		_klen = ( int ) _ErrAct_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _ErrAct_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _ErrAct_cond_keys + _ErrAct_trans_offsets[_trans];
		_klen = ( int ) _ErrAct_trans_lengths[_trans];
		_cond = ( unsigned int  ) _ErrAct_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _ErrAct_cond_targs[_cond];
		if ( _ErrAct_cond_actions[_cond]== 0  )
		goto _again;
		
		
		_acts = _ErrAct_actions + _ErrAct_cond_actions[_cond];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf(" DIGIT PLUS MINUS\n"); 
				}
				
				break;
				case 1 :
				{
					printf(" DIGIT\n"); 
				}
				
				break;
				case 2 :
				{
					printf(" DIGIT DECIMAL\n"); 
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			const char  *__acts;
			unsigned int __nacts;
			__acts = _ErrAct_actions + _ErrAct_eof_actions[cs];
			__nacts = ( unsigned int  ) (*( __acts  ))
			;
			__acts += 1;
			while ( __nacts > 0  )
			{
				switch ( (*( __acts  ))
				) {
					case 0 :
					{
						printf(" DIGIT PLUS MINUS\n"); 
					}
					
					break;
					case 1 :
					{
						printf(" DIGIT\n"); 
					}
					
					break;
					case 2 :
					{
						printf(" DIGIT DECIMAL\n"); 
					}
					
					break;
					
				}
				__nacts -= 1;
				__acts += 1;
			}
			
		}
		
		
		
		_out :
		{}
		
	}
	if ( cs == ErrAct_error )
	return -1;
	if ( cs >= ErrAct_first_final )
	return 1;
	return 0;
}

int ErrAct::finish( )
{
	if ( cs == ErrAct_error )
	return -1;
	if ( cs >= ErrAct_first_final )
	return 1;
	return 0;
}

#define BUFSIZE 1024

void test( const char *buf )
{
	ErrAct errAct;
	errAct.init();
	errAct.execute( buf, strlen(buf) );
	if ( errAct.finish() > 0 )
	cout << "ACCEPT" << endl;
	else
	cout << "FAIL" << endl;
}

int main()
{
	test( "1\n" );
	test( "+1\n" );
	test( "-1\n" );
	test( "1.1\n" );
	test( "+1.1\n" );
	test( "-1.1\n" );
	test( "a\n" );
	test( "-\n" );
	test( "+\n" );
	test( "-a\n" );
	test( "+b\n" );
	test( "1.\n" );
	test( "1d\n" );
	test( "1.d\n" );
	test( "1.1d\n" );
	return 0;
}

