host( "working/scan1_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class scan1_java
	{
		int
		ts ;
		int
		te ;
		int act ;
		int token ;
		
		
		
		
		
	}@
	array s8 _scanner_actions( 0, 13 ) = { 0, 1, 2, 1, 3, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 2, 0, 1, 2, 3, 4, 2, 3, 5, 0 };
	
	array s8 _scanner_key_offsets( 0, 23 ) = { 0, 0, 4, 5, 6, 7, 8, 14, 21, 22, 23, 0 };
	
	array char _scanner_trans_keys( 0, 120 ) = { u(46), u(100), u(48), u(57), u(49), u(120), u(120), u(120), u(46), u(49), u(50), u(100), u(48), u(57), u(10), u(97), u(98), u(99), u(100), u(48), u(57), u(98), u(100), u(46), u(100), u(48), u(57), u(0) };
	
	array s8 _scanner_single_lengths( 0, 5 ) = { 0, 2, 1, 1, 1, 1, 4, 5, 1, 1, 2, 0 };
	
	array s8 _scanner_range_lengths( 0, 1 ) = { 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0 };
	
	array s8 _scanner_index_offsets( 0, 29 ) = { 0, 0, 4, 6, 8, 10, 12, 18, 25, 27, 29, 0 };
	
	array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _scanner_trans_offsets( 0, 39 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 };
	
	array s8 _scanner_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
	
	array s8 _scanner_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _scanner_cond_targs( 0, 10 ) = { 7, 1, 1, 7, 9, 0, 4, 7, 5, 7, 7, 7, 7, 10, 10, 1, 1, 0, 7, 7, 8, 2, 6, 1, 0, 8, 7, 3, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 0 };
	
	array s8 _scanner_cond_actions( 0, 27 ) = { 9, 0, 0, 19, 3, 0, 0, 17, 0, 17, 7, 17, 9, 24, 27, 0, 0, 0, 11, 5, 0, 0, 0, 0, 0, 0, 13, 0, 15, 9, 0, 0, 19, 19, 17, 17, 17, 13, 15, 19, 0 };
	
	array s8 _scanner_to_state_actions( 0, 21 ) = { 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0 };
	
	array s8 _scanner_from_state_actions( 0, 1 ) = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 };
	
	array s8 _scanner_eof_trans_indexed( 0, 15 ) = { 0, 8, 0, 10, 10, 10, 0, 0, 14, 15, 8, 0 };
	
	array s8 _scanner_eof_trans_direct( 0, 40 ) = { 0, 34, 0, 35, 36, 37, 0, 0, 38, 39, 40, 0 };
	
	array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int scanner_start = 7;
	value int scanner_first_final = 7;
	value int scanner_error = 0;
	
	value int scanner_en_main = 7;
	
	host( "working/scan1_java.rl", 75 ) @{
		int cs;
		
		void init()
		{
		}@
		{
			cs = cast(int)scanner_start;
			ts = nil;
			te = nil;
			act = 0;
		}
		host( "working/scan1_java.rl", 80 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			int eof = len;
			String _s;
		}@
		{
			int _klen;
			uint _trans = 0;
			uint _cond = 0;
			index s8 _acts;
			uint _nacts;
			index char _keys;
			index s8 _ckeys;
			int _cpc;
			entry {
				
				if ( p == pe )
				goto _test_eof;
				if ( cs == 0 )
				goto _out;
				label _resume {
					_acts = offset( _scanner_actions, _scanner_from_state_actions[cs] );
					_nacts = cast(uint)deref( _scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _scanner_actions, _acts ) ) {
							case 2 {
								host( "NONE", 1 ) ${${ts = p;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					_keys = offset( _scanner_trans_keys, _scanner_key_offsets[cs] );
					_trans = cast(uint)_scanner_index_offsets[cs];
					
					_klen = cast(int)_scanner_single_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _scanner_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _scanner_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								goto _match;
							}
						}
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
					
					_klen = cast(int)_scanner_range_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _scanner_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _scanner_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								goto _match;
							}
						}
						_trans += cast(uint)_klen;
					}
					
				}
				label _match {
					_ckeys = offset( _scanner_cond_keys, _scanner_trans_offsets[_trans] );
					_klen = cast(int)_scanner_trans_lengths[_trans];
					_cond = cast(uint)_scanner_trans_offsets[_trans];
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _scanner_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _scanner_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								goto _match_cond;
							}
						}
						cs = 0;
						goto _again;
					}
				}
				label _match_cond {
					cs = cast(int)_scanner_cond_targs[_cond];
					
					if ( _scanner_cond_actions[_cond] == 0 )
					goto _again;
					
					_acts = offset( _scanner_actions, _scanner_cond_actions[_cond] );
					_nacts = cast(uint)deref( _scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _scanner_actions, _acts ) )
						{
							case 3 {
								host( "NONE", 1 ) ${${te = p+1;}$}$
							}
							case 4 {
								host( "working/scan1_java.rl", 49 ) ${${act = 4;}$}$
							}
							case 5 {
								host( "working/scan1_java.rl", 57 ) ${${act = 5;}$}$
							}
							case 6 {
								host( "working/scan1_java.rl", 22 ) ${${te = p+1;host( "working/scan1_java.rl", 22 ) ${System.out.print( "on last     " );
											if ( p + 1 == te )
											{
												System.out.print( "yes" );
												
											} 
											System.out.print( "\n" );
										}$}$}$
							}
							case 7 {
								host( "working/scan1_java.rl", 40 ) ${${te = p+1;host( "working/scan1_java.rl", 40 ) ${System.out.print( "on lag      " );
											if ( p + 1 == te )
											{
												System.out.print( "yes" );
												
											} 
											System.out.print( "\n" );
										}$}$}$
							}
							case 8 {
								host( "working/scan1_java.rl", 66 ) ${${te = p+1;}$}$
							}
							case 9 {
								host( "working/scan1_java.rl", 68 ) ${${te = p+1;}$}$
							}
							case 10 {
								host( "working/scan1_java.rl", 31 ) ${${te = p;p = p - 1;host( "working/scan1_java.rl", 31 ) ${System.out.print( "on next     " );
											if ( p + 1 == te )
											{
												System.out.print( "yes" );
												
											} 
											System.out.print( "\n" );
										}$}$}$
							}
							case 11 {
								host( "working/scan1_java.rl", 40 ) ${${te = p;p = p - 1;host( "working/scan1_java.rl", 40 ) ${System.out.print( "on lag      " );
											if ( p + 1 == te )
											{
												System.out.print( "yes" );
												
											} 
											System.out.print( "\n" );
										}$}$}$
							}
							case 12 {
								host( "working/scan1_java.rl", 40 ) ${${p = ((te))-1;
										host( "working/scan1_java.rl", 40 ) ${System.out.print( "on lag      " );
											if ( p + 1 == te )
											{
												System.out.print( "yes" );
												
											} 
											System.out.print( "\n" );
										}$}$}$
							}
							case 13 {
								host( "NONE", 1 ) ${${switch( act ) {
											case 0 {
												host( "NONE", 1 ) ${${cs = 0; goto _again;}$}$ }
											case 4 {
												p = ((te))-1;
												host( "working/scan1_java.rl", 49 ) ${System.out.print( "lm switch1  " );
													if ( p + 1 == te )
													{
														System.out.print( "yes" );
														
													} 
													System.out.print( "\n" );
												}$ }
											case 5 {
												p = ((te))-1;
												host( "working/scan1_java.rl", 57 ) ${System.out.print( "lm switch2  " );
													if ( p + 1 == te )
													{
														System.out.print( "yes" );
														
													} 
													System.out.print( "\n" );
												}$ }
										}}$
								}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					
				}
				label _again {
					_acts = offset( _scanner_actions, _scanner_to_state_actions[cs] );
					_nacts = cast(uint)deref( _scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _scanner_actions, _acts ) ) {
							case 0 {
								host( "NONE", 1 ) ${${ts = nil;}$}$
							}
							case 1 {
								host( "NONE", 1 ) ${${act = 0;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					if ( cs == 0 )
					goto _out;
					p += 1;
					if ( p != pe )
					goto _resume;
				}
				label _test_eof { {}
					if ( p == eof )
					{
						if ( _scanner_eof_trans_direct[cs] > 0 ) {
							_trans = cast(uint)_scanner_eof_trans_direct[cs] - 1;
							_cond = cast(uint)_scanner_trans_offsets[_trans];
							goto _match_cond;
						}
					}
					
				}
				label _out { {}
				}
			}
		}
		host( "working/scan1_java.rl", 92 ) @{
		}
		
		void finish( )
		{
			if ( cs >= scanner_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"abbc1d1d2\n",
		};
		
		static final int inplen = 1;
		
		public static void main (String[] args)
		{
			scan1_java machine = new scan1_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@