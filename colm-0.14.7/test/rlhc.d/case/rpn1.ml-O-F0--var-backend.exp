(*
* @LANG: ocaml
*)

let id x = x
let fail fmt = Printf.ksprintf failwith fmt
let pr fmt = Printf.ksprintf print_endline fmt

let failed fmt = Printf.ksprintf (fun s -> prerr_endline s; exit 1) fmt
let test' show f x y = if f x <> y then failed "FAILED: test %S" (show x)
let case = ref 0
let test f x y = incr case; if f x <> y then failed "FAILED: case %d" !case
let error f x = match try Some (f x) with _ -> None with Some _ -> failed "FAILED: fail %S" x | None -> ()

(*
// -*-go-*-
//
// Reverse Polish Notation Calculator
// Copyright (c) 2010 J.A. Roberts Tunney
// MIT License
//
// To compile:
//
//   ragel -Z -G2 -o rpn.go rpn.rl
//   6g -o rpn.6 rpn.go
//   6l -o rpn rpn.6
//   ./rpn
//
// To show a diagram of your state machine:
//
//   ragel -V -G2 -p -o rpn.dot rpn.rl
//   dot -Tpng -o rpn.png rpn.dot
//   chrome rpn.png
//
*)


let _rpn_actions : int array = [|
0; 1; 0; 1; 1; 1; 2; 1; 3; 1; 4; 1; 5; 1; 6; 1; 7; 0 ; 
|]
let _rpn_trans_keys : int array = [|
1; 0; 0; 0; 0; 6; 8; 9; 8; 10; 7; 7; 0; 0; 0; 0; 9; 9; 0; 0; 0; 7; 0 ; 
|]
let _rpn_char_class : int array = [|
0; 0; 0; 0; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 2; 3; 1; 4; 1; 5; 6; 6; 6; 6; 6; 6; 6; 6; 6; 6; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 7; 8; 1; 9; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 10; 0 ; 
|]
let _rpn_index_offsets : int array = [|
0; 0; 1; 8; 10; 13; 14; 15; 16; 17; 18; 0 ; 
|]
let _rpn_indices : int array = [|
0; 2; 1; 1; 1; 1; 1; 3; 4; 5; 6; 1; 7; 8; 9; 10; 11; 12; 0; 1; 13; 14; 15; 16; 17; 18; 0 ; 
|]
let _rpn_index_defaults : int array = [|
0; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 0 ; 
|]
let _rpn_trans_cond_spaces : int array = [|
-1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; -1; 0 ; 
|]
let _rpn_cond_targs : int array = [|
10; 0; 10; 2; 4; 8; 5; 7; 6; 10; 10; 9; 10; 1; 1; 1; 1; 2; 3; 0 ; 
|]
let _rpn_cond_actions : int array = [|
0; 0; 3; 0; 0; 0; 0; 0; 0; 15; 13; 0; 5; 9; 5; 7; 11; 1; 0; 0 ; 
|]
let _rpn_nfa_targs : int array = [|
0; 0 ; 
|]
let _rpn_nfa_offsets : int array = [|
0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0 ; 
|]
let _rpn_nfa_push_actions : int array = [|
0; 0 ; 
|]
let _rpn_nfa_pop_trans : int array = [|
0; 0 ; 
|]
let rpn_start  : int  = 10
let rpn_first_final  : int  = 10
let rpn_error  : int  = 0
let rpn_en_main  : int  = 10
let fail fmt = Printf.ksprintf failwith fmt

let rpn data =
let (cs, p, pe) = (ref 0, ref 0, ref (String.length data)) in
let mark = ref 0 in
let st = Stack.create () in

begin
	cs  := rpn_start;
	
end;
begin
	let _trans  : int  ref = ref 0 in
	let _have  : int  ref = ref 0 in
	let _cont  : int  ref = ref 1 in
	let _acts : int ref = ref 0 in
	let _nacts : int  ref = ref 0 in
	let _keys : int ref = ref 0 in
	let _inds : int ref = ref 0 in
	while _cont.contents= 1  do
	begin
		if cs.contents= 0  then
		begin
			_cont  := 0;
			
		end
		;_have  := 0;
		if p.contents= pe.contents then
		begin
			begin
				if _have.contents= 0  then
				begin
					_cont  := 0;
					
				end
				;
			end;
			
		end
		;if _cont.contents= 1  then
		begin
			begin
				if _have.contents= 0  then
				begin
					begin
						_keys  := ( cs.contents lsl 1 );
						_inds  := _rpn_index_offsets.(cs.contents);
						if ( Char.code data.[p.contents] )<= 115 && ( Char.code data.[p.contents] )>= 9  then
						begin
							begin
								let _ic  : int  ref = ref _rpn_char_class.(( Char.code data.[p.contents] )- 9) in
								if _ic.contents<= _rpn_trans_keys.( _keys.contents+1  )&& _ic.contents>= _rpn_trans_keys.( _keys.contents ) then
								begin
									_trans  := _rpn_indices.( _inds.contents+ ( _ic.contents- _rpn_trans_keys.( _keys.contents ) ) );
									
								end
								else
								begin
									_trans  := _rpn_index_defaults.(cs.contents);
									
								end
								;
							end;
							
						end
						else
						begin
							begin
								_trans  := _rpn_index_defaults.(cs.contents);
								
							end;
							
						end
						;
					end;
					
				end
				;if _cont.contents= 1  then
				begin
					begin
						cs  := _rpn_cond_targs.(_trans.contents);
						if _rpn_cond_actions.(_trans.contents)!= 0  then
						begin
							begin
								_acts  := _rpn_cond_actions.(_trans.contents);
								_nacts  := _rpn_actions.( _acts.contents );
								_acts  := _acts.contents + 1;
								while _nacts.contents> 0  do
								begin
									if _rpn_actions.( _acts.contents ) = 0  then
									begin
										begin
											mark := !p 
										end;
										
									end
									else if _rpn_actions.( _acts.contents ) = 1  then
									begin
										begin
											Stack.push (int_of_string (String.sub data !mark (!p - !mark))) st 
										end;
										
									end
									else if _rpn_actions.( _acts.contents ) = 2  then
									begin
										begin
											let y = Stack.pop st in let x = Stack.pop st in Stack.push (x + y) st 
										end;
										
									end
									else if _rpn_actions.( _acts.contents ) = 3  then
									begin
										begin
											let y = Stack.pop st in let x = Stack.pop st in Stack.push (x - y) st 
										end;
										
									end
									else if _rpn_actions.( _acts.contents ) = 4  then
									begin
										begin
											let y = Stack.pop st in let x = Stack.pop st in Stack.push (x * y) st 
										end;
										
									end
									else if _rpn_actions.( _acts.contents ) = 5  then
									begin
										begin
											let y = Stack.pop st in let x = Stack.pop st in Stack.push (x / y) st 
										end;
										
									end
									else if _rpn_actions.( _acts.contents ) = 6  then
									begin
										begin
											Stack.push (abs (Stack.pop st)) st 
										end;
										
									end
									else if _rpn_actions.( _acts.contents ) = 7  then
									begin
										begin
											Stack.push 666 st 
										end;
										
									end
									;
									_nacts  := _nacts.contents - 1;
									_acts  := _acts.contents + 1;
									
								end;
								
								done;
								
							end;
							
						end
						;if cs.contents= 0  then
						begin
							_cont  := 0;
							
						end
						;if _cont.contents= 1  then
						begin
							p  := p.contents + 1;
							
						end
						;
					end;
					
				end
				;
			end;
			
		end
		;
	end;
	
	done;
	
end;
if !cs < rpn_first_final then
begin
	if !p = !pe then
	fail "unexpected eof"
	else
	fail "error at position %d" !p
end;

if Stack.is_empty st then
fail "rpn stack empty on result"
else
Stack.pop st

(* ////////////////////////////////////////////////////////////////////// *)

let rpnTests = [
("666\n", 666);
("666 111\n", 111);
("4 3 add\n", 7);
("4 3 +\n", 7);
("4 3 -\n", 1);
("4 3 *\n", 12);
("6 2 /\n", 3);
("0 3 -\n", -3);
("0 3 - abs\n", 3);
(" 2  2 + 3 - \n", 1);
("10 7 3 2 * - +\n", 11);
("abba abba add\n", 1332);
]

let rpnFailTests = [
("\n")
]

let () =
List.iter (fun (s,x) -> test rpn s x) rpnTests;
List.iter (fun s -> error rpn s) rpnFailTests

