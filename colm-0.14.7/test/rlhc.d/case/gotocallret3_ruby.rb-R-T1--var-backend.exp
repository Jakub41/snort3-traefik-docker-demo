#
# @LANG: ruby
# @GENERATED: true
#






class << self
	attr_accessor :_gotocallret_key_offsets 
	private :_gotocallret_key_offsets, :_gotocallret_key_offsets=
end
self._gotocallret_key_offsets = [
0, 0, 1, 2, 3, 4, 8, 10, 14, 14, 18, 0 , 
]

class << self
	attr_accessor :_gotocallret_trans_keys 
	private :_gotocallret_trans_keys, :_gotocallret_trans_keys=
end
self._gotocallret_trans_keys = [
32, 10, 10, 10, 65, 90, 97, 122, 48, 57, 48, 57, 97, 122, 65, 90, 97, 122, 48, 57, 0 , 
]

class << self
	attr_accessor :_gotocallret_single_lengths 
	private :_gotocallret_single_lengths, :_gotocallret_single_lengths=
end
self._gotocallret_single_lengths = [
0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_gotocallret_range_lengths 
	private :_gotocallret_range_lengths, :_gotocallret_range_lengths=
end
self._gotocallret_range_lengths = [
0, 0, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0 , 
]

class << self
	attr_accessor :_gotocallret_index_offsets 
	private :_gotocallret_index_offsets, :_gotocallret_index_offsets=
end
self._gotocallret_index_offsets = [
0, 0, 2, 4, 6, 8, 11, 13, 16, 17, 20, 0 , 
]

class << self
	attr_accessor :_gotocallret_trans_cond_spaces 
	private :_gotocallret_trans_cond_spaces, :_gotocallret_trans_cond_spaces=
end
self._gotocallret_trans_cond_spaces = [
-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 
]

class << self
	attr_accessor :_gotocallret_trans_offsets 
	private :_gotocallret_trans_offsets, :_gotocallret_trans_offsets=
end
self._gotocallret_trans_offsets = [
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 , 
]

class << self
	attr_accessor :_gotocallret_trans_lengths 
	private :_gotocallret_trans_lengths, :_gotocallret_trans_lengths=
end
self._gotocallret_trans_lengths = [
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 , 
]

class << self
	attr_accessor :_gotocallret_cond_keys 
	private :_gotocallret_cond_keys, :_gotocallret_cond_keys=
end
self._gotocallret_cond_keys = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_gotocallret_cond_targs 
	private :_gotocallret_cond_targs, :_gotocallret_cond_targs=
end
self._gotocallret_cond_targs = [
2, 0, 7, 0, 8, 4, 8, 4, 9, 9, 0, 10, 0, 1, 1, 0, 0, 9, 9, 0, 10, 0, 0 , 
]

class << self
	attr_accessor :_gotocallret_cond_actions 
	private :_gotocallret_cond_actions, :_gotocallret_cond_actions=
end
self._gotocallret_cond_actions = [
2, 1, 3, 1, 6, 5, 7, 0, 0, 0, 8, 0, 8, 9, 9, 1, 0, 0, 0, 8, 0, 8, 0 , 
]

class << self
	attr_accessor :_gotocallret_eof_actions 
	private :_gotocallret_eof_actions, :_gotocallret_eof_actions=
end
self._gotocallret_eof_actions = [
0, 1, 1, 4, 4, 8, 8, 0, 4, 0, 0, 0 , 
]

class << self
	attr_accessor :_gotocallret_nfa_targs 
	private :_gotocallret_nfa_targs, :_gotocallret_nfa_targs=
end
self._gotocallret_nfa_targs = [
0, 0 , 
]

class << self
	attr_accessor :_gotocallret_nfa_offsets 
	private :_gotocallret_nfa_offsets, :_gotocallret_nfa_offsets=
end
self._gotocallret_nfa_offsets = [
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 
]

class << self
	attr_accessor :_gotocallret_nfa_push_actions 
	private :_gotocallret_nfa_push_actions, :_gotocallret_nfa_push_actions=
end
self._gotocallret_nfa_push_actions = [
0, 0 , 
]

class << self
	attr_accessor :_gotocallret_nfa_pop_trans 
	private :_gotocallret_nfa_pop_trans, :_gotocallret_nfa_pop_trans=
end
self._gotocallret_nfa_pop_trans = [
0, 0 , 
]

class << self
	attr_accessor :gotocallret_start 
end
self.gotocallret_start  = 7;

class << self
	attr_accessor :gotocallret_first_final 
end
self.gotocallret_first_final  = 7;

class << self
	attr_accessor :gotocallret_error 
end
self.gotocallret_error  = 0;

class << self
	attr_accessor :gotocallret_en_garble_line 
end
self.gotocallret_en_garble_line  = 3;

class << self
	attr_accessor :gotocallret_en_alp_comm 
end
self.gotocallret_en_alp_comm  = 5;

class << self
	attr_accessor :gotocallret_en_dig_comm 
end
self.gotocallret_en_dig_comm  = 6;

class << self
	attr_accessor :gotocallret_en_main 
end
self.gotocallret_en_main  = 7;

def run_machine( data )
	p = 0
	pe = data.length
	eof = data.length
	cs = 0;
	_m = 
	_a = 
	buffer = Array.new
	blen = 0
	comm = 1
	top = 1
	stack = Array.new
	begin
		cs = gotocallret_start;
		top = 0;
		
	end
	begin
		_klen= 0
		;
		_keys = 0;
		_ckeys = 0;
		_cpc= 0
		;
		_trans= 0
		;
		_cond = 0;
		_have = 0;
		_cont = 1;
		while ( _cont == 1  )
			begin
				if ( cs == 0  )
					_cont = 0;
					
				end
				_have = 0;
				if ( p == pe  )
					begin
						if ( p == eof  )
							begin
								if ( _have == 0  )
									begin
										case  _gotocallret_eof_actions[cs]  
										when -2 then
										begin
										end
										when 4  then
										begin
											begin
												print( "error: failed to recover\n" );
												
											end
											
										end
										when 8  then
										begin
											begin
												begin
													p = p - 1;
													
												end
												begin
													top-= 1;
													cs = stack[top];
													
												end
												
											end
											
										end
										when 1  then
										begin
											begin
												begin
													p = p - 1;
													
												end
												begin
													cs = 3;
													
												end
												
											end
											
											
										end
									end
									
								end
								
							end
							
						end
						
					end
					if ( _have == 0  )
						_cont = 0;
						
					end
					
				end
				
			end
			if ( _cont == 1  )
				begin
					if ( _have == 0  )
						begin
							_keys = _gotocallret_key_offsets[cs] ;
							_trans = _gotocallret_index_offsets[cs];
							_have = 0;
							_klen = _gotocallret_single_lengths[cs];
							if ( _klen > 0  )
								begin
									_lower = 0;
									_mid = 0;
									_upper = 0;
									_lower = _keys;
									_upper = _keys + _klen - 1;
									while ( _upper >= _lower && _have == 0  )
										begin
											_mid = _lower + ((_upper-_lower) >> 1);
											if ( ( data[p ].ord) < _gotocallret_trans_keys[_mid ] )
												_upper = _mid - 1;
												
												elsif ( ( data[p ].ord) > _gotocallret_trans_keys[_mid ] )
												_lower = _mid + 1;
												
												else
												begin
													_trans += (_mid - _keys);
													_have = 1;
													
												end
												
											end
											
										end
										
									end
									if ( _have == 0  )
										begin
											_keys += _klen;
											_trans += _klen;
											
										end
										
									end
									
								end
								
							end
							if ( _have == 0  )
								begin
									_klen = _gotocallret_range_lengths[cs];
									if ( _klen > 0  )
										begin
											_lower = 0;
											_mid = 0;
											_upper = 0;
											_lower = _keys;
											_upper = _keys + (_klen<<1) - 2;
											while ( _have == 0 && _lower <= _upper  )
												begin
													_mid = _lower + (((_upper-_lower) >> 1) & ~1);
													if ( ( data[p ].ord) < _gotocallret_trans_keys[_mid ] )
														_upper = _mid - 2;
														
														elsif ( ( data[p ].ord) > _gotocallret_trans_keys[_mid + 1 ] )
														_lower = _mid + 2;
														
														else
														begin
															_trans += ((_mid - _keys)>>1);
															_have = 1;
															
														end
														
													end
													
												end
												
											end
											if ( _have == 0  )
												_trans += _klen;
												
											end
											
										end
										
									end
									
								end
								
							end
							_ckeys = _gotocallret_trans_offsets[_trans] ;
							_klen = _gotocallret_trans_lengths[_trans];
							_cond = _gotocallret_trans_offsets[_trans];
							_have = 0;
							_cpc = 0;
							begin
								_lower = 0;
								_mid = 0;
								_upper = 0;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper  )
									begin
										_mid = _lower + ((_upper-_lower) >> 1);
										if ( _cpc < _gotocallret_cond_keys[_mid ] )
											_upper = _mid - 1;
											
											elsif ( _cpc > _gotocallret_cond_keys[_mid ] )
											_lower = _mid + 1;
											
											else
											begin
												_cond += (_mid - _ckeys);
												_have = 1;
												
											end
											
										end
										
									end
									
								end
								if ( _have == 0  )
									begin
										cs = 0;
										_cont = 0;
										
									end
									
								end
								
							end
							
						end
						
					end
					if ( _cont == 1  )
						begin
							cs = _gotocallret_cond_targs[_cond];
							case  _gotocallret_cond_actions[_cond]  
							when -2 then
							begin
							end
							when 5  then
							begin
								begin
									print( "error: garbling line\n" );
									
								end
								
							end
							when 7  then
							begin
								begin
									begin
										cs = 7;
										
									end
									
								end
								
							end
							when 8  then
							begin
								begin
									begin
										p = p - 1;
										
									end
									begin
										top-= 1;
										cs = stack[top];
										
									end
									
								end
								
							end
							when 9  then
							begin
								begin
									comm = ( data[p ].ord);
									
								end
								
							end
							when 3  then
							begin
								begin
									print( "correct command\n" );
									
								end
								
							end
							when 1  then
							begin
								begin
									begin
										p = p - 1;
										
									end
									begin
										cs = 3;
										
									end
									
								end
								
							end
							when 6  then
							begin
								begin
									print( "error: garbling line\n" );
									
								end
								begin
									begin
										cs = 7;
										
									end
									
								end
								
							end
							when 2  then
							begin
								begin
									if ( comm >= 97 )
										begin
											stack[top] = cs;
											top += 1;
											cs = 5;
											
										end
										else 
										begin
											stack[top] = cs;
											top += 1;
											cs = 6;
											
										end
									end
									
								end
								begin
									print( "prints\n" );
									
								end
								
								
							end
						end
						if ( cs == 0  )
							_cont = 0;
							
						end
						if ( _cont == 1  )
							p += 1;
							
						end
						
					end
					
				end
				
			end
			
		end
		
	end
	
end

end
if 	cs >= gotocallret_first_final
	puts "ACCEPT"
	else
	puts "FAIL"
end
end
	
	inp = [
	"lkajsdf\n",
	"2134\n",
	"(\n",
	"\n",
	"*234234()0909 092 -234aslkf09`1 11\n",
	"1\n",
	"909\n",
	"1 a\n",
	"11 1\n",
	"a 1\n",
	"aa a\n",
	"1 1\n",
	"1 123456\n",
	"a a\n",
	"a abcdef\n",
	"h",
	"a aa1",
	]
	
	inplen = 17
	
	inp.each { |str| run_machine(str) }
	
