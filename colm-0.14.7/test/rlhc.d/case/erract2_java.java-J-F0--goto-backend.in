host( "working/erract2_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class erract2_java
	{
		
		
		
		
		
		
		
	}@
	array s8 _erract_actions( 0, 7 ) = { 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0 };
	
	array char _erract_trans_keys( 0, 5 ) = { u(1), u(0), u(3), u(3), u(2), u(2), u(4), u(4), u(4), u(4), u(5), u(5), u(0), u(0), u(1), u(0), u(0) };
	
	array s8 _erract_char_class( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 };
	
	array s8 _erract_index_offsets( 0, 6 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 0 };
	
	array s8 _erract_indices( 0, 8 ) = { 1, 3, 4, 5, 6, 8, 0 };
	
	array s8 _erract_index_defaults( 0, 9 ) = { 0, 0, 2, 2, 2, 2, 7, 9, 0 };
	
	array s8 _erract_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _erract_cond_targs( 0, 7 ) = { 0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0 };
	
	array s8 _erract_cond_actions( 0, 7 ) = { 1, 0, 4, 0, 0, 0, 0, 7, 0, 0, 0 };
	
	array s8 _erract_eof_actions( 0, 20 ) = { 0, 10, 15, 15, 15, 15, 20, 0, 0 };
	
	array s8 _erract_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _erract_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _erract_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _erract_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int erract_start = 1;
	value int erract_first_final = 7;
	value int erract_error = 0;
	
	value int erract_en_main = 1;
	
	host( "working/erract2_java.rl", 42 ) @{
		int cs;
		
		void init()
		{
		}@
		{
			cs = cast(int)erract_start;
		}
		host( "working/erract2_java.rl", 47 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			int eof = len;
			String _s;
		}@
		{
			int _trans = 0;
			index s8 _acts;
			uint _nacts;
			index char _keys;
			index s8 _inds;
			entry {
				
				if ( p == pe )
				goto _test_eof;
				if ( cs == 0 )
				goto _out;
				label _resume {
					_keys = offset( _erract_trans_keys, (cs<<1) );
					_inds = offset( _erract_indices, _erract_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 111 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_erract_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _erract_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _erract_trans_keys, _keys ) )
						_trans = cast(int)deref( _erract_indices, _inds + cast(int)( _ic - cast(int)deref( _erract_trans_keys, _keys ) )  ); 
						else
						_trans = cast(int)_erract_index_defaults[cs];
					}
					else {
						_trans = cast(int)_erract_index_defaults[cs];
					}
					
					goto _match_cond;
				}
				label _match_cond {
					cs = cast(int)_erract_cond_targs[_trans];
					
					if ( _erract_cond_actions[_trans] == 0 )
					goto _again;
					
					_acts = offset( _erract_actions, _erract_cond_actions[_trans] );
					_nacts = cast(uint)deref( _erract_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _erract_actions, _acts ) )
						{
							case 0 {
								host( "working/erract2_java.rl", 15 ) ${System.out.print( "err_start\n" );
								}$
							}
							case 1 {
								host( "working/erract2_java.rl", 17 ) ${System.out.print( "err_all\n" );
								}$
							}
							case 2 {
								host( "working/erract2_java.rl", 19 ) ${System.out.print( "err_middle\n" );
								}$
							}
							case 3 {
								host( "working/erract2_java.rl", 21 ) ${System.out.print( "err_out\n" );
								}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					
				}
				label _again {
					if ( cs == 0 )
					goto _out;
					p += 1;
					if ( p != pe )
					goto _resume;
				}
				label _test_eof { {}
					if ( p == eof )
					{
						index s8 __acts;
						uint __nacts;
						__acts = offset( _erract_actions, _erract_eof_actions[cs] );
						__nacts = cast(uint)deref( _erract_actions, __acts ); __acts += 1;
						while ( __nacts > 0 ) {
							switch ( deref( _erract_actions, __acts ) ) {
								case 0 {
									host( "working/erract2_java.rl", 15 ) ${System.out.print( "err_start\n" );
									}$
								}
								case 1 {
									host( "working/erract2_java.rl", 17 ) ${System.out.print( "err_all\n" );
									}$
								}
								case 2 {
									host( "working/erract2_java.rl", 19 ) ${System.out.print( "err_middle\n" );
									}$
								}
								case 3 {
									host( "working/erract2_java.rl", 21 ) ${System.out.print( "err_out\n" );
									}$
								}
								case 4 {
									host( "working/erract2_java.rl", 24 ) ${System.out.print( "eof_start\n" );
									}$
								}
								case 5 {
									host( "working/erract2_java.rl", 26 ) ${System.out.print( "eof_all\n" );
									}$
								}
								case 6 {
									host( "working/erract2_java.rl", 28 ) ${System.out.print( "eof_middle\n" );
									}$
								}
								case 7 {
									host( "working/erract2_java.rl", 30 ) ${System.out.print( "eof_out\n" );
									}$
								}
							}
							__nacts -= 1;
							__acts += 1;
						}
					}
					
				}
				label _out { {}
				}
			}
		}
		host( "working/erract2_java.rl", 59 ) @{
		}
		
		void finish( )
		{
			if ( cs >= erract_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"",
			"h",
			"x",
			"he",
			"hx",
			"hel",
			"hex",
			"hell",
			"helx",
			"hello",
			"hellx",
			"hello\n",
			"hellox",
		};
		
		static final int inplen = 13;
		
		public static void main (String[] args)
		{
			erract2_java machine = new erract2_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@