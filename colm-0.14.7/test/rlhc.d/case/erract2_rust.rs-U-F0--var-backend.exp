static _erract_actions: [i8 ; 27] = [ 0, 2, 0, 1, 2, 1, 2, 2, 1, 3, 4, 0, 4, 1, 5, 4, 1, 2, 5, 6, 4, 1, 3, 5, 7, 0 , 0 ];
static _erract_trans_keys: [u8 ; 18] = [ 1, 0, 3, 3, 2, 2, 4, 4, 4, 4, 5, 5, 0, 0, 1, 0, 0 , 0 ];
static _erract_char_class: [i8 ; 104] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 , 0 ];
static _erract_index_offsets: [i8 ; 10] = [ 0, 0, 1, 2, 3, 4, 5, 6, 0 , 0 ];
static _erract_indices: [i8 ; 8] = [ 1, 3, 4, 5, 6, 8, 0 , 0 ];
static _erract_index_defaults: [i8 ; 10] = [ 0, 0, 2, 2, 2, 2, 7, 9, 0 , 0 ];
static _erract_trans_cond_spaces: [i8 ; 12] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _erract_cond_targs: [i8 ; 12] = [ 0, 2, 0, 3, 4, 5, 6, 0, 7, 0, 0 , 0 ];
static _erract_cond_actions: [i8 ; 12] = [ 1, 0, 4, 0, 0, 0, 0, 7, 0, 0, 0 , 0 ];
static _erract_eof_actions: [i8 ; 10] = [ 0, 10, 15, 15, 15, 15, 20, 0, 0 , 0 ];
static _erract_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _erract_nfa_offsets: [i8 ; 10] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _erract_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _erract_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static erract_start : i32 = 1;
static erract_first_final : i32 = 7;
static erract_error : i32 = 0;
static erract_en_main : i32 = 1;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( erract_start ) as i32;
	}
	
	{
		let mut _trans  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _acts :i32 = 0;
		let mut _nacts = 0;
		let mut _keys :i32 = 0;
		let mut _inds :i32 = 0;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( p == eof  ) {
						{
							if ( _have == 0  ) {
								{
									let mut __acts :i32 = 0;
									let mut __nacts = 0;
									__acts = ( _erract_eof_actions[(cs) as usize] ) as i32;
									__nacts = ( _erract_actions[(__acts ) as usize]
									) as u32;
									__acts += 1;
									while ( __nacts > 0  )
									{
										match ( _erract_actions[(__acts ) as usize]
										) {
											0  => {
												{print!( "{}", "err_start\n" );
												}
												
											}
											1  => {
												{print!( "{}", "err_all\n" );
												}
												
											}
											2  => {
												{print!( "{}", "err_middle\n" );
												}
												
											}
											3  => {
												{print!( "{}", "err_out\n" );
												}
												
											}
											4  => {
												{print!( "{}", "eof_start\n" );
												}
												
											}
											5  => {
												{print!( "{}", "eof_all\n" );
												}
												
											}
											6  => {
												{print!( "{}", "eof_middle\n" );
												}
												
											}
											7  => {
												{print!( "{}", "eof_out\n" );
												}
												
											}
											
											_ => {}
										}
										__nacts -= 1;
										__acts += 1;
									}
									
								}
								
							}
						}
						
						
					}
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_keys = ( (cs<<1)  ) as i32;
							_inds = ( _erract_index_offsets[(cs) as usize] ) as i32;
							if ( ( data[(p ) as usize]
							) <= 111 && ( data[(p ) as usize]
							) >= 10  ) {
								{
									let mut _ic  = ( _erract_char_class[(( ( data[(p ) as usize]
									)  ) as i32- 10) as usize] ) as i32;
									if ( _ic <= ( _erract_trans_keys[(_keys+1 ) as usize]
									) as i32&& _ic >= ( _erract_trans_keys[(_keys ) as usize]
									) as i32 ) {
										_trans = ( _erract_indices[(_inds + ( ( _ic - ( _erract_trans_keys[(_keys ) as usize]
										) as i32)   ) as i32) as usize]
										) as u32;
										
									}
									else {
										_trans = ( _erract_index_defaults[(cs) as usize] ) as u32;
										
									}
								}
								
							}
							else {
								{
									_trans = ( _erract_index_defaults[(cs) as usize] ) as u32;
								}
								
								
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _erract_cond_targs[(_trans) as usize] ) as i32;
							if ( _erract_cond_actions[(_trans) as usize]!= 0  ) {
								{
									_acts = ( _erract_cond_actions[(_trans) as usize] ) as i32;
									_nacts = ( _erract_actions[(_acts ) as usize]
									) as u32;
									_acts += 1;
									while ( _nacts > 0  )
									{
										match ( _erract_actions[(_acts ) as usize]
										) {
											0  => {
												{print!( "{}", "err_start\n" );
												}
												
											}
											1  => {
												{print!( "{}", "err_all\n" );
												}
												
											}
											2  => {
												{print!( "{}", "err_middle\n" );
												}
												
											}
											3  => {
												{print!( "{}", "err_out\n" );
												}
												
											}
											
											_ => {}
										}
										_nacts -= 1;
										_acts += 1;
									}
									
								}
								
								
							}
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= erract_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "".to_string() ); }
	unsafe { m( "h".to_string() ); }
	unsafe { m( "x".to_string() ); }
	unsafe { m( "he".to_string() ); }
	unsafe { m( "hx".to_string() ); }
	unsafe { m( "hel".to_string() ); }
	unsafe { m( "hex".to_string() ); }
	unsafe { m( "hell".to_string() ); }
	unsafe { m( "helx".to_string() ); }
	unsafe { m( "hello".to_string() ); }
	unsafe { m( "hellx".to_string() ); }
	unsafe { m( "hello\n".to_string() ); }
	unsafe { m( "hellox".to_string() ); }
}

