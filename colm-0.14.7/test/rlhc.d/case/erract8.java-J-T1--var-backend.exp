class erract8
{


	private static byte  _erract8_key_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 0 ,  };
	private static char  _erract8_trans_keys [] = { 104, 101, 88, 88, 88, 0,  };
	private static byte  _erract8_single_lengths [] = { 0, 1, 1, 1, 1, 1, 0, 0 ,  };
	private static byte  _erract8_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _erract8_index_offsets [] = { 0, 0, 2, 4, 6, 8, 10, 0 ,  };
	private static byte  _erract8_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _erract8_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0 ,  };
	private static byte  _erract8_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _erract8_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _erract8_cond_targs [] = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 0, 0 ,  };
	private static byte  _erract8_cond_actions [] = { 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 2, 0 ,  };
	private static byte  _erract8_to_state_actions [] = { 0, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _erract8_eof_actions [] = { 0, 2, 2, 2, 2, 2, 0, 0 ,  };
	private static byte  _erract8_nfa_targs [] = { 0, 0 ,  };
	private static byte  _erract8_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _erract8_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _erract8_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  erract8_start  = 1;
	private static int  erract8_first_final  = 6;
	private static int  erract8_error  = 0;
	private static int  erract8_en_main  = 1;
	static void test( char data[] )
	{
		int cs, p = 0, pe = data.length;
		int eof = pe;
		int top;
		
		{
			cs = (int)erract8_start;
			
		}
		{
			int _klen;
			int _keys;
			int _ckeys;
			int _cpc;
			int _trans;
			int _cond = 0;
			int _have = 0;
			int _cont = 1;
			while ( _cont == 1  )
			{
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( p == eof  )
					{
						if ( _have == 0  )
						{
							switch ( _erract8_eof_actions[cs]  ) {
								case 2 :
								{
									System.out.println("err: " + data[p]); 
								}
								
								break;
								
							}
							
						}
						
						
					}
					
					if ( _have == 0  )
					_cont = 0;
					
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_keys = _erract8_key_offsets[cs] ;
						_trans = (int )_erract8_index_offsets[cs];
						_have = 0;
						_klen = (int)_erract8_single_lengths[cs];
						if ( _klen > 0  )
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( data[p ]) < _erract8_trans_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( ( data[p ]) > _erract8_trans_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_trans += (int )(_mid - _keys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								_keys += _klen;
								_trans += (int )_klen;
								
							}
							
							
						}
						
						if ( _have == 0  )
						{
							_klen = (int)_erract8_range_lengths[cs];
							if ( _klen > 0  )
							{
								int _lower;
								int _mid;
								int _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( data[p ]) < _erract8_trans_keys[_mid ] )
									_upper = _mid - 2;
									
									else if ( ( data[p ]) > _erract8_trans_keys[_mid + 1 ] )
									_lower = _mid + 2;
									
									else
									{
										_trans += (int )((_mid - _keys)>>1);
										_have = 1;
										
									}
									
									
								}
								
								if ( _have == 0  )
								_trans += (int )_klen;
								
								
							}
							
							
						}
						
						_ckeys = _erract8_trans_offsets[_trans] ;
						_klen = (int)_erract8_trans_lengths[_trans];
						_cond = (int )_erract8_trans_offsets[_trans];
						_have = 0;
						_cpc = 0;
						{
							int _lower;
							int _mid;
							int _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < (int)_erract8_cond_keys[_mid ] )
								_upper = _mid - 1;
								
								else if ( _cpc > (int)_erract8_cond_keys[_mid ] )
								_lower = _mid + 1;
								
								else
								{
									_cond += (int )(_mid - _ckeys);
									_have = 1;
									
								}
								
								
							}
							
							if ( _have == 0  )
							{
								cs = 0;
								_cont = 0;
								
							}
							
							
						}
						
					}
					
					if ( _cont == 1  )
					{
						cs = (int)_erract8_cond_targs[_cond];
						switch ( _erract8_cond_actions[_cond]  ) {
							case 3 :
							{
								System.out.println("char: " + data[p]); 
							}
							
							break;
							case 2 :
							{
								System.out.println("err: " + data[p]); 
							}
							
							break;
							
						}
						switch ( _erract8_to_state_actions[cs]  ) {
							case 1 :
							{
								System.out.println("to state: " + data[p]); 
							}
							
							break;
							
						}
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
						
					}
					
					
				}
				
				
			}
			
			
		}
		System.out.println("rest: " + data[p] + data[p+1] + data[p+2]);
	}
	
	public static void main( String args[] )
	{
		test( "hello".toCharArray() );
	}
}

