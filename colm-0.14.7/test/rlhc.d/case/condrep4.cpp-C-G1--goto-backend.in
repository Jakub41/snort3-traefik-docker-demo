host( "working/condrep4.rl", 1 ) @{/* 
	* @@LANG: c++
	*/
	
	#include <iostream>
	#include <string.h>
	using std::cout;
	using std::endl;
	
	
	
}@
array s8 _foo_from_state_actions( 0, 1 ) = { 0, 1, 0, 0, 0, 0 };

array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int foo_start = 1;
value int foo_first_final = 4;

value int foo_en_main = 1;

host( "working/condrep4.rl", 25 ) @{
	
	void test( int min, int max, const char *str )
	{
		int cs;
		const char *p = str;
		const char *pe = str + strlen( str ) + 1;
		int c = 0, seen = 0;
		
		cout << "run " << str << " " << min << " " << max << ":";
		
	}@
	{
		cs = cast(int)foo_start;
	}
	host( "working/condrep4.rl", 36 ) @{
	}@
	{
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		switch ( _foo_from_state_actions[cs] ) {
			case 1{
				host( "working/condrep4.rl", 14 ) ${ c = 0; }$
			}
		}
		
		switch ( cs ) {
			case 1:
			if ( ( deref( data, p )) == 46 ) {
				int ck = 0;
				if ( host( "working/condrep4.rl", 16 ) ={ ({ c >= min; }) }= ) ck += 1;
				if ( host( "working/condrep4.rl", 17 ) ={ ({ c < max; }) }= ) ck += 2;
				if ( ck < 2 ) {
					if ( 1 <= ck )
					{			goto ctr2;
					}
				} else if ( ck > 2 ) {
					goto ctr2;
				} else {
					goto ctr0;
				}
				goto ctr1;
				
			}
			{
				int ck = 0;
				if ( host( "working/condrep4.rl", 17 ) ={ ({ c < max; }) }= ) ck += 1;
				if ( 1 <= ck )
				{		goto ctr0;
				}
				goto ctr1;
				
			}
			case 2:
			if ( ( deref( data, p )) == 46 ) {
				int ck = 0;
				if ( host( "working/condrep4.rl", 16 ) ={ ({ c >= min; }) }= ) ck += 1;
				if ( host( "working/condrep4.rl", 17 ) ={ ({ c < max; }) }= ) ck += 2;
				if ( ck < 2 ) {
					if ( 1 <= ck )
					{			goto ctr2;
					}
				} else if ( ck > 2 ) {
					goto ctr2;
				} else {
					goto ctr0;
				}
				goto ctr1;
				
			}
			{
				int ck = 0;
				if ( host( "working/condrep4.rl", 17 ) ={ ({ c < max; }) }= ) ck += 1;
				if ( 1 <= ck )
				{		goto ctr0;
				}
				goto ctr1;
				
			}
			case 3:
			if ( ( deref( data, p )) == 0 ) {
				goto ctr3;
			}
			{
				goto ctr4;
			}
			case 0:
			goto _out;
			case 4:
			{
				goto ctr4;
			}
		}
		
		ctr4: cs = 0; goto _again;
		ctr3: cs = 4; goto _again;
		ctr1: cs = 0; goto _again;
		ctr0: cs = 2; goto f1;
		ctr2: cs = 3; goto _again;
		
		f1:
		host( "working/condrep4.rl", 15 ) ${ c += 1; }$
		goto _again;
		
		_again:
		if ( cs == 0 )
		goto _out;
		p+= 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		_out: {}
	}
	host( "working/condrep4.rl", 37 ) @{
		
		cout << " " << seen;
		
		if ( cs >= foo_first_final )
		cout << " success" << endl;
		else
		cout << " failure" << endl;
	}
	
	int main()
	{
		test( 0, 0, "" );
		test( 0, 1, "" );
		test( 1, 1, "" );
		test( 1, 2, "" );
		test( 2, 2, "" );
		test( 2, 3, "" );
		
		test( 0, 0, "." );
		test( 0, 1, "." );
		test( 1, 1, "." );
		test( 1, 2, "." );
		test( 2, 2, "." );
		test( 2, 3, "." );
		
		test( 0, 0, ".." );
		test( 0, 1, ".." );
		test( 1, 1, ".." );
		test( 1, 2, ".." );
		test( 2, 2, ".." );
		test( 2, 3, ".." );
		
		test( 0, 0, "..." );
		test( 0, 1, "..." );
		test( 1, 1, "..." );
		test( 1, 2, "..." );
		test( 2, 2, "..." );
		test( 2, 3, "..." );
		
		test( 0, 0, "...." );
		test( 0, 1, "...." );
		test( 1, 1, "...." );
		test( 1, 2, "...." );
		test( 2, 2, "...." );
		test( 2, 3, "...." );
		return 0;
	}
	
}@