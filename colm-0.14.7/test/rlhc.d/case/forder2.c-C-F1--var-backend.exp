#include <stdio.h>
#include <string.h>

/*
* After the fact start and ending transitions. Behaves like constructors of
* and destructors in c++.
*/

struct forder
{
	int cs;
};



static const char  _forder_trans_keys [] = { 1, 0, 3, 3, 4, 4, 4, 4, 2, 2, 5, 5, 0, 0, 1, 0, 0 ,  };
static const char  _forder_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 4, 1, 1, 1, 5, 0 ,  };
static const char  _forder_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 6, 0 ,  };
static const char  _forder_indices [] = { 0, 2, 3, 4, 5, 6, 0 ,  };
static const char  _forder_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _forder_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _forder_cond_targs [] = { 2, 0, 3, 4, 5, 6, 7, 0 ,  };
static const char  _forder_cond_actions [] = { 1, 0, 2, 2, 2, 2, 3, 0 ,  };
static const char  _forder_nfa_targs [] = { 0, 0 ,  };
static const char  _forder_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _forder_nfa_push_actions [] = { 0, 0 ,  };
static const char  _forder_nfa_pop_trans [] = { 0, 0 ,  };
static const int  forder_start  = 1;
static const int  forder_first_final  = 7;
static const int  forder_error  = 0;
static const int  forder_en_main  = 1;
void forder_init( struct forder *fsm )
{

	{
		(fsm->cs) = ( int ) forder_start;
	}
}

void forder_execute( struct forder *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	
	
	{
		unsigned int _trans = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_keys;
		const char  *_inds;
		while ( _cont == 1  )
		{
		
			if ( (fsm->cs) == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _forder_trans_keys + ((fsm->cs)<<1);
					_inds = _forder_indices + _forder_index_offsets[(fsm->cs)];
					if ( ((*( p  ))
					)<= 114 && ((*( p  ))
					)>= 10  )
					{
						int _ic = ( int ) _forder_char_class[( int ) ((*( p  ))
						)- 10];
						if ( _ic <= ( int ) (*( _keys+1  ))
						&& _ic >= ( int ) (*( _keys  ))
						)
						_trans = ( unsigned int  ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
						) ))
						;
						
						else
						_trans = ( unsigned int  ) _forder_index_defaults[(fsm->cs)];
						
					}
					
					else
					{
						_trans = ( unsigned int  ) _forder_index_defaults[(fsm->cs)];
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					(fsm->cs) = ( int ) _forder_cond_targs[_trans];
					switch ( _forder_cond_actions[_trans] ) {
						case 2 :
						{
							printf("inside inner\n");
						}
						{
							printf("inside outter\n");
						}
						
						break;
						case 3 :
						{
							printf("leave inner\n");
						}
						{
							printf("leave outter\n");
						}
						
						break;
						case 1 :
						{
							printf("enter outter\n");
						}
						{
							printf("enter inner\n");
						}
						{
							printf("inside inner\n");
						}
						{
							printf("inside outter\n");
						}
						
						break;
						
					}
					if ( (fsm->cs) == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
}

int forder_finish( struct forder *fsm )
{
	if ( fsm->cs == forder_error )
	return -1;
	if ( fsm->cs >= forder_first_final )
	return 1;
	return 0;
}

struct forder fsm;

void test( char *buf )
{
	int len = strlen( buf );
	forder_init( &fsm );
	forder_execute( &fsm, buf, len );
	if ( forder_finish( &fsm ) > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}


int main()
{
	test( "inner\n");
	
	test(
	"inner\n"
	"foobar\n"
	);
	
	test( "" );
	test( "\n" );
	test( "inn\n" );
	
	return 0;
}

