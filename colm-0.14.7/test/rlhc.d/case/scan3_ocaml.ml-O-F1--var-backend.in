host( "working/scan3_ocaml.rl", 1 ) @{(*
	* @@LANG: ocaml
	* @@GENERATED: true
	*)
	
	let ts = ref 0
	let te = ref 0
	let act = ref 0
	let token = ref 0
	
	
	
	
	
	
}@
array int _scanner_trans_keys( 0, 1 ) = { 1, 0, 0, 1, 1, 0, 0 };

array s8 _scanner_char_class( 0, 1 ) = { 0, 1, 0 };

array s8 _scanner_index_offsets( 0, 2 ) = { 0, 0, 2, 0 };

array s8 _scanner_indices( 0, 2 ) = { 0, 2, 0 };

array s8 _scanner_index_defaults( 0, 4 ) = { 0, 1, 4, 0 };

array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, 0 };

array s8 _scanner_cond_targs( 0, 2 ) = { 2, 0, 2, 1, 2, 0 };

array s8 _scanner_cond_actions( 0, 6 ) = { 3, 0, 4, 5, 6, 0 };

array s8 _scanner_to_state_actions( 0, 1 ) = { 0, 1, 0, 0 };

array s8 _scanner_from_state_actions( 0, 2 ) = { 0, 2, 0, 0 };

array s8 _scanner_eof_trans( 0, 4 ) = { 0, 0, 4, 0 };

array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int scanner_start = 1;
value int scanner_first_final = 1;
value int scanner_error = 0;

value int scanner_en_main = 1;

host( "working/scan3_ocaml.rl", 30 ) @{
	
	let exec data = 
	let buffer = String.create(1024) in 
	let blen :int ref = ref 0 in
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
	let eof = pe in
}@
{
	cs = cast(int)scanner_start;
	ts = nil;
	te = nil;
	act = 0;
}
host( "working/scan3_ocaml.rl", 39 ) @{
}@
{
	uint _trans = 0;
	uint _have = 0;
	uint _cont = 1;
	index int _keys;
	index s8 _inds;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( p == eof )
			{
				if ( _scanner_eof_trans[cs] > 0 ) {
					_trans = cast(uint)_scanner_eof_trans[cs] - 1;
					_have = 1;
				}
				if ( _have == 0 ) {
				}
			}
			
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				switch ( _scanner_from_state_actions[cs] ) {
					case 2 {
						host( "NONE", 1 ) ${${ts = p;}$}$
					}
				}
				
				_keys = offset( _scanner_trans_keys, (cs<<1) );
				_inds = offset( _scanner_indices, _scanner_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 98 && ( deref( data, p )) >= 97 )
				{
					int _ic = cast(int)_scanner_char_class[cast(int)( deref( data, p )) - 97];
					if ( _ic <= cast(int)deref( _scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _scanner_trans_keys, _keys ) )
					_trans = cast(uint)deref( _scanner_indices, _inds + cast(int)( _ic - cast(int)deref( _scanner_trans_keys, _keys ) )  ); 
					else
					_trans = cast(uint)_scanner_index_defaults[cs];
				}
				else {
					_trans = cast(uint)_scanner_index_defaults[cs];
				}
				
			}
			if ( _cont == 1 ) {
				cs = cast(int)_scanner_cond_targs[_trans];
				
				switch ( _scanner_cond_actions[_trans] ) {
					case 5 {
						host( "NONE", 1 ) ${${switch( act ) {
									case 1 {
										p = ((te))-1;
										host( "working/scan3_ocaml.rl", 17 ) ${print_string( "pat1\n" );
										}$ }
									case 2 {
										p = ((te))-1;
										host( "working/scan3_ocaml.rl", 19 ) ${print_string( "pat2\n" );
										}$ }
									case 3 {
										p = ((te))-1;
										host( "working/scan3_ocaml.rl", 21 ) ${print_string( "pat3\n" );
										}$ }
								}}$
						}$
					}
					case 3 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
						host( "working/scan3_ocaml.rl", 17 ) ${${act = 1;}$}$
					}
					case 4 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
						host( "working/scan3_ocaml.rl", 19 ) ${${act = 2;}$}$
					}
					case 6 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
						host( "working/scan3_ocaml.rl", 21 ) ${${act = 3;}$}$
					}
				}
				
				switch ( _scanner_to_state_actions[cs] ) {
					case 1 {
						host( "NONE", 1 ) ${${ts = nil;}$}$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/scan3_ocaml.rl", 40 ) @{
	if !cs >= scanner_first_final then
	print_string "ACCEPT\n"
	else
	print_string "FAIL\n"
	;;
	
	let () =
	exec "ab89";
	()
	;;
	
}@