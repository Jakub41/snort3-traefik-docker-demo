host( "working/scan2_crack.rl", 1 ) @{//
	// @@LANG: crack
	// @@GENERATED: true
	//
	
	import crack.io cout;
	import crack.lang Buffer;
	
	int
	ts;
	int
	te;
	int act;
	int token;
	
	
	
	
	
}@
array s8 _scanner_actions( 0, 7 ) = { 0, 1, 0, 1, 1, 1, 5, 1, 6, 1, 7, 2, 2, 3, 2, 2, 4, 0 };

array byte _scanner_trans_keys( 0, 2 ) = { c(0), c(2), c(0), c(1), c(0), c(2), c(0) };

array s8 _scanner_char_class( 0, 2 ) = { 0, 1, 2, 0 };

array s8 _scanner_index_offsets( 0, 5 ) = { 0, 3, 5, 0 };

array s8 _scanner_indices( 0, 5 ) = { 1, 1, 2, 4, 5, 1, 1, 2, 0 };

array s8 _scanner_index_defaults( 0, 3 ) = { 0, 3, 0, 0 };

array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, 0 };

array s8 _scanner_cond_targs( 0, 2 ) = { 1, 0, 1, 1, 2, 2, 0 };

array s8 _scanner_cond_actions( 0, 14 ) = { 9, 0, 5, 7, 11, 14, 0 };

array s8 _scanner_to_state_actions( 0, 1 ) = { 0, 1, 0, 0 };

array s8 _scanner_from_state_actions( 0, 3 ) = { 0, 3, 0, 0 };

array s8 _scanner_eof_trans( 0, 1 ) = { 1, 0, 1, 0 };

array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0 };

array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int scanner_start = 1;
value int scanner_first_final = 1;
value int scanner_error = -1;

value int scanner_en_main = 1;

host( "working/scan2_crack.rl", 36 ) @{
	
	void m( String s )
	{
		byteptr data = s.buffer;
		int p = 0;
		int pe = s.size;
		int cs;
		String buffer;
		int eof = pe;
		
	}@
	{
		cs = cast(int)scanner_start;
		ts = nil;
		te = nil;
		act = 0;
	}
	host( "working/scan2_crack.rl", 47 ) @{
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index byte _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _scanner_eof_trans[cs] > 0 ) {
						_trans = cast(uint)_scanner_eof_trans[cs] - 1;
						_have = 1;
					}
					if ( _have == 0 ) {
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_acts = offset( _scanner_actions, _scanner_from_state_actions[cs] );
					_nacts = cast(uint)deref( _scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _scanner_actions, _acts ) ) {
							case 1 {
								host( "NONE", 1 ) ${${ts = p;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					_keys = offset( _scanner_trans_keys, (cs<<1) );
					_inds = offset( _scanner_indices, _scanner_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 99 && ( deref( data, p )) >= 97 )
					{
						int _ic = cast(int)_scanner_char_class[cast(int)( deref( data, p )) - 97];
						if ( _ic <= cast(int)deref( _scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _scanner_trans_keys, _keys ) )
						_trans = cast(uint)deref( _scanner_indices, _inds + cast(int)( _ic - cast(int)deref( _scanner_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_scanner_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_scanner_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_scanner_cond_targs[_trans];
					
					if ( _scanner_cond_actions[_trans] != 0 ) {
						_acts = offset( _scanner_actions, _scanner_cond_actions[_trans] );
						_nacts = cast(uint)deref( _scanner_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _scanner_actions, _acts ) )
							{
								case 2 {
									host( "NONE", 1 ) ${${te = p+1;}$}$
								}
								case 3 {
									host( "working/scan2_crack.rl", 22 ) ${${act = 1;}$}$
								}
								case 4 {
									host( "working/scan2_crack.rl", 28 ) ${${act = 3;}$}$
								}
								case 5 {
									host( "working/scan2_crack.rl", 25 ) ${${te = p+1;host( "working/scan2_crack.rl", 25 ) ${cout.format( "pat2\n" );
											}$}$}$
								}
								case 6 {
									host( "working/scan2_crack.rl", 28 ) ${${te = p+1;host( "working/scan2_crack.rl", 28 ) ${cout.format( "any\n" );
											}$}$}$
								}
								case 7 {
									host( "NONE", 1 ) ${${switch( act ) {
												case 1 {
													p = ((te))-1;
													host( "working/scan2_crack.rl", 22 ) ${cout.format( "pat1\n" );
													}$ }
												case 3 {
													p = ((te))-1;
													host( "working/scan2_crack.rl", 28 ) ${cout.format( "any\n" );
													}$ }
											}}$
									}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					_acts = offset( _scanner_actions, _scanner_to_state_actions[cs] );
					_nacts = cast(uint)deref( _scanner_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 ) {
						switch ( deref( _scanner_actions, _acts ) ) {
							case 0 {
								host( "NONE", 1 ) ${${ts = nil;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/scan2_crack.rl", 48 ) @{
		
		if ( cs >= scanner_first_final ) {
			cout `ACCEPT\n`;
		}
		else {
			cout `FAIL\n`;
		}
	}
	
	void main()
	{
		m( "a" );
	}
	
	main();
}@