host( "working/recdescent4.rl", 1 ) @{/*
	* @@LANG: c
	*
	* Test growable stack.
	*/
	
	#include <stdio.h>
	#include <stdlib.h>
	#include <string.h>
	
	
	
}@
array char _recdescent_trans_keys( 0, 5 ) = { 1, 0, 5, 5, 0, 5, 0, 5, 0, 5, 0 };

array s8 _recdescent_char_class( 0, 5 ) = { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 3, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 1, 5, 0 };

array s8 _recdescent_index_offsets( 0, 13 ) = { 0, 0, 1, 7, 13, 0 };

array s8 _recdescent_indices( 0, 12 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 1, 7, 8, 9, 10, 6, 1, 11, 12, 9, 10, 0 };

array s8 _recdescent_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 0 };

array s8 _recdescent_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _recdescent_cond_targs( 0, 4 ) = { 2, 0, 3, 4, 1, 2, 2, 3, 4, 1, 2, 3, 4, 0 };

array s8 _recdescent_cond_actions( 0, 7 ) = { 0, 0, 1, 1, 2, 3, 4, 0, 5, 6, 7, 5, 0, 0 };

array s8 _recdescent_eof_actions( 0, 4 ) = { 0, 0, 0, 4, 4, 0 };

array s8 _recdescent_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _recdescent_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _recdescent_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _recdescent_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int recdescent_start = 2;
value int recdescent_first_final = 2;
value int recdescent_error = 0;

value int recdescent_en_main = 2;

host( "working/recdescent4.rl", 73 ) @{
	
	void test( char *buf )
	{
		int cs;
		int *stack;
		int top, stack_size;
		char *p, *pe, *eof, *item = 0;
		
		int len = strlen( buf );
		
	}@
	{
		cs = cast(int)recdescent_start;
		top = 0;
	}
	host( "working/recdescent4.rl", 84 ) @{
		
		stack_size = 1;
		stack = (int*)malloc( sizeof(int) * stack_size );
		
		p = buf;
		pe = buf + len;
		eof = pe;
		
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index char _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						switch ( _recdescent_eof_actions[cs] ) {
							case 4 {
								host( "working/recdescent4.rl", 33 ) ${
									printf( "item: " );
									fwrite( item, 1, p-item, stdout );
									printf( "\n" );
								}$
							}
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _recdescent_trans_keys, (cs<<1) );
					_inds = offset( _recdescent_indices, _recdescent_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 125 && ( deref( data, p )) >= 9 )
					{
						int _ic = cast(int)_recdescent_char_class[cast(int)( deref( data, p )) - 9];
						if ( _ic <= cast(int)deref( _recdescent_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _recdescent_trans_keys, _keys ) )
						_trans = cast(uint)deref( _recdescent_indices, _inds + cast(int)( _ic - cast(int)deref( _recdescent_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_recdescent_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_recdescent_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_recdescent_cond_targs[_trans];
					
					switch ( _recdescent_cond_actions[_trans] ) {
						case 1 {
							host( "working/recdescent4.rl", 30 ) ${ item = p; }$
						}
						case 4 {
							host( "working/recdescent4.rl", 33 ) ${
								printf( "item: " );
								fwrite( item, 1, p-item, stdout );
								printf( "\n" );
							}$
						}
						case 2 {
							host( "working/recdescent4.rl", 40 ) ${
								printf( "calling main\n" );
								${host( "working/recdescent4.rl", 14 ) ${ 
										if ( top == stack_size ) {
											printf( "growing stack\n" );
											stack_size = top * 2;
											stack = (int*)realloc( stack, sizeof(int)*stack_size );
										}
									}$stack[top] = cs; top += 1;cs = 2;}$}$
						}
						case 3 {
							host( "working/recdescent4.rl", 46 ) ${
								if ( top == 0 ) {
									printf( "STRAY CLOSE\n" );
									${p+= 1; _cont = 0; }$
								}
								else {
									printf( "returning from main\n" );
									${p = p - 1; }$
									${top-= 1;cs = stack[top]; host( "working/recdescent4.rl", 22 ) ${ 
											if ( stack_size > (top * 4) ) {
												stack_size = top * 2;
												stack = (int*)realloc( stack, sizeof(int)*stack_size );
												printf( "shrinking stack\n" );
											}
										}$}$
								}
							}$
						}
						case 5 {
							host( "working/recdescent4.rl", 33 ) ${
								printf( "item: " );
								fwrite( item, 1, p-item, stdout );
								printf( "\n" );
							}$
							host( "working/recdescent4.rl", 30 ) ${ item = p; }$
						}
						case 6 {
							host( "working/recdescent4.rl", 33 ) ${
								printf( "item: " );
								fwrite( item, 1, p-item, stdout );
								printf( "\n" );
							}$
							host( "working/recdescent4.rl", 40 ) ${
								printf( "calling main\n" );
								${host( "working/recdescent4.rl", 14 ) ${ 
										if ( top == stack_size ) {
											printf( "growing stack\n" );
											stack_size = top * 2;
											stack = (int*)realloc( stack, sizeof(int)*stack_size );
										}
									}$stack[top] = cs; top += 1;cs = 2;}$}$
						}
						case 7 {
							host( "working/recdescent4.rl", 33 ) ${
								printf( "item: " );
								fwrite( item, 1, p-item, stdout );
								printf( "\n" );
							}$
							host( "working/recdescent4.rl", 46 ) ${
								if ( top == 0 ) {
									printf( "STRAY CLOSE\n" );
									${p+= 1; _cont = 0; }$
								}
								else {
									printf( "returning from main\n" );
									${p = p - 1; }$
									${top-= 1;cs = stack[top]; host( "working/recdescent4.rl", 22 ) ${ 
											if ( stack_size > (top * 4) ) {
												stack_size = top * 2;
												stack = (int*)realloc( stack, sizeof(int)*stack_size );
												printf( "shrinking stack\n" );
											}
										}$}$
								}
							}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/recdescent4.rl", 93 ) @{
		
		if ( cs == recdescent_error ) {
			/* Machine failed before finding a token. */
			printf( "PARSE ERROR\n" );
		}
	}
	
	int main()
	{
		test( "88 foo { 99 {{{{}}}}{ } }");
		test( "76 } sadf");
	return 0;
}

}@