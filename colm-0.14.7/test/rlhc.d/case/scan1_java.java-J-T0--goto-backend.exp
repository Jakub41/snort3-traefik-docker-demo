class scan1_java
{
	int
	ts ;
	int
	te ;
	int act ;
	int token ;
	
	
	
	
	
	private static byte  _scanner_actions [] = { 0, 1, 2, 1, 3, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 2, 0, 1, 2, 3, 4, 2, 3, 5, 0 ,  };
	private static byte  _scanner_key_offsets [] = { 0, 0, 4, 5, 6, 7, 8, 14, 21, 22, 23, 0 ,  };
	private static char  _scanner_trans_keys [] = { 46, 100, 48, 57, 49, 120, 120, 120, 46, 49, 50, 100, 48, 57, 10, 97, 98, 99, 100, 48, 57, 98, 100, 46, 100, 48, 57, 0,  };
	private static byte  _scanner_single_lengths [] = { 0, 2, 1, 1, 1, 1, 4, 5, 1, 1, 2, 0 ,  };
	private static byte  _scanner_range_lengths [] = { 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0 ,  };
	private static byte  _scanner_index_offsets [] = { 0, 0, 4, 6, 8, 10, 12, 18, 25, 27, 29, 0 ,  };
	private static byte  _scanner_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
	private static byte  _scanner_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 0 ,  };
	private static byte  _scanner_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
	private static byte  _scanner_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _scanner_cond_targs [] = { 7, 1, 1, 7, 9, 0, 4, 7, 5, 7, 7, 7, 7, 10, 10, 1, 1, 0, 7, 7, 8, 2, 6, 1, 0, 8, 7, 3, 7, 7, 1, 1, 7, 7, 7, 7, 7, 7, 7, 7, 0 ,  };
	private static byte  _scanner_cond_actions [] = { 9, 0, 0, 19, 3, 0, 0, 17, 0, 17, 7, 17, 9, 24, 27, 0, 0, 0, 11, 5, 0, 0, 0, 0, 0, 0, 13, 0, 15, 9, 0, 0, 19, 19, 17, 17, 17, 13, 15, 19, 0 ,  };
	private static byte  _scanner_to_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0 ,  };
	private static byte  _scanner_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 ,  };
	private static byte  _scanner_eof_trans_indexed [] = { 0, 8, 0, 10, 10, 10, 0, 0, 14, 15, 8, 0 ,  };
	private static byte  _scanner_eof_trans_direct [] = { 0, 34, 0, 35, 36, 37, 0, 0, 38, 39, 40, 0 ,  };
	private static byte  _scanner_nfa_targs [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
	private static byte  _scanner_nfa_push_actions [] = { 0, 0 ,  };
	private static byte  _scanner_nfa_pop_trans [] = { 0, 0 ,  };
	private static int  scanner_start  = 7;
	private static int  scanner_first_final  = 7;
	private static int  scanner_error  = 0;
	private static int  scanner_en_main  = 7;
	int cs;
	
	void init()
	{
		{
			cs = (int)scanner_start;
			ts = 0;
			te = 0;
			act = 0;
			
		}
	}
	
	void exec( char data[], int len )
	{
		char buffer [] = new char[1024];
		int blen = 0;
		int p = 0;
		int pe = len;
		
		int eof = len;
		String _s;
		{
			int _klen;
			int _trans = 0;
			int _cond = 0;
			int _acts;
			int _nacts;
			int _keys;
			int _ckeys;
			int _cpc;
			int _goto_targ = 0;
			_goto: while ( true ) {
				switch ( _goto_targ ) {
					case 0:
					if ( p == pe  )
					{
						_goto_targ = 5;
						if (true)
						continue _goto;
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					case 1:
					_acts = _scanner_from_state_actions[cs] ;
					_nacts = (int )_scanner_actions[_acts ];
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( _scanner_actions[_acts ] ) {
							case 2 :
							{
								{
									ts = p;
									
								}
								
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
						
					}
					
					_keys = _scanner_key_offsets[cs] ;
					_trans = (int )_scanner_index_offsets[cs];
					_klen = (int)_scanner_single_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( ( data[p ]) > _scanner_trans_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_trans += (int )(_mid - _keys);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_keys += _klen;
						_trans += (int )_klen;
						
					}
					
					_klen = (int)_scanner_range_lengths[cs];
					if ( _klen > 0  )
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( data[p ]) < _scanner_trans_keys[_mid ] )
							_upper = _mid - 2;
							
							else if ( ( data[p ]) > _scanner_trans_keys[_mid + 1 ] )
							_lower = _mid + 2;
							
							else
							{
								_trans += (int )((_mid - _keys)>>1);
								{
									_goto_targ = 2;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						_trans += (int )_klen;
						
					}
					
					
					case 2:
					_ckeys = _scanner_trans_offsets[_trans] ;
					_klen = (int)_scanner_trans_lengths[_trans];
					_cond = (int )_scanner_trans_offsets[_trans];
					_cpc = 0;
					{
						int _lower;
						int _mid;
						int _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( true  )
						{
							if ( _upper < _lower  )
							break;
							
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < (int)_scanner_cond_keys[_mid ] )
							_upper = _mid - 1;
							
							else if ( _cpc > (int)_scanner_cond_keys[_mid ] )
							_lower = _mid + 1;
							
							else
							{
								_cond += (int )(_mid - _ckeys);
								{
									_goto_targ = 3;
									if (true)
									continue _goto;
								}
								
							}
							
							
						}
						
						cs = 0;
						{
							_goto_targ = 4;
							if (true)
							continue _goto;
						}
						
					}
					
					case 3:
					cs = (int)_scanner_cond_targs[_cond];
					if ( _scanner_cond_actions[_cond] == 0  )
					{
						_goto_targ = 4;
						if (true)
						continue _goto;
					}
					
					_acts = _scanner_cond_actions[_cond] ;
					_nacts = (int )_scanner_actions[_acts ];
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( _scanner_actions[_acts ] ) {
							case 3 :
							{
								{
									te = p+1;
									
								}
								
							}
							
							break;
							case 4 :
							{
								{
									act = 4;
									
								}
								
							}
							
							break;
							case 5 :
							{
								{
									act = 5;
									
								}
								
							}
							
							break;
							case 6 :
							{
								{
									te = p+1;
									{
										System.out.print( "on last     " );
										if ( p + 1 == te )
										{
											System.out.print( "yes" );
											
										} 
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 7 :
							{
								{
									te = p+1;
									{
										System.out.print( "on lag      " );
										if ( p + 1 == te )
										{
											System.out.print( "yes" );
											
										} 
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 8 :
							{
								{
									te = p+1;
									
								}
								
							}
							
							break;
							case 9 :
							{
								{
									te = p+1;
									
								}
								
							}
							
							break;
							case 10 :
							{
								{
									te = p;
									p = p - 1;
									{
										System.out.print( "on next     " );
										if ( p + 1 == te )
										{
											System.out.print( "yes" );
											
										} 
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 11 :
							{
								{
									te = p;
									p = p - 1;
									{
										System.out.print( "on lag      " );
										if ( p + 1 == te )
										{
											System.out.print( "yes" );
											
										} 
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 12 :
							{
								{
									p = ((te))-1;
									{
										System.out.print( "on lag      " );
										if ( p + 1 == te )
										{
											System.out.print( "yes" );
											
										} 
										System.out.print( "\n" );
										
									}
									
								}
								
							}
							
							break;
							case 13 :
							{
								{
									switch ( act  ) {
										case 0 :
										{
											{
												cs = 0;
												{
													_goto_targ = 4;
													if (true)
													continue _goto;
												}
												
											}
											
										}
										
										break;
										case 4 :
										p = ((te))-1;
										{
											System.out.print( "lm switch1  " );
											if ( p + 1 == te )
											{
												System.out.print( "yes" );
												
											} 
											System.out.print( "\n" );
											
										}
										
										break;
										case 5 :
										p = ((te))-1;
										{
											System.out.print( "lm switch2  " );
											if ( p + 1 == te )
											{
												System.out.print( "yes" );
												
											} 
											System.out.print( "\n" );
											
										}
										
										break;
										
									}
									
								}
								
								
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
						
					}
					
					
					case 4:
					_acts = _scanner_to_state_actions[cs] ;
					_nacts = (int )_scanner_actions[_acts ];
					_acts += 1;
					while ( _nacts > 0  )
					{
						switch ( _scanner_actions[_acts ] ) {
							case 0 :
							{
								{
									ts = 0;
									
								}
								
							}
							
							break;
							case 1 :
							{
								{
									act = 0;
									
								}
								
							}
							
							break;
							
						}
						_nacts -= 1;
						_acts += 1;
						
					}
					
					if ( cs == 0  )
					{
						_goto_targ = 6;
						if (true)
						continue _goto;
					}
					
					p += 1;
					if ( p != pe  )
					{
						_goto_targ = 1;
						if (true)
						continue _goto;
					}
					
					
					case 5:
					{
					
					}
					if ( p == eof  )
					{
						if ( _scanner_eof_trans_direct[cs] > 0  )
						{
							_trans = (int )_scanner_eof_trans_direct[cs] - 1;
							_cond = (int )_scanner_trans_offsets[_trans];
							{
								_goto_targ = 3;
								if (true)
								continue _goto;
							}
							
						}
						
						
					}
					
					
					case 6:
					{
					
					}
					
					
				}
				break;
			}
			
		}
	}
	
	void finish( )
	{
		if ( cs >= scanner_first_final )
		System.out.println( "ACCEPT" );
		else
		System.out.println( "FAIL" );
	}
	
	static final String inp[] = {
		"abbc1d1d2\n",
	};
	
	static final int inplen = 1;
	
	public static void main (String[] args)
	{
		scan1_java machine = new scan1_java();
		for ( int i = 0; i < inplen; i++ ) {
			machine.init();
			machine.exec( inp[i].toCharArray(), inp[i].length() );
			machine.finish();
		}
	}
}
