static mut comm : u8 = 0;
static mut top : i32 = 0;
static mut stack : [ i32 ; 32] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
static mut ts : i32
= 0;
static mut te : i32
= 0;
static mut act : i32 = 0;
static mut value : i32 = 0;





static _patact_actions: [i8 ; 63] = [ 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 2, 2, 6, 2, 2, 7, 2, 2, 17, 2, 2, 18, 0 , 0 ];
static _patact_trans_keys: [u8 ; 60] = [ 1, 0, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 8, 8, 11, 11, 9, 9, 10, 10, 0, 11, 2, 5, 2, 5, 2, 11, 0, 11, 4, 5, 7, 11, 0, 11, 2, 5, 2, 5, 2, 11, 6, 6, 0 , 0 ];
static _patact_char_class: [i8 ; 115] = [ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 1, 6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 7, 7, 7, 8, 7, 7, 9, 7, 7, 10, 7, 7, 11, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0 , 0 ];
static _patact_index_offsets: [i8 ; 31] = [ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 28, 32, 36, 46, 58, 60, 65, 77, 81, 85, 95, 0 , 0 ];
static _patact_indices: [i8 ; 98] = [ 1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 20, 22, 23, 24, 25, 26, 26, 26, 26, 26, 27, 0, 23, 23, 27, 28, 23, 29, 31, 30, 30, 30, 30, 26, 26, 26, 26, 26, 32, 21, 32, 21, 33, 33, 21, 34, 34, 34, 34, 34, 33, 33, 34, 34, 34, 34, 34, 37, 21, 37, 38, 39, 40, 21, 41, 41, 41, 41, 41, 42, 10, 39, 39, 42, 43, 39, 44, 46, 45, 45, 45, 45, 41, 41, 41, 41, 41, 47, 0 , 0 ];
static _patact_index_defaults: [i8 ; 31] = [ 0, 0, 0, 0, 0, 5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15, 15, 21, 0, 28, 30, 21, 35, 36, 21, 10, 43, 45, 21, 0 , 0 ];
static _patact_trans_cond_spaces: [i8 ; 50] = [ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 , 0 ];
static _patact_cond_targs: [i8 ; 50] = [ 17, 2, 3, 4, 17, 17, 6, 7, 8, 17, 24, 10, 11, 12, 24, 24, 14, 15, 16, 24, 17, 0, 17, 18, 19, 17, 20, 1, 17, 18, 17, 5, 21, 22, 23, 21, 21, 24, 24, 25, 26, 27, 9, 24, 25, 24, 13, 28, 0 , 0 ];
static _patact_cond_actions: [i8 ; 50] = [ 47, 0, 0, 0, 35, 45, 0, 0, 0, 31, 27, 0, 0, 0, 17, 25, 0, 0, 0, 13, 33, 0, 39, 58, 58, 37, 5, 0, 43, 55, 41, 0, 7, 0, 0, 11, 9, 15, 19, 52, 52, 5, 0, 23, 49, 21, 0, 29, 0 , 0 ];
static _patact_to_state_actions: [i8 ; 31] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0 , 0 ];
static _patact_from_state_actions: [i8 ; 31] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0, 3, 0 , 0 ];
static _patact_eof_trans: [i8 ; 31] = [ 0, 1, 1, 1, 1, 6, 6, 6, 6, 11, 11, 11, 11, 16, 16, 16, 16, 0, 1, 29, 31, 0, 36, 37, 0, 11, 44, 46, 0, 0 , 0 ];
static _patact_nfa_targs: [i8 ; 3] = [ 0, 0 , 0 ];
static _patact_nfa_offsets: [i8 ; 31] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 , 0 ];
static _patact_nfa_push_actions: [i8 ; 3] = [ 0, 0 , 0 ];
static _patact_nfa_pop_trans: [i8 ; 3] = [ 0, 0 , 0 ];
static patact_start : i32 = 17;
static patact_first_final : i32 = 17;
static patact_error : i32 = 0;
static patact_en_other : i32 = 21;
static patact_en_exec_test : i32 = 24;
static patact_en_semi : i32 = 28;
static patact_en_main : i32 = 17;
unsafe fn m( s: String )
{
	let data: &[u8] = s.as_bytes();
	let mut p:i32 = 0;
	let mut pe:i32 = s.len() as i32;
	let mut eof:i32 = s.len() as i32;
	let mut cs: i32 = 0;
	let mut buffer = String::new();
	
	
	{
		cs = ( patact_start ) as i32;
		ts = 0;
		te = 0;
		act = 0;
	}
	
	{
		let mut _trans  = 0;
		let mut _have  = 0;
		let mut _cont  = 1;
		let mut _acts :i32 = 0;
		let mut _nacts = 0;
		let mut _keys :i32 = 0;
		let mut _inds :i32 = 0;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  ) {
				_cont = 0;
				
			}
			_have = 0;
			if ( p == pe  ) {
				{
					if ( p == eof  ) {
						{
							if ( _patact_eof_trans[(cs) as usize]> 0  ) {
								{
									_trans = ( _patact_eof_trans[(cs) as usize] ) as u32- 1;
									_have = 1;
								}
								
							}
							if ( _have == 0  ) {
								{
								}
								
							}
						}
						
						
					}
					if ( _have == 0  ) {
						_cont = 0;
						
					}
				}
				
			}
			if ( _cont == 1  ) {
				{
					if ( _have == 0  ) {
						{
							_acts = ( _patact_from_state_actions[(cs) as usize] ) as i32;
							_nacts = ( _patact_actions[(_acts ) as usize]
							) as u32;
							_acts += 1;
							while ( _nacts > 0  )
							{
								match ( _patact_actions[(_acts ) as usize]
								) {
									1  => {
										{{ts = p;
											}}
										
									}
									
									_ => {}
								}
								_nacts -= 1;
								_acts += 1;
							}
							
							
							_keys = ( (cs<<1)  ) as i32;
							_inds = ( _patact_index_offsets[(cs) as usize] ) as i32;
							if ( ( data[(p ) as usize]
							) <= 122 && ( data[(p ) as usize]
							) >= 10  ) {
								{
									let mut _ic  = ( _patact_char_class[(( ( data[(p ) as usize]
									)  ) as i32- 10) as usize] ) as i32;
									if ( _ic <= ( _patact_trans_keys[(_keys+1 ) as usize]
									) as i32&& _ic >= ( _patact_trans_keys[(_keys ) as usize]
									) as i32 ) {
										_trans = ( _patact_indices[(_inds + ( ( _ic - ( _patact_trans_keys[(_keys ) as usize]
										) as i32)   ) as i32) as usize]
										) as u32;
										
									}
									else {
										_trans = ( _patact_index_defaults[(cs) as usize] ) as u32;
										
									}
								}
								
							}
							else {
								{
									_trans = ( _patact_index_defaults[(cs) as usize] ) as u32;
								}
								
								
							}
						}
						
					}
					if ( _cont == 1  ) {
						{
							cs = ( _patact_cond_targs[(_trans) as usize] ) as i32;
							if ( _patact_cond_actions[(_trans) as usize]!= 0  ) {
								{
									_acts = ( _patact_cond_actions[(_trans) as usize] ) as i32;
									_nacts = ( _patact_actions[(_acts ) as usize]
									) as u32;
									_acts += 1;
									while ( _nacts > 0  )
									{
										match ( _patact_actions[(_acts ) as usize]
										) {
											2  => {
												{{te = p+1;
													}}
												
											}
											3  => {
												{{te = p+1;
														{print!( "{}", "space\n" );
														}
													}}
												
											}
											4  => {
												{{te = p;
														p = p - 1;
														{print!( "{}", "word\n" );
														}
													}}
												
											}
											5  => {
												{{te = p;
														p = p - 1;
														{print!( "{}", "num\n" );
														}
													}}
												
											}
											6  => {
												{{act = 7;
													}}
												
											}
											7  => {
												{{act = 8;
													}}
												
											}
											8  => {
												{{te = p+1;
														{print!( "{}", "word (c/lbh)\n" );
														}
													}}
												
											}
											9  => {
												{{te = p+1;
														{print!( "{}", "space\n" );
														}
													}}
												
											}
											10  => {
												{{te = p+1;
														{print!( "{}", "num (c/switch)\n" );
														}
													}}
												
											}
											11  => {
												{{te = p+1;
													}}
												
											}
											12  => {
												{{te = p;
														p = p - 1;
														{print!( "{}", "word (w/lbh)\n" );
															{p = (( te-1))-1;
															}
															{cs = 21;
															}}
													}}
												
											}
											13  => {
												{{te = p;
														p = p - 1;
														{print!( "{}", "num (w/switch)\n" );
															{p = (( te-1))-1;
															}
															{cs = 21;
															}}
													}}
												
											}
											14  => {
												{{p = ((te))-1;
														{print!( "{}", "word (w/lbh)\n" );
															{p = (( te-1))-1;
															}
															{cs = 21;
															}}
													}}
												
											}
											15  => {
												{{match ( act  ) {
															7  => {
																p = ((te))-1;
																{print!( "{}", "num (w/switch)\n" );
																}
																
															}
															8  => {
																p = ((te))-1;
																{print!( "{}", "num (w/switch)\n" );
																	{p = (( te-1))-1;
																	}
																	{cs = 21;
																	}}
																
															}
															
															_ => {}
														}
													}
												}
												
											}
											16  => {
												{{te = p+1;
														{print!( "{}", "in semi\n" );
															{cs = 17;
															}}
													}}
												
											}
											17  => {
												{{act = 15;
													}}
												
											}
											18  => {
												{{act = 16;
													}}
												
											}
											19  => {
												{{te = p+1;
														{print!( "{}", "word (c/lbh)\n" );
														}
													}}
												
											}
											20  => {
												{{te = p+1;
														{print!( "{}", "space\n" );
														}
													}}
												
											}
											21  => {
												{{te = p+1;
														{print!( "{}", "num (c/switch)\n" );
														}
													}}
												
											}
											22  => {
												{{te = p+1;
														{print!( "{}", "going to semi\n" );
															{p = p - 1;
															}{cs = 28;
															}}
													}}
												
											}
											23  => {
												{{te = p+1;
														{print!( "{}", "immdiate\n" );
															{cs = 24;
															}}
													}}
												
											}
											24  => {
												{{te = p;
														p = p - 1;
														{print!( "{}", "word (w/lbh)\n" );
															{p = p - 1;
															}{cs = 21;
															}}
													}}
												
											}
											25  => {
												{{te = p;
														p = p - 1;
														{print!( "{}", "num (w/switch)\n" );
															{p = p - 1;
															}{cs = 21;
															}}
													}}
												
											}
											26  => {
												{{p = ((te))-1;
														{print!( "{}", "word (w/lbh)\n" );
															{p = p - 1;
															}{cs = 21;
															}}
													}}
												
											}
											27  => {
												{{match ( act  ) {
															15  => {
																p = ((te))-1;
																{print!( "{}", "num (w/switch)\n" );
																}
																
															}
															16  => {
																p = ((te))-1;
																{print!( "{}", "num (w/switch)\n" );
																	{p = p - 1;
																	}{cs = 21;
																	}}
																
															}
															
															_ => {}
														}
													}
												}
												
											}
											
											_ => {}
										}
										_nacts -= 1;
										_acts += 1;
									}
									
								}
								
								
							}
							_acts = ( _patact_to_state_actions[(cs) as usize] ) as i32;
							_nacts = ( _patact_actions[(_acts ) as usize]
							) as u32;
							_acts += 1;
							while ( _nacts > 0  )
							{
								match ( _patact_actions[(_acts ) as usize]
								) {
									0  => {
										{{ts = 0;
											}}
										
									}
									
									_ => {}
								}
								_nacts -= 1;
								_acts += 1;
							}
							
							
							if ( cs == 0  ) {
								_cont = 0;
								
							}
							if ( _cont == 1  ) {
								p += 1;
								
							}
						}
					}
				}
				
			}
		}
		
	}
	if ( cs >= patact_first_final ) {
		println!( "ACCEPT" );
	}
	else {
		println!( "FAIL" );
	}
}

fn main()
{
	unsafe { m( "abcd foix\n".to_string() ); }
	unsafe { m( "abcd\nanother\n".to_string() ); }
	unsafe { m( "123 foix\n".to_string() ); }
	unsafe { m( "!abcd foix\n".to_string() ); }
	unsafe { m( "!abcd\nanother\n".to_string() ); }
	unsafe { m( "!123 foix\n".to_string() ); }
	unsafe { m( ";".to_string() ); }
}

