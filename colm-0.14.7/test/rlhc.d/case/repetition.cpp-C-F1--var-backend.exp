#include <iostream>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

using namespace std;

struct Rep
{
	int cs;
	
	int init( );
	int execute( const char *data, int len );
	int finish( );
};



static const char  _Rep_trans_keys [] = { 1, 0, 2, 3, 0, 0, 0, 4, 0, 0, 2, 5, 0, 0, 6, 6, 0, 6, 0, 6, 0, 6, 0, 0, 5, 5, 5, 5, 5, 5, 5, 5, 0, 5, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 6, 6, 0 ,  };
static const char  _Rep_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 6, 0 ,  };
static const char  _Rep_index_offsets [] = { 0, 0, 2, 3, 8, 9, 13, 14, 15, 22, 29, 36, 37, 38, 39, 40, 41, 47, 52, 57, 62, 67, 68, 69, 70, 71, 72, 73, 0 ,  };
static const char  _Rep_indices [] = { 0, 2, 3, 3, 1, 4, 1, 5, 6, 7, 1, 1, 8, 9, 10, 11, 1, 1, 1, 1, 1, 12, 11, 1, 1, 1, 1, 1, 13, 11, 1, 1, 1, 1, 1, 14, 11, 15, 16, 17, 18, 19, 1, 1, 1, 1, 18, 20, 1, 1, 1, 21, 20, 1, 1, 1, 22, 20, 1, 1, 1, 23, 20, 1, 1, 1, 24, 20, 25, 26, 27, 28, 29, 30, 0 ,  };
static const char  _Rep_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _Rep_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _Rep_cond_targs [] = { 2, 0, 22, 3, 4, 17, 5, 6, 12, 27, 8, 27, 9, 10, 11, 13, 14, 15, 16, 5, 3, 18, 19, 20, 21, 23, 24, 25, 26, 1, 7, 0 ,  };
static const char  _Rep_cond_actions [] = { 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 3, 1, 0 ,  };
static const char  _Rep_nfa_targs [] = { 0, 0 ,  };
static const char  _Rep_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _Rep_nfa_push_actions [] = { 0, 0 ,  };
static const char  _Rep_nfa_pop_trans [] = { 0, 0 ,  };
static const int  Rep_start  = 1;
static const int  Rep_first_final  = 27;
static const int  Rep_error  = 0;
static const int  Rep_en_main  = 1;
int Rep::init( )
{

	{
		cs = ( int ) Rep_start;
	}
	return 1;
}

int Rep::execute( const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	
	
	{
		unsigned int _trans = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_keys;
		const char  *_inds;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _Rep_trans_keys + (cs<<1);
					_inds = _Rep_indices + _Rep_index_offsets[cs];
					if ( ((*( p  ))
					)<= 100 && ((*( p  ))
					)>= 10  )
					{
						int _ic = ( int ) _Rep_char_class[( int ) ((*( p  ))
						)- 10];
						if ( _ic <= ( int ) (*( _keys+1  ))
						&& _ic >= ( int ) (*( _keys  ))
						)
						_trans = ( unsigned int  ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
						) ))
						;
						
						else
						_trans = ( unsigned int  ) _Rep_index_defaults[cs];
						
					}
					
					else
					{
						_trans = ( unsigned int  ) _Rep_index_defaults[cs];
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _Rep_cond_targs[_trans];
					switch ( _Rep_cond_actions[_trans] ) {
						case 3 :
						{
							cout << "end" << endl; 
						}
						
						break;
						case 1 :
						{
							cout << "begin" << endl; 
						}
						{
							cout << "in" << endl; 
						}
						
						break;
						case 2 :
						{
							cout << "end" << endl; 
						}
						{
							cout << "begin" << endl; 
						}
						{
							cout << "in" << endl; 
						}
						
						break;
						
					}
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
	if ( cs == Rep_error )
	return -1;
	if ( cs >= Rep_first_final )
	return 1;
	return 0;
}

int Rep::finish( )
{
	if ( cs == Rep_error )
	return -1;
	if ( cs >= Rep_first_final )
	return 1;
	return 0;
}

void test( const char *buf )
{
	Rep rep;
	int len = strlen( buf );
	rep.init();
	rep.execute( buf, len );
	if ( rep.finish() > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}

int main()
{
	test(
	"aaaaa\n"
	"-\n"
	"\n"
	"b\n"
	"bb\n"
	"bbb\n"
	"bbbb\n"
	"bbbbb\n"
	"-\n"
	"ccccc\n"
	"ccccccc\n"
	"cccccccccc\n"
	"-\n"
	"dd\n"
	"ddd\n"
	"dddd\n"
	"ddddd\n"
	);
	
	test(
	"a\n"
	"-\n"
	"b\n"
	"-\n"
	"c\n"
	"-\n"
	"d\n"
	);
	
	return 0;
}

