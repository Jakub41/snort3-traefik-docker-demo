host( "working/high3.rl", 1 ) @{/*
	* @@LANG: obj-c
	*/
	
	/**
	* Test a high character to make sure signedness 
	* isn't messing us up.
	*/
	
	#include <stdio.h>
	#include <objc/Object.h>
	#include <Foundation/Foundation.h>
	
	@@interface Fsm : NSObject
	{
		@@public
		int cs;
	};
	
	// Initialize the machine. Invokes any init statement blocks. Returns 0
	// if the machine begins in a non-accepting state and 1 if the machine
	// begins in an accepting state.
	- (int) initFsm;
	
	// Execute the machine on a block of data. Returns -1 if after processing
	// the data, the machine is in the error state and can never accept, 0 if
	// the machine is in a non-accepting state and 1 if the machine is in an
	// accepting state.
	- (void) executeWithData:(const unsigned char *)data len:(int)len;
	
	// Indicate that there is no more data. Returns -1 if the machine finishes
	// in the error state and does not accept, 0 if the machine finishes
	// in any other non-accepting state and 1 if the machine finishes in an
	// accepting state.
	- (int) finish;
	
	@@end
	
	@@implementation Fsm
	
	
	
}@
value int Fsm_start = 1;
value int Fsm_first_final = 3;
value int Fsm_error = 0;

value int Fsm_en_main = 1;

array s8 _Fsm_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _Fsm_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0 };

array s8 _Fsm_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _Fsm_nfa_pop_trans( 0, 0 ) = { 0, 0 };

host( "working/high3.rl", 55 ) @{
	
	- (int) initFsm;
	{
	}@
	{
		cs = cast(int)Fsm_start;
	}
	host( "working/high3.rl", 59 ) @{
		return 1;
	}
	
	- (void) executeWithData:(const unsigned char *)_data len:(int)_len;
	{
		const unsigned char *p = _data;
		const unsigned char *pe = _data + _len;
	}@
	{
		if ( p == pe )
		goto _test_eof;
		switch ( cs )
		{
			case 1:
			goto st_case_1;
			case 0:
			goto st_case_0;
			case 2:
			goto st_case_2;
			case 3:
			goto st_case_3;
		}
		goto st_out;
		st_case_1:
		if ( ( deref( data, p )) == u(232) ) {
			goto ctr0;
		}
		{
			goto st0;
		}
		st_case_0:
		st0:
		cs = 0;
		goto _out;
		ctr0:
		host( "working/high3.rl", 47 ) ${
			printf("yes\n");
		}$
		
		goto st2;
		st2:
		p+= 1;
		if ( p == pe )
		goto _test_eof2;
		st_case_2:
		if ( ( deref( data, p )) == u(10) ) {
			goto st3;
		}
		{
			goto st0;
		}
		st3:
		p+= 1;
		if ( p == pe )
		goto _test_eof3;
		st_case_3:
		{
			goto st0;
		}
		st_out:
		_test_eof2: cs = 2; goto _test_eof; 
		_test_eof3: cs = 3; goto _test_eof; 
		
		_test_eof: {}
		_out: {}
	}
	host( "working/high3.rl", 67 ) @{
	}
	
	- (int) finish;
	{
		if ( cs == Fsm_error )
		return -1;
		else if ( cs >= Fsm_first_final )
		return 1;
		return 0;
	}
	
	
	@@end
	
	
	#define BUFSIZE 2048
	
	Fsm *fsm;
	unsigned char buf[BUFSIZE];
	
	void test( unsigned char *buf, int len )
	{
		fsm = [[Fsm alloc] init];
		[fsm initFsm];
		[fsm executeWithData:buf len:len];
		if ( [fsm finish] > 0 )
		printf("ACCEPT\n");
		else
		printf("FAIL\n");
	}
	
	unsigned char data1[] = { 0xe8, 10 };
	unsigned char data2[] = { 0xf8, 10 };
	
	int main()
	{
		test( data1, 2 );
		test( data2, 2 );
		return 0;
	}
	
}@