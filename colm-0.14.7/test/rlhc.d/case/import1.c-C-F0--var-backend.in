host( "working/import1.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stdio.h>
	
	char *foo = "foo";
	
	char b = 98;
	char a = 97;
	char r = 114;
	
	#define SP 32
	#define NL '\n'
	
	
	
}@
array s8 _tmp_actions( 0, 1 ) = { 0, 1, 0, 1, 1, 0 };

array char _tmp_trans_keys( 0, 7 ) = { 1, 0, 3, 3, 7, 7, 2, 2, 4, 5, 3, 3, 7, 7, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 4, 5, 0 };

array s8 _tmp_char_class( 0, 7 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 7, 0 };

array s8 _tmp_index_offsets( 0, 12 ) = { 0, 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 0 };

array s8 _tmp_indices( 0, 14 ) = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 };

array s8 _tmp_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _tmp_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _tmp_cond_targs( 0, 12 ) = { 2, 0, 3, 4, 5, 8, 6, 7, 12, 9, 7, 11, 3, 1, 10, 0 };

array s8 _tmp_cond_actions( 0, 3 ) = { 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 1, 0, 1, 0, 0, 0 };

array s8 _tmp_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _tmp_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _tmp_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _tmp_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int tmp_start = 12;
value int tmp_first_final = 12;
value int tmp_error = 0;

value int tmp_en_main = 12;

host( "working/import1.rl", 28 ) @{
	
	int cs;
	
	void exec_str( char *p, int len )
	{
		char *pe = p + len;
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index char _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _tmp_trans_keys, (cs<<1) );
					_inds = offset( _tmp_indices, _tmp_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 114 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_tmp_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _tmp_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _tmp_trans_keys, _keys ) )
						_trans = cast(uint)deref( _tmp_indices, _inds + cast(int)( _ic - cast(int)deref( _tmp_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_tmp_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_tmp_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_tmp_cond_targs[_trans];
					
					if ( _tmp_cond_actions[_trans] != 0 ) {
						_acts = offset( _tmp_actions, _tmp_cond_actions[_trans] );
						_nacts = cast(uint)deref( _tmp_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _tmp_actions, _acts ) )
							{
								case 0 {
									host( "working/import1.rl", 21 ) ${printf("foo\n"); }$
								}
								case 1 {
									host( "working/import1.rl", 22 ) ${printf("bar\n");}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/import1.rl", 35 ) @{
	}
	
	void exec_c( char c )
	{
		exec_str( &c, 1 );
	}
	
	int main()
	{
	}@
	{
		cs = cast(int)tmp_start;
	}
	host( "working/import1.rl", 45 ) @{
		
		exec_str( foo, 3 );
		exec_c( SP );
		exec_c( b );
		exec_c( a );
		exec_c( r );
		exec_c( NL );
		
		exec_c( b );
		exec_c( a );
		exec_c( r );
		exec_c( SP );
		exec_str( foo, 3 );
		exec_c( NL );
		
		if ( cs < tmp_first_final )
		printf("FAIL\n");
		else
		printf("ACCEPT\n");
		
		return 0;
	}
	
}@