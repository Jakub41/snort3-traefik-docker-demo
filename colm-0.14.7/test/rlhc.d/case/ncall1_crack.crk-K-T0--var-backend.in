host( "working/ncall1_crack.rl", 1 ) @{//
	// @@LANG: crack
	// @@GENERATED: true
	//
	
	import crack.io cout;
	import crack.lang Buffer;
	
	int top;
	array[int] stack = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
	int target;
	
	
	
	
	
}@
array s8 _ncall1_actions( 0, 3 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 };

array s8 _ncall1_key_offsets( 0, 15 ) = { 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 15, 15, 0 };

array byte _ncall1_trans_keys( 0, 119 ) = { c(117), c(110), c(117), c(115), c(101), c(100), c(111), c(110), c(101), c(116), c(119), c(111), c(10), c(49), c(50), c(0) };

array s8 _ncall1_single_lengths( 0, 3 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 0, 0, 0, 0 };

array s8 _ncall1_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ncall1_index_offsets( 0, 30 ) = { 0, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 28, 29, 30, 0 };

array s8 _ncall1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _ncall1_trans_offsets( 0, 30 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 0 };

array s8 _ncall1_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _ncall1_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ncall1_cond_targs( 0, 16 ) = { 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 14, 0, 8, 0, 9, 0, 15, 0, 11, 0, 12, 0, 16, 0, 13, 13, 13, 0, 0, 0, 0, 0 };

array s8 _ncall1_cond_actions( 0, 7 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 5, 7, 0, 0, 0, 0, 0 };

array s8 _ncall1_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _ncall1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _ncall1_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _ncall1_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int ncall1_start = 13;
value int ncall1_first_final = 13;
value int ncall1_error = 0;

value int ncall1_en_unused = 1;
value int ncall1_en_one = 7;
value int ncall1_en_two = 10;
value int ncall1_en_main = 13;

host( "working/ncall1_crack.rl", 36 ) @{
	
	void m( String s )
	{
		byteptr data = s.buffer;
		int p = 0;
		int pe = s.size;
		int cs;
		String buffer;
		
	}@
	{
		cs = cast(int)ncall1_start;
		top = 0;
	}
	host( "working/ncall1_crack.rl", 46 ) @{
	}@
	{
		int _klen;
		uint _trans = 0;
		uint _cond = 0;
		uint _have = 0;
		uint _cont = 1;
		index s8 _acts;
		uint _nacts;
		index byte _keys;
		index s8 _ckeys;
		int _cpc;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _ncall1_trans_keys, _ncall1_key_offsets[cs] );
					_trans = cast(uint)_ncall1_index_offsets[cs];
					_have = 0;
					
					_klen = cast(int)_ncall1_single_lengths[cs];
					if ( _klen > 0 ) {
						index byte _lower;
						index byte _mid;
						index byte _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0 ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _ncall1_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _ncall1_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							_keys += _klen;
							_trans += cast(uint)_klen;
						}
					}
					
					if ( _have == 0 ) {
						_klen = cast(int)_ncall1_range_lengths[cs];
						if ( _klen > 0 ) {
							index byte _lower;
							index byte _mid;
							index byte _upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1) - 2;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + (((_upper-_lower) >> 1) & ~1);
								if ( ( deref( data, p )) < deref( _ncall1_trans_keys, _mid ) )
								_upper = _mid - 2;
								else if ( ( deref( data, p )) > deref( _ncall1_trans_keys, _mid + 1 ) )
								_lower = _mid + 2;
								else {
									_trans += cast(uint)((_mid - _keys)>>1);
									_have = 1;
								}
							}
							if ( _have == 0 )
							_trans += cast(uint)_klen;
						}
					}
					
					_ckeys = offset( _ncall1_cond_keys, _ncall1_trans_offsets[_trans] );
					_klen = cast(int)_ncall1_trans_lengths[_trans];
					_cond = cast(uint)_ncall1_trans_offsets[_trans];
					_have = 0;
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _ncall1_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _ncall1_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								_have = 1;
							}
						}
						if ( _have == 0 ) {
							cs = 0;
							_cont = 0;
						}
					}
				}
				if ( _cont == 1 ) {
					cs = cast(int)_ncall1_cond_targs[_cond];
					
					if ( _ncall1_cond_actions[_cond] != 0 ) {
						_acts = offset( _ncall1_actions, _ncall1_cond_actions[_cond] );
						_nacts = cast(uint)deref( _ncall1_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 )
						{
							switch ( deref( _ncall1_actions, _acts ) )
							{
								case 0 {
									host( "working/ncall1_crack.rl", 18 ) ${cout.format( "one\n" );
										${top-= 1;cs = stack[top]; }$}$
								}
								case 1 {
									host( "working/ncall1_crack.rl", 21 ) ${cout.format( "two\n" );
										${top-= 1;cs = stack[top]; }$}$
								}
								case 2 {
									host( "working/ncall1_crack.rl", 25 ) ${target = 7;
										${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={target}=;}$}$
								}
								case 3 {
									host( "working/ncall1_crack.rl", 27 ) ${target = 10;
										${stack[top] = cs; top += 1;cs = host( "-", 1 ) ={target}=;}$}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}
			}
		}
	}
	host( "working/ncall1_crack.rl", 47 ) @{
		
		if ( cs >= ncall1_first_final ) {
			cout `ACCEPT\n`;
		}
		else {
			cout `FAIL\n`;
		}
	}
	
	void main()
	{
		m( "1one2two1one\n" );
	}
	
	main();
}@