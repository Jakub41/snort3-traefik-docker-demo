#include <stdio.h>
#include <string.h>

/*
* After the fact start and ending transitions. Behaves like constructors of
* and destructors in c++.
*/

struct forder
{
	int cs;
};



static const char  _forder_actions [] = { 0, 2, 1, 4, 2, 2, 5, 4, 3, 0, 1, 4, 0 ,  };
static const char  _forder_nfa_targs [] = { 0, 0 ,  };
static const char  _forder_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _forder_nfa_push_actions [] = { 0, 0 ,  };
static const char  _forder_nfa_pop_trans [] = { 0, 0 ,  };
static const int  forder_start  = 1;
static const int  forder_first_final  = 7;
static const int  forder_error  = 0;
static const int  forder_en_main  = 1;
void forder_init( struct forder *fsm )
{

	{
		(fsm->cs) = ( int ) forder_start;
	}
}

void forder_execute( struct forder *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	
	
	{
		const char  *_acts;
		unsigned int _nacts;
		
		if ( p == pe  )
		goto _test_eof;
		
		if ( (fsm->cs) == 0  )
		goto _out;
		
		_resume:
		switch ( (fsm->cs) ) {
			case 1:
			if ( ((*( p  ))
			)== 105  )
			{
				goto ctr0;
			}
			
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			if ( ((*( p  ))
			)== 110  )
			{
				goto ctr2;
			}
			
			{
				goto ctr1;
			}
			case 3:
			if ( ((*( p  ))
			)== 110  )
			{
				goto ctr3;
			}
			
			{
				goto ctr1;
			}
			case 4:
			if ( ((*( p  ))
			)== 101  )
			{
				goto ctr4;
			}
			
			{
				goto ctr1;
			}
			case 5:
			if ( ((*( p  ))
			)== 114  )
			{
				goto ctr5;
			}
			
			{
				goto ctr1;
			}
			case 6:
			if ( ((*( p  ))
			)== 10  )
			{
				goto ctr6;
			}
			
			{
				goto ctr1;
			}
			case 7:
			{
				goto ctr1;
			}
			
		}
		ctr1: (fsm->cs) = 0;
		goto _again;
		ctr0: (fsm->cs) = 2;
		goto f0;
		ctr2: (fsm->cs) = 3;
		goto f1;
		ctr3: (fsm->cs) = 4;
		goto f1;
		ctr4: (fsm->cs) = 5;
		goto f1;
		ctr5: (fsm->cs) = 6;
		goto f1;
		ctr6: (fsm->cs) = 7;
		goto f2;
		
		f1: _acts = _forder_actions + 1 ;
		goto execFuncs;
		f2: _acts = _forder_actions + 4 ;
		goto execFuncs;
		f0: _acts = _forder_actions + 7 ;
		goto execFuncs;
		
		execFuncs:
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0:
				{
					printf("enter inner\n");
				}
				
				break;
				case 1:
				{
					printf("inside inner\n");
				}
				
				break;
				case 2:
				{
					printf("leave inner\n");
				}
				
				break;
				case 3:
				{
					printf("enter outter\n");
				}
				
				break;
				case 4:
				{
					printf("inside outter\n");
				}
				
				break;
				case 5:
				{
					printf("leave outter\n");
				}
				
				break;
				
			}
			_acts += 1;
			_nacts -= 1;
		}
		
		
		goto _again;
		
		_again:
		if ( (fsm->cs) == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		_test_eof: {}
		_out: {}
	}
}

int forder_finish( struct forder *fsm )
{
	if ( fsm->cs == forder_error )
	return -1;
	if ( fsm->cs >= forder_first_final )
	return 1;
	return 0;
}

struct forder fsm;

void test( char *buf )
{
	int len = strlen( buf );
	forder_init( &fsm );
	forder_execute( &fsm, buf, len );
	if ( forder_finish( &fsm ) > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}


int main()
{
	test( "inner\n");
	
	test(
	"inner\n"
	"foobar\n"
	);
	
	test( "" );
	test( "\n" );
	test( "inn\n" );
	
	return 0;
}

