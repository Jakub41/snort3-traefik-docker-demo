#include <string.h>
#include <stdio.h>








static const char  _state_act_actions [] = { 0, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 2, 0, 2, 2, 1, 3, 0 ,  };
static const char  _state_act_trans_keys [] = { 1, 0, 3, 3, 0, 0, 2, 2, 2, 2, 2, 2, 0 ,  };
static const char  _state_act_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 0 ,  };
static const char  _state_act_index_offsets [] = { 0, 0, 1, 2, 3, 4, 0 ,  };
static const char  _state_act_indices [] = { 0, 2, 3, 3, 3, 0 ,  };
static const char  _state_act_index_defaults [] = { 0, 1, 1, 1, 1, 1, 0 ,  };
static const char  _state_act_trans_cond_spaces [] = { -1, -1, -1, -1, 0 ,  };
static const char  _state_act_cond_targs [] = { 2, 0, 5, 1, 0 ,  };
static const char  _state_act_cond_actions [] = { 0, 0, 9, 0, 0 ,  };
static const char  _state_act_to_state_actions [] = { 0, 0, 5, 1, 11, 1, 0 ,  };
static const char  _state_act_from_state_actions [] = { 0, 0, 7, 3, 14, 3, 0 ,  };
static const char  _state_act_nfa_targs [] = { 0, 0 ,  };
static const char  _state_act_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _state_act_nfa_push_actions [] = { 0, 0 ,  };
static const char  _state_act_nfa_pop_trans [] = { 0, 0 ,  };
static const int  state_act_start  = 4;
static const int  state_act_first_final  = 4;
static const int  state_act_error  = 0;
static const int  state_act_en_main  = 4;
static const int  state_act_en_main_line_again  = 3;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) state_act_start;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	
	{
		int _trans = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_acts = _state_act_actions + _state_act_from_state_actions[cs];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 1 :
				{
					printf( "%s", "a2\n" );
					
				}
				
				break;
				case 3 :
				{
					printf( "%s", "b2\n" );
					
				}
				
				break;
				case 5 :
				{
					printf( "%s", "c2\n" );
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		_keys = _state_act_trans_keys + (cs<<1);
		_inds = _state_act_indices + _state_act_index_offsets[cs];
		if ( ((*( p  ))
		)<= 105 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _state_act_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _state_act_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _state_act_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _state_act_cond_targs[_trans];
		if ( _state_act_cond_actions[_trans]== 0  )
		goto _again;
		
		
		_acts = _state_act_actions + _state_act_cond_actions[_trans];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 6 :
				{
					{
						cs = 3;
						
					}
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		_acts = _state_act_actions + _state_act_to_state_actions[cs];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf( "%s", "a1\n" );
					
				}
				
				break;
				case 2 :
				{
					printf( "%s", "b1\n" );
					
				}
				
				break;
				case 4 :
				{
					printf( "%s", "c1\n" );
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}

void finish( )
{
	if ( cs >= state_act_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"hi\nhi\n",
};

int inplen = 1;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

