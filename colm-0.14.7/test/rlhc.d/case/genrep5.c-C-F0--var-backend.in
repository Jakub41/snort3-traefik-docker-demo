host( "working/genrep5.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stddef.h>
	#include <stdint.h>
	#include <stdlib.h> 
	#include <stdbool.h>
	#include <string.h>
	#include <stdio.h>
	
	const char s[4096];
	
	struct nfa_stack
	{
		void *data;
		unsigned long sz;
	};
	
	struct nfa_bp_rec
	{
		long state;
		const char *p;
		long popTrans;
		long q_2;
	};
	
}@
array s8 _genrep_actions( 0, 8 ) = { 0, 0, 1, 0, 1, 1, 1, 6, 1, 0, 2, 1, 3, 2, 1, 4, 2, 1, 5, 3, 1, 8, 2, 0 };

array unsigned char _genrep_trans_keys( 0, 7 ) = { u(1), u(0), u(3), u(3), u(2), u(2), u(4), u(4), u(4), u(4), u(5), u(5), u(1), u(0), u(0), u(0), u(1), u(0), u(1), u(0), u(7), u(7), u(3), u(3), u(2), u(2), u(6), u(6), u(2), u(2), u(1), u(0), u(1), u(0), u(0) };

array s8 _genrep_char_class( 0, 7 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 1, 1, 6, 1, 7, 0 };

array s8 _genrep_index_offsets( 0, 11 ) = { 0, 0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 8, 9, 10, 11, 11, 0 };

array s8 _genrep_indices( 0, 11 ) = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 };

array s8 _genrep_index_defaults( 0, 12 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 0 };

array s8 _genrep_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _genrep_cond_targs( 0, 16 ) = { 2, 0, 3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 0 };

array s8 _genrep_cond_actions( 0, 8 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0 };

array s8 _genrep_nfa_targs( 0, 10 ) = { 0, 1, 7, 3, 10, 7, 9, 0 };

array s8 _genrep_nfa_offsets( 0, 3 ) = { 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _genrep_nfa_push_actions( 0, 1 ) = { 0, 0, 1, 0, 1, 1, 1, 0 };

array s8 _genrep_nfa_pop_trans( 0, 8 ) = { 0, 0, 4, 0, 8, 7, 6, 0 };

value int genrep_start = 1;
value int genrep_first_final = 16;
value int genrep_error = 0;

value int genrep_en_main = 1;

host( "working/genrep5.rl", 76 ) @{
	
	int test( const char *p )
	{
		int len = strlen( p ) + 1;
		const char *pe = p + len;
		int cs;
		
		struct nfa_bp_rec *nfa_bp = (struct nfa_bp_rec*) s;
		long nfa_len = 0;
		long nfa_count = 0;
		
		long q_2 = 0;
		
		printf( "testing: %s\n", p );
		
	}@
	{
		cs = cast(int)genrep_start;
		nfa_len = 0;
	}
	
	{
		uint _nfa_cont = 1;
		uint _nfa_repeat = 1;
		while ( _nfa_cont != 0 )
		{
			uint _trans = 0;
			uint _have = 0;
			uint _cont = 1;
			index s8 _acts;
			uint _nacts;
			index unsigned char _keys;
			index s8 _inds;
			while ( _cont == 1 ) {
				
				if ( cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						if ( _genrep_nfa_offsets[cs] ) {
							int alt = 0; 
							int new_recs = _genrep_nfa_targs[cast(int)_genrep_nfa_offsets[cs]];
							while ( alt < new_recs ) { 
								nfa_bp[nfa_len].state = _genrep_nfa_targs[cast(int)_genrep_nfa_offsets[cs] + 1 + alt];
								nfa_bp[nfa_len].p = p;
								nfa_bp[nfa_len].popTrans = cast(long)_genrep_nfa_offsets[cs] + 1 + alt;
								
								switch ( _genrep_nfa_push_actions[cast(int)_genrep_nfa_offsets[cs] + 1 + alt] ) {
									case 1 {
										host( "working/genrep5.rl", 33 ) ${
											nfa_bp[nfa_len].q_2 = q_2;
										}$
									}
								}
								nfa_len += 1;
								alt += 1;
							}
						}
						_keys = offset( _genrep_trans_keys, (cs<<1) );
						_inds = offset( _genrep_indices, _genrep_index_offsets[cs] );
						
						if ( ( deref( data, p )) <= 116 && ( deref( data, p )) >= 32 )
						{
							int _ic = cast(int)_genrep_char_class[cast(int)( deref( data, p )) - 32];
							if ( _ic <= cast(int)deref( _genrep_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _genrep_trans_keys, _keys ) )
							_trans = cast(uint)deref( _genrep_indices, _inds + cast(int)( _ic - cast(int)deref( _genrep_trans_keys, _keys ) )  ); 
							else
							_trans = cast(uint)_genrep_index_defaults[cs];
						}
						else {
							_trans = cast(uint)_genrep_index_defaults[cs];
						}
						
					}
					if ( _cont == 1 ) {
						cs = cast(int)_genrep_cond_targs[_trans];
						
						if ( _genrep_cond_actions[_trans] != 0 ) {
							_acts = offset( _genrep_actions, _genrep_cond_actions[_trans] );
							_nacts = cast(uint)deref( _genrep_actions, _acts );
							_acts += 1;
							while ( _nacts > 0 )
							{
								switch ( deref( _genrep_actions, _acts ) )
								{
									case 0 {
										host( "working/genrep5.rl", 71 ) ${
											printf( "------ MATCH\n" );
										}$
									}
								}
								_nacts -= 1;
								_acts += 1;
							}
						}
						
						if ( cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}}
			}
			_nfa_repeat = 1;
			while ( _nfa_repeat ) {
				_nfa_repeat = 0;
				if ( nfa_len > 0 ) {
					int _pop_test = 1;
					nfa_count += 1;
					nfa_len -= 1;
					p = nfa_bp[nfa_len].p;
					switch ( _genrep_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
						case 6 {
							_pop_test = host( "working/genrep5.rl", 38 ) ={ ({
									q_2 = nfa_bp[nfa_len].q_2;
									1;
								}) }=;
							if ( !_pop_test ) break;
							_pop_test = host( "working/genrep5.rl", 47 ) ={
								({ 1; })
							}=;
							
						}
						case 7 {
							_pop_test = host( "working/genrep5.rl", 38 ) ={ ({
									q_2 = nfa_bp[nfa_len].q_2;
									1;
								}) }=;
							if ( !_pop_test ) break;
							_pop_test = host( "working/genrep5.rl", 51 ) ={
								({ ++q_2 < 2; })
							}=;
							
						}
						case 8 {
							_pop_test = host( "working/genrep5.rl", 38 ) ={ ({
									q_2 = nfa_bp[nfa_len].q_2;
									1;
								}) }=;
							if ( !_pop_test ) break;
							_pop_test = host( "working/genrep5.rl", 55 ) ={
								({ ++q_2 >= 2; })
							}=;
							
						}
						case 4 {
							_pop_test = host( "working/genrep5.rl", 38 ) ={ ({
									q_2 = nfa_bp[nfa_len].q_2;
									1;
								}) }=;
							if ( !_pop_test ) break;
							host( "working/genrep5.rl", 60 ) ${
								printf( "  -> leaving\n" );
							}$
							_pop_test = host( "working/genrep5.rl", 43 ) ={
								({  q_2 = 0; 1; })
							}=;
							
						}
					}
					if ( _pop_test ) {
						cs = nfa_bp[nfa_len].state;
						_nfa_cont = 1;
						_nfa_repeat = 0;
					}
					else {
						_nfa_cont = 0;
						_nfa_repeat = 1;
					}
				}
				else {
					_nfa_cont = 0;
					_nfa_repeat = 0;
				}
			}
		}
	}
	host( "working/genrep5.rl", 96 ) @{
		
		return 0;
	}
	
	int main()
	{
		test( "hellothere" );
		test( "hello there" );
		test( "hello  there" );
		test( "hello   there" );
		test( "hello    there" );
		return 0;
	}
	
}@