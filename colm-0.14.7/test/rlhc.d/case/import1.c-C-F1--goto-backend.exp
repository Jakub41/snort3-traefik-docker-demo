#include <stdio.h>

char *foo = "foo";

char b = 98;
char a = 97;
char r = 114;

#define SP 32
#define NL '\n'



static const char  _tmp_trans_keys [] = { 1, 0, 3, 3, 7, 7, 2, 2, 4, 5, 3, 3, 7, 7, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 4, 5, 0 ,  };
static const char  _tmp_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 7, 0 ,  };
static const char  _tmp_index_offsets [] = { 0, 0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 0 ,  };
static const char  _tmp_indices [] = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 ,  };
static const char  _tmp_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _tmp_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _tmp_cond_targs [] = { 2, 0, 3, 4, 5, 8, 6, 7, 12, 9, 7, 11, 3, 1, 10, 0 ,  };
static const char  _tmp_cond_actions [] = { 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 0, 0 ,  };
static const char  _tmp_nfa_targs [] = { 0, 0 ,  };
static const char  _tmp_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _tmp_nfa_push_actions [] = { 0, 0 ,  };
static const char  _tmp_nfa_pop_trans [] = { 0, 0 ,  };
static const int  tmp_start  = 12;
static const int  tmp_first_final  = 12;
static const int  tmp_error  = 0;
static const int  tmp_en_main  = 12;
int cs;

void exec_str( char *p, int len )
{
	char *pe = p + len;
	
	{
		int _trans = 0;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_keys = _tmp_trans_keys + (cs<<1);
		_inds = _tmp_indices + _tmp_index_offsets[cs];
		if ( ((*( p  ))
		)<= 114 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _tmp_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _tmp_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _tmp_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _tmp_cond_targs[_trans];
		if ( _tmp_cond_actions[_trans]== 0  )
		goto _again;
		
		
		switch ( _tmp_cond_actions[_trans] ) {
			case 2 :
			{
				printf("foo\n"); 
			}
			
			break;
			case 1 :
			{
				printf("bar\n");
			}
			
			break;
			
		}
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
	}
}

void exec_c( char c )
{
	exec_str( &c, 1 );
}

int main()
{

	{
		cs = ( int ) tmp_start;
	}
	exec_str( foo, 3 );
	exec_c( SP );
	exec_c( b );
	exec_c( a );
	exec_c( r );
	exec_c( NL );
	
	exec_c( b );
	exec_c( a );
	exec_c( r );
	exec_c( SP );
	exec_str( foo, 3 );
	exec_c( NL );
	
	if ( cs < tmp_first_final )
	printf("FAIL\n");
	else
	printf("ACCEPT\n");
	
	return 0;
}

