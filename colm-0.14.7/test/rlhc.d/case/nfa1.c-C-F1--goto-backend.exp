#include <string.h>
#include <stdio.h>

int neg ;
long value ;

struct nfa_bp_rec
{
	long state;
	char *p;
	int pop;
};

struct nfa_bp_rec nfa_bp[1024];
long nfa_len = 0;
long nfa_count = 0;



static const char  _atoi_trans_keys [] = { 1, 0, 2, 5, 4, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 1, 0, 4, 5, 4, 5, 4, 5, 0, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 0, 5, 1, 0, 0 ,  };
static const char  _atoi_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 ,  };
static const char  _atoi_index_offsets [] = { 0, 0, 4, 6, 12, 18, 24, 30, 36, 36, 38, 40, 42, 48, 50, 52, 54, 56, 58, 64, 0 ,  };
static const char  _atoi_indices [] = { 0, 2, 3, 4, 5, 5, 6, 1, 1, 1, 5, 5, 6, 1, 1, 1, 7, 8, 6, 1, 1, 1, 9, 8, 6, 1, 1, 1, 10, 8, 6, 1, 1, 1, 11, 8, 12, 13, 14, 13, 15, 13, 16, 1, 1, 1, 15, 15, 17, 13, 18, 13, 19, 13, 20, 13, 21, 13, 6, 1, 1, 1, 22, 8, 0 ,  };
static const char  _atoi_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _atoi_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _atoi_cond_targs [] = { 2, 0, 2, 4, 18, 3, 19, 5, 18, 6, 7, 8, 10, 13, 11, 12, 19, 14, 15, 16, 17, 9, 4, 0 ,  };
static const char  _atoi_cond_actions [] = { 1, 0, 2, 3, 3, 4, 5, 4, 4, 4, 4, 4, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 4, 0 ,  };
static const char  _atoi_nfa_targs [] = { 0, 2, 3, 9, 0 ,  };
static const char  _atoi_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _atoi_nfa_push_actions [] = { 0, 0, 0, 0, 0 ,  };
static const char  _atoi_nfa_pop_trans [] = { 0, 0, 0, 0, 0 ,  };
static const int  atoi_start  = 1;
static const int  atoi_first_final  = 19;
static const int  atoi_error  = 0;
static const int  atoi_en_main  = 1;
int cs;
int blen;
char buffer[1024];

void init()
{
	value = 0;
	neg = 0;
	
	{
		cs = ( int ) atoi_start;
		nfa_len = 0;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	
	{
		int _trans = 0;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		if ( _atoi_nfa_offsets[cs] )
		{
			int alt = 0; 
			int new_recs = _atoi_nfa_targs[( int ) _atoi_nfa_offsets[cs]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _atoi_nfa_targs[( int ) _atoi_nfa_offsets[cs]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		_keys = _atoi_trans_keys + (cs<<1);
		_inds = _atoi_indices + _atoi_index_offsets[cs];
		if ( ((*( p  ))
		)<= 57 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _atoi_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _atoi_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _atoi_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _atoi_cond_targs[_trans];
		if ( _atoi_cond_actions[_trans]== 0  )
		goto _again;
		
		
		switch ( _atoi_cond_actions[_trans] ) {
			case 1 :
			{
				neg = 0;
				value = 0;
				
			}
			
			break;
			case 4 :
			{
				value = value * 10 + ( int ) ( (((*( p  ))
				)) - 48 );
				
			}
			
			break;
			case 7 :
			{
				printf( "saw 80808080\n" );
				
			}
			
			break;
			case 2 :
			{
				neg = 0;
				value = 0;
				
			}
			{
				neg = 1;
				
			}
			
			break;
			case 3 :
			{
				neg = 0;
				value = 0;
				
			}
			{
				value = value * 10 + ( int ) ( (((*( p  ))
				)) - 48 );
				
			}
			
			break;
			case 5 :
			{
				if ( neg != 0 ) { value = -1 * value; }
				
			}
			{
				printf( "%ld", value );
				printf( "%s", "\n" );
				
			}
			
			break;
			
		}
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
		if ( nfa_len > 0  )
		{
			nfa_count += 1;
			nfa_len -= 1;
			p = nfa_bp[nfa_len].p;
			cs = nfa_bp[nfa_len].state;
			goto _resume;
			goto _out;
		}
		
	}
}

void finish( )
{
	if ( cs >= atoi_first_final )
	printf( "-> accept\n\n" );
	else
	printf( "-> fail\n\n" );
}

char *inp[] = {
	"1\n",
	"12\n",
	"1002000000002\n",
	"222222\n",
	"+2123\n",
	"-12321\n",
	"-99\n",
	"213 3213\n",
	"--123\n",
	" -3000\n",
};

int inplen = 10;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

