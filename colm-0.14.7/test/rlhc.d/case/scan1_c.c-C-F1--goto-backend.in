host( "working/scan1_c.rl", 1 ) @{/*
	* @@LANG: c
	* @@GENERATED: true
	*/
	
	#include <string.h>
	#include <stdio.h>
	
	char * ts ;
	char * te ;
	int act ;
	int token ;
	
	
	
	
	
}@
array char _scanner_trans_keys( 0, 10 ) = { 1, 0, 2, 9, 4, 4, 10, 10, 10, 10, 10, 10, 2, 9, 0, 9, 7, 7, 9, 9, 2, 9, 0 };

array s8 _scanner_char_class( 0, 10 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 4, 5, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 7, 8, 9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 0 };

array s8 _scanner_index_offsets( 0, 32 ) = { 0, 0, 8, 9, 10, 11, 12, 20, 30, 31, 32, 0 };

array s8 _scanner_indices( 0, 18 ) = { 1, 2, 2, 2, 0, 0, 0, 2, 3, 6, 7, 8, 1, 2, 9, 10, 4, 4, 4, 2, 11, 4, 4, 2, 2, 2, 12, 13, 14, 15, 13, 18, 1, 2, 2, 2, 0, 0, 0, 2, 0 };

array s8 _scanner_index_defaults( 0, 17 ) = { 0, 0, 4, 5, 5, 5, 4, 4, 16, 17, 0, 0 };

array s8 _scanner_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _scanner_cond_targs( 0, 10 ) = { 7, 7, 1, 9, 0, 7, 4, 5, 7, 10, 10, 7, 7, 8, 2, 6, 7, 7, 3, 0 };

array s8 _scanner_cond_actions( 0, 13 ) = { 1, 2, 0, 3, 0, 4, 0, 0, 5, 6, 7, 10, 11, 0, 0, 0, 12, 13, 0, 0 };

array s8 _scanner_to_state_actions( 0, 8 ) = { 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0 };

array s8 _scanner_from_state_actions( 0, 9 ) = { 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0 };

array s8 _scanner_eof_trans( 0, 18 ) = { 0, 1, 0, 6, 6, 6, 0, 0, 17, 18, 1, 0 };

array s8 _scanner_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _scanner_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _scanner_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int scanner_start = 7;
value int scanner_first_final = 7;
value int scanner_error = 0;

value int scanner_en_main = 7;

host( "working/scan1_c.rl", 73 ) @{
	int cs;
	int blen;
	char buffer[1024];
	
	void init()
	{
	}@
	{
		cs = cast(int)scanner_start;
		ts = nil;
		te = nil;
		act = 0;
	}
	host( "working/scan1_c.rl", 80 ) @{
	}
	
	void exec( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
		char *eof = pe;
	}@
	{
		int _trans = 0;
		index char _keys;
		index s8 _inds;
		entry {
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume {
				switch ( _scanner_from_state_actions[cs] ) {
					case 9 {
						host( "NONE", 1 ) ${${ts = p;}$}$
					}
				}
				
				_keys = offset( _scanner_trans_keys, (cs<<1) );
				_inds = offset( _scanner_indices, _scanner_index_offsets[cs] );
				
				if ( ( deref( data, p )) <= 120 && ( deref( data, p )) >= 10 )
				{
					int _ic = cast(int)_scanner_char_class[cast(int)( deref( data, p )) - 10];
					if ( _ic <= cast(int)deref( _scanner_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _scanner_trans_keys, _keys ) )
					_trans = cast(int)deref( _scanner_indices, _inds + cast(int)( _ic - cast(int)deref( _scanner_trans_keys, _keys ) )  ); 
					else
					_trans = cast(int)_scanner_index_defaults[cs];
				}
				else {
					_trans = cast(int)_scanner_index_defaults[cs];
				}
				
				goto _match_cond;
			}
			label _match_cond {
				cs = cast(int)_scanner_cond_targs[_trans];
				
				if ( _scanner_cond_actions[_trans] == 0 )
				goto _again;
				
				switch ( _scanner_cond_actions[_trans] ) {
					case 3 {
						host( "NONE", 1 ) ${${te = p+1;}$}$
					}
					case 11 {
						host( "working/scan1_c.rl", 20 ) ${${te = p+1;host( "working/scan1_c.rl", 20 ) ${printf( "%s", "on last     " );
									if ( p + 1 == te )
									{
										printf( "%s", "yes" );
										
									} 
									printf( "%s", "\n" );
								}$}$}$
					}
					case 5 {
						host( "working/scan1_c.rl", 38 ) ${${te = p+1;host( "working/scan1_c.rl", 38 ) ${printf( "%s", "on lag      " );
									if ( p + 1 == te )
									{
										printf( "%s", "yes" );
										
									} 
									printf( "%s", "\n" );
								}$}$}$
					}
					case 2 {
						host( "working/scan1_c.rl", 64 ) ${${te = p+1;}$}$
					}
					case 10 {
						host( "working/scan1_c.rl", 66 ) ${${te = p+1;}$}$
					}
					case 12 {
						host( "working/scan1_c.rl", 29 ) ${${te = p;p = p - 1;host( "working/scan1_c.rl", 29 ) ${printf( "%s", "on next     " );
									if ( p + 1 == te )
									{
										printf( "%s", "yes" );
										
									} 
									printf( "%s", "\n" );
								}$}$}$
					}
					case 13 {
						host( "working/scan1_c.rl", 38 ) ${${te = p;p = p - 1;host( "working/scan1_c.rl", 38 ) ${printf( "%s", "on lag      " );
									if ( p + 1 == te )
									{
										printf( "%s", "yes" );
										
									} 
									printf( "%s", "\n" );
								}$}$}$
					}
					case 4 {
						host( "working/scan1_c.rl", 38 ) ${${p = ((te))-1;
								host( "working/scan1_c.rl", 38 ) ${printf( "%s", "on lag      " );
									if ( p + 1 == te )
									{
										printf( "%s", "yes" );
										
									} 
									printf( "%s", "\n" );
								}$}$}$
					}
					case 1 {
						host( "NONE", 1 ) ${${switch( act ) {
									case 0 {
										host( "NONE", 1 ) ${${cs = 0; goto _again;}$}$ }
									case 4 {
										p = ((te))-1;
										host( "working/scan1_c.rl", 47 ) ${printf( "%s", "lm switch1  " );
											if ( p + 1 == te )
											{
												printf( "%s", "yes" );
												
											} 
											printf( "%s", "\n" );
										}$ }
									case 5 {
										p = ((te))-1;
										host( "working/scan1_c.rl", 55 ) ${printf( "%s", "lm switch2  " );
											if ( p + 1 == te )
											{
												printf( "%s", "yes" );
												
											} 
											printf( "%s", "\n" );
										}$ }
								}}$
						}$
					}
					case 6 {
						host( "NONE", 1 ) ${${te = p+1;}$}$	host( "working/scan1_c.rl", 47 ) ${${act = 4;}$}$
					}
					case 7 {
						host( "NONE", 1 ) ${${te = p+1;}$}$	host( "working/scan1_c.rl", 55 ) ${${act = 5;}$}$
					}
				}
				
				
			}
			label _again {
				switch ( _scanner_to_state_actions[cs] ) {
					case 8 {
						host( "NONE", 1 ) ${${ts = nil;}$}$	host( "NONE", 1 ) ${${act = 0;}$}$
					}
				}
				
				if ( cs == 0 )
				goto _out;
				p+= 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
				if ( p == eof )
				{
					if ( _scanner_eof_trans[cs] > 0 ) {
						_trans = cast(int)_scanner_eof_trans[cs] - 1;
						goto _match_cond;
					}
				}
				
			}
			label _out { {}
			}
		}
	}
	host( "working/scan1_c.rl", 88 ) @{
	}
	
	void finish( )
	{
		if ( cs >= scanner_first_final )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	char *inp[] = {
		"abbc1d1d2\n",
	};
	
	int inplen = 1;
	
	int main( )
	{
		int i;
		for ( i = 0; i < inplen; i++ ) {
			init();
			exec( inp[i], strlen(inp[i]) );
			finish();
		}
		return 0;
	}
	
}@