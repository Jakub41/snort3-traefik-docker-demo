host( "working/genrep4.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stddef.h>  /* NULL */
	#include <stdint.h>  /* uint64_t */
	#include <stdlib.h>  /* malloc(3) free(3) */
	#include <stdbool.h> /* bool */
	#include <string.h>
	#include <stdio.h>
	
	struct nfa_bp_rec
	{
		long state;
		const unsigned char *p;
		int popTrans;
		long q_2;
	};
	
	struct nfa_bp_rec nfa_bp[1024];
	long nfa_len = 0;
	long nfa_count = 0;
	
	long c;
	
	struct nfa_state_rec
	{
		long c;
	};
	
	struct nfa_state_rec nfa_s[1024];
	
	void nfa_push()
	{
		nfa_s[nfa_len].c = c;
	}
	
	void nfa_pop()
	{
		c = nfa_s[nfa_len].c;
	}
	
	long q_2;
	
}@
array s8 _match_any_key_offsets( 0, 4 ) = { 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 0 };

array unsigned char _match_any_trans_keys( 0, 97 ) = { u(97), u(32), u(97), u(32), u(0) };

array s8 _match_any_single_lengths( 0, 1 ) = { 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0 };

array s8 _match_any_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _match_any_index_offsets( 0, 14 ) = { 0, 0, 1, 3, 4, 5, 7, 8, 10, 11, 13, 14, 0 };

array s8 _match_any_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0 };

array s8 _match_any_trans_offsets( 0, 14 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 };

array s8 _match_any_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _match_any_cond_keys( 0, 1 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 };

array s8 _match_any_cond_targs( 0, 11 ) = { 0, 3, 0, 0, 0, 6, 0, 0, 8, 0, 0, 10, 0, 11, 0, 0 };

array s8 _match_any_cond_actions( 0, 9 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0 };

array s8 _match_any_nfa_targs( 0, 9 ) = { 0, 1, 2, 3, 5, 2, 4, 1, 7, 3, 9, 7, 4, 0 };

array s8 _match_any_nfa_offsets( 0, 9 ) = { 0, 1, 0, 3, 0, 0, 7, 0, 9, 0, 0, 0, 0 };

array s8 _match_any_nfa_push_actions( 0, 1 ) = { 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0 };

array s8 _match_any_nfa_pop_trans( 0, 8 ) = { 0, 0, 4, 0, 7, 6, 5, 0, 8, 0, 7, 6, 5, 0 };

value int match_any_start = 1;
value int match_any_first_final = 11;
value int match_any_error = 0;

value int match_any_en_main = 1;

host( "working/genrep4.rl", 91 ) @{
	
	int test( const char *data )
	{
		int cs;
		const unsigned char *p = (const unsigned char *)data;
		const unsigned char *pe = p + strlen(data) + 1;
		const unsigned char *eof = pe;
		
		printf( "%s\n", data );
		
	}@
	{
		cs = cast(int)match_any_start;
		nfa_len = 0;
	}
	host( "working/genrep4.rl", 103 ) @{
	}@
	{
		int _klen;
		index unsigned char _keys;
		index s8 _ckeys;
		int _cpc;
		uint _trans = 0;
		uint _cond = 0;
		entry {
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			label _resume { 
				if ( _match_any_nfa_offsets[cs] ) {
					int alt = 0; 
					int new_recs = _match_any_nfa_targs[cast(int)_match_any_nfa_offsets[cs]];
					while ( alt < new_recs ) { 
						nfa_bp[nfa_len].state = _match_any_nfa_targs[cast(int)_match_any_nfa_offsets[cs] + 1 + alt];
						nfa_bp[nfa_len].p = p;
						nfa_bp[nfa_len].popTrans = cast(long)_match_any_nfa_offsets[cs] + 1 + alt;
						
						switch ( _match_any_nfa_push_actions[cast(int)_match_any_nfa_offsets[cs] + 1 + alt] ) {
							case 1 {
								host( "working/genrep4.rl", 54 ) ${
									nfa_bp[nfa_len].q_2 = q_2;
								}$
							}
						}
						nfa_len += 1;
						alt += 1;
					}
				}
				_keys = offset( _match_any_trans_keys, _match_any_key_offsets[cs] );
				_trans = cast(uint)_match_any_index_offsets[cs];
				
				_klen = cast(int)_match_any_single_lengths[cs];
				if ( _klen > 0 ) {
					index unsigned char _lower;
					index unsigned char _mid;
					index unsigned char _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _match_any_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _match_any_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							goto _match;
						}
					}
					_keys += _klen;
					_trans += cast(uint)_klen;
				}
				
				_klen = cast(int)_match_any_range_lengths[cs];
				if ( _klen > 0 ) {
					index unsigned char _lower;
					index unsigned char _mid;
					index unsigned char _upper;
					_lower = _keys;
					_upper = _keys + (_klen<<1) - 2;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + (((_upper-_lower) >> 1) & ~1);
						if ( ( deref( data, p )) < deref( _match_any_trans_keys, _mid ) )
						_upper = _mid - 2;
						else if ( ( deref( data, p )) > deref( _match_any_trans_keys, _mid + 1 ) )
						_lower = _mid + 2;
						else {
							_trans += cast(uint)((_mid - _keys)>>1);
							goto _match;
						}
					}
					_trans += cast(uint)_klen;
				}
				
			}
			label _match {
				_ckeys = offset( _match_any_cond_keys, _match_any_trans_offsets[_trans] );
				_klen = cast(int)_match_any_trans_lengths[_trans];
				_cond = cast(uint)_match_any_trans_offsets[_trans];
				
				_cpc = 0;
				switch ( _match_any_trans_cond_spaces[_trans] ) {
					
					case 0 {
						if ( host( "working/genrep4.rl", 49 ) ={ p+1 == eof }= ) _cpc += 1;
					}
					case 1 {
						if ( host( "working/genrep4.rl", 81 ) ={ ({printf("  marker\n");1;}) }= ) _cpc += 1;
					}
				}
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( TRUE ) {
						if ( _upper < _lower )
						break;
						
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _match_any_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _match_any_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							goto _match_cond;
						}
					}
					cs = 0;
					goto _again;
				}
			}
			label _match_cond {
				cs = cast(int)_match_any_cond_targs[_cond];
				
				if ( _match_any_cond_actions[_cond] == 0 )
				goto _again;
				
				switch ( _match_any_cond_actions[_cond] ) {
					case 9 {
						host( "working/genrep4.rl", 87 ) ${printf("----- MATCH\n");}$
					}
				}
				
				
			}
			label _again {
				if ( cs == 0 )
				goto _out;
				p += 1;
				if ( p != pe )
				goto _resume;
			}
			label _test_eof { {}
			}
			label _out { {}
			}
		}
		if ( nfa_len > 0 ) {
			nfa_count += 1;
			nfa_len -= 1;
			p = nfa_bp[nfa_len].p;
			int _pop_test = 1;
			switch ( _match_any_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
				case 5 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 68 ) ={
						({ 1; })
					}=;
					
				}
				case 6 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 72 ) ={
						({ ++q_2 < 3; })
					}=;
					
				}
				case 7 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 76 ) ={
						({ ++q_2 >= 2; })
					}=;
					
				}
				case 4 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_cpc = 0;
					if ( host( "working/genrep4.rl", 81 ) ={ ({printf("  marker\n");1;}) }= ) _cpc += 1;
					_pop_test = _cpc == 1;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 64 ) ={
						({  q_2 = 0; 1; })
					}=;
					
				}
				case 8 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_cpc = 0;
					if ( host( "working/genrep4.rl", 81 ) ={ ({printf("  marker\n");1;}) }= ) _cpc += 1;
					_pop_test = _cpc == 1;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 64 ) ={
						({  q_2 = 0; 1; })
					}=;
					
				}
			}
			if ( _pop_test ) {
				cs = nfa_bp[nfa_len].state;
				goto _resume;
			}
			goto _out;
		}
	}
	host( "working/genrep4.rl", 104 ) @{
		
		return 0;
	}
	
	int main()
	{
		test( "a " );
		test( "aa " );
		test( "aaa " );
		test( "aaaa " );
		
		test( "a a " );
		test( "aa aa " );
		test( "aaa aaa " );
		test( "aaaa aaaa " );
		
		test( "a a a " );
		test( "aa aa aa " );
		test( "aaa aaa aaa " );
		test( "aaaa aaaa aaaa " );
		
		test( "aa a " );
		test( "aa aaa " );
		test( "aa aaaa " );
		
		test( "aaa a " );
		test( "aaa aa " );
		test( "aaa aaaa " );
		
		return 0;
	}
	
}@