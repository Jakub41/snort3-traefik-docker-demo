#include <stddef.h>
#include <stdint.h>
#include <stdlib.h> 
#include <stdbool.h>
#include <string.h>
#include <stdio.h>

const char s[4096];

struct nfa_stack
{
	void *data;
	unsigned long sz;
};

struct nfa_bp_rec
{
	long state;
	const char *p;
	long popTrans;
	long q_2;
};

static const unsigned char  _genrep_trans_keys [] = { 1u, 0u, 3u, 3u, 2u, 2u, 4u, 4u, 4u, 4u, 5u, 5u, 1u, 0u, 0u, 0u, 1u, 0u, 1u, 0u, 7u, 7u, 3u, 3u, 2u, 2u, 6u, 6u, 2u, 2u, 1u, 0u, 1u, 0u, 0u,  };
static const char  _genrep_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 1, 1, 6, 1, 7, 0 ,  };
static const char  _genrep_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 8, 9, 10, 11, 11, 0 ,  };
static const char  _genrep_indices [] = { 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0 ,  };
static const char  _genrep_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 1, 0 ,  };
static const char  _genrep_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _genrep_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0 ,  };
static const char  _genrep_cond_targs [] = { 2, 0, 3, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 0 ,  };
static const char  _genrep_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0 ,  };
static const char  _genrep_nfa_targs [] = { 0, 1, 7, 3, 10, 7, 9, 0 ,  };
static const char  _genrep_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _genrep_nfa_push_actions [] = { 0, 0, 1, 0, 1, 1, 1, 0 ,  };
static const char  _genrep_nfa_pop_trans [] = { 0, 0, 4, 0, 7, 6, 5, 0 ,  };
static const int  genrep_start  = 1;
static const int  genrep_first_final  = 16;
static const int  genrep_error  = 0;
static const int  genrep_en_main  = 1;
int test( int c1, int c2, const char *p )
{
	int len = strlen( p ) + 1;
	const char *pe = p + len;
	int cs;
	
	struct nfa_bp_rec *nfa_bp = (struct nfa_bp_rec*) s;
	long nfa_len = 0;
	long nfa_count = 0;
	long q_2 = 0;
	
	printf( "testing: %s\n", p );
	
	
	{
		cs = ( int ) genrep_start;
		nfa_len = 0;
	}
	
	{
		int _trans = 0;
		unsigned int _cond = 0;
		const unsigned char  *_keys;
		const char  *_inds;
		int _cpc;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		if ( _genrep_nfa_offsets[cs] )
		{
			int alt = 0; 
			int new_recs = _genrep_nfa_targs[( int ) _genrep_nfa_offsets[cs]];
			while ( alt < new_recs  )
			{ 
				nfa_bp[nfa_len].state 
				= _genrep_nfa_targs[( int ) _genrep_nfa_offsets[cs]+ 1 + alt];
				nfa_bp[nfa_len].p 
				= p;
				nfa_bp[nfa_len].popTrans 
				= ( long ) _genrep_nfa_offsets[cs]+ 1 + alt;
				switch ( _genrep_nfa_push_actions[( int ) _genrep_nfa_offsets[cs]+ 1 + alt] ) {
					case 1 :
					{
						nfa_bp[nfa_len].q_2 = q_2;
						
					}
					
					break;
					
				}
				nfa_len += 1;
				alt += 1;
			}
			
		}
		
		_keys = _genrep_trans_keys + (cs<<1);
		_inds = _genrep_indices + _genrep_index_offsets[cs];
		if ( ((*( p  ))
		)<= 116 && ((*( p  ))
		)>= 32  )
		{
			int _ic = ( int ) _genrep_char_class[( int ) ((*( p  ))
			)- 32];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _genrep_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _genrep_index_defaults[cs];
		}
		
		
		_cond = ( unsigned int  ) _genrep_trans_offsets[_trans];
		_cpc = 0;
		switch ( _genrep_trans_cond_spaces[_trans] ) {
		
		}
		_cond += ( unsigned int  ) _cpc;
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _genrep_cond_targs[_cond];
		if ( _genrep_cond_actions[_cond]== 0  )
		goto _again;
		
		
		switch ( _genrep_cond_actions[_cond] ) {
			case 8 :
			{
				printf( "------ MATCH\n" );
				
			}
			
			break;
			
		}
		
		_again :
		if ( cs == 0  )
		goto _out;
		
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		
		_out :
		{}
		
		if ( nfa_len > 0  )
		{
			nfa_count += 1;
			nfa_len -= 1;
			p = nfa_bp[nfa_len].p;
			int _pop_test = 1;
			switch ( _genrep_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
				case 5 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ 1; })
				);
				
				break;
				case 6 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ ++q_2 < 1; })
				);
				
				break;
				case 7 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_pop_test = (({ ++q_2 >= 1; })
				);
				
				break;
				case 4 :
				_pop_test = (({
					q_2 = nfa_bp[nfa_len].q_2;
					1;
				}) );
				if ( !_pop_test  )
				break;
				
				_cpc = 0;
				if ( (({ printf( "  -> c1\n"); c1; }) ) )
				_cpc += 1;
				
				if ( (({ printf( "  -> c2\n"); c2; }) ) )
				_cpc += 2;
				
				_pop_test = _cpc == 1 || _cpc == 2 || _cpc == 3;
				if ( !_pop_test  )
				break;
				
				_pop_test = (({  q_2 = 0; 1; })
				);
				
				break;
				
			}
			if ( _pop_test  )
			{
				cs = nfa_bp[nfa_len].state;
				goto _resume;
			}
			
			goto _out;
		}
		
	}
	return 0;
}

int main()
{
	test( 0, 0, "hellothere" );
	test( 0, 0, "hello there" );
	test( 0, 0, "hello  there" );
	
	printf( "------------\n" );
	
	test( 0, 1, "hellothere" );
	test( 0, 1, "hello there" );
	test( 0, 1, "hello  there" );
	
	printf( "------------\n" );
	
	test( 1, 0, "hellothere" );
	test( 1, 0, "hello there" );
	test( 1, 0, "hello  there" );
	
	printf( "------------\n" );
	
	test( 1, 1, "hellothere" );
	test( 1, 1, "hello there" );
	test( 1, 1, "hello  there" );
	
	return 0;
}

