#include <stddef.h>  /* NULL */
#include <stdint.h>  /* uint64_t */
#include <stdlib.h>  /* malloc(3) free(3) */
#include <stdbool.h> /* bool */
#include <string.h>
#include <stdio.h>

struct nfa_bp_rec
{
	long state;
	const unsigned char *p;
	int popTrans;
	long q_2;
};

struct nfa_bp_rec nfa_bp[1024];
long nfa_len = 0;
long nfa_count = 0;

long c;

struct nfa_state_rec
{
	long c;
};

struct nfa_state_rec nfa_s[1024];

void nfa_push()
{
	nfa_s[nfa_len].c = c;
}

void nfa_pop()
{
	c = nfa_s[nfa_len].c;
}

long q_2;

static const char  _match_any_key_offsets [] = { 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 0 ,  };
static const unsigned char  _match_any_trans_keys [] = { 97u, 32u, 97u, 32u, 0u,  };
static const char  _match_any_single_lengths [] = { 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0 ,  };
static const char  _match_any_range_lengths [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _match_any_index_offsets [] = { 0, 0, 1, 3, 4, 5, 7, 8, 10, 11, 13, 14, 0 ,  };
static const char  _match_any_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0 ,  };
static const char  _match_any_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 0 ,  };
static const char  _match_any_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _match_any_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 ,  };
static const char  _match_any_cond_targs [] = { 0, 3, 0, 0, 0, 6, 0, 0, 8, 0, 0, 10, 0, 11, 0, 0 ,  };
static const char  _match_any_cond_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0 ,  };
static const char  _match_any_nfa_targs [] = { 0, 1, 2, 3, 5, 2, 4, 1, 7, 3, 9, 7, 4, 0 ,  };
static const char  _match_any_nfa_offsets [] = { 0, 1, 0, 3, 0, 0, 7, 0, 9, 0, 0, 0, 0 ,  };
static const char  _match_any_nfa_push_actions [] = { 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0 ,  };
static const char  _match_any_nfa_pop_trans [] = { 0, 0, 4, 0, 7, 6, 5, 0, 8, 0, 7, 6, 5, 0 ,  };
static const int  match_any_start  = 1;
static const int  match_any_first_final  = 11;
static const int  match_any_error  = 0;
static const int  match_any_en_main  = 1;
int test( const char *data )
{
	int cs;
	const unsigned char *p = (const unsigned char *)data;
	const unsigned char *pe = p + strlen(data) + 1;
	const unsigned char *eof = pe;
	
	printf( "%s\n", data );
	
	
	{
		cs = ( int ) match_any_start;
		nfa_len = 0;
	}
	
	{
		unsigned int _nfa_cont = 1;
		unsigned int _nfa_repeat = 1;
		while ( _nfa_cont != 0  )
		{
			int _klen;
			const unsigned char  *_keys;
			const char  *_ckeys;
			int _cpc;
			unsigned int _trans;
			unsigned int _cond = 0;
			unsigned int _have = 0;
			unsigned int _cont = 1;
			while ( _cont == 1  )
			{
			
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( _have == 0  )
					_cont = 0;
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						if ( _match_any_nfa_offsets[cs] )
						{
							int alt = 0; 
							int new_recs = _match_any_nfa_targs[( int ) _match_any_nfa_offsets[cs]];
							while ( alt < new_recs  )
							{ 
								nfa_bp[nfa_len].state 
								= _match_any_nfa_targs[( int ) _match_any_nfa_offsets[cs]+ 1 + alt];
								nfa_bp[nfa_len].p 
								= p;
								nfa_bp[nfa_len].popTrans 
								= ( long ) _match_any_nfa_offsets[cs]+ 1 + alt;
								switch ( _match_any_nfa_push_actions[( int ) _match_any_nfa_offsets[cs]+ 1 + alt] ) {
									case 1 :
									{
										nfa_bp[nfa_len].q_2 = q_2;
										
									}
									
									break;
									
								}
								nfa_len += 1;
								alt += 1;
							}
							
						}
						
						_keys = _match_any_trans_keys + _match_any_key_offsets[cs];
						_trans = ( unsigned int  ) _match_any_index_offsets[cs];
						_have = 0;
						_klen = ( int ) _match_any_single_lengths[cs];
						if ( _klen > 0  )
						{
							const unsigned char  *_lower;
							const unsigned char  *_mid;
							const unsigned char  *_upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0  )
							{
								_mid = _lower + ((_upper-_lower)>> 1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 1;
								
								else if ( ((*( p  ))
								)> (*( _mid  ))
								)
								_lower = _mid + 1;
								
								else
								{
									_trans += ( unsigned int  ) (_mid - _keys);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							{
								_keys += _klen;
								_trans += ( unsigned int  ) _klen;
							}
							
						}
						
						
						if ( _have == 0  )
						{
							_klen = ( int ) _match_any_range_lengths[cs];
							if ( _klen > 0  )
							{
								const unsigned char  *_lower;
								const unsigned char  *_mid;
								const unsigned char  *_upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1)- 2;
								while ( _have == 0 && _lower <= _upper  )
								{
									_mid = _lower + (((_upper-_lower)>> 1)& ~1);
									if ( ((*( p  ))
									)< (*( _mid  ))
									)
									_upper = _mid - 2;
									
									else if ( ((*( p  ))
									)> (*( _mid + 1  ))
									)
									_lower = _mid + 2;
									
									else
									{
										_trans += ( unsigned int  ) ((_mid - _keys)>>1);
										_have = 1;
									}
									
								}
								
								if ( _have == 0  )
								_trans += ( unsigned int  ) _klen;
								
							}
							
						}
						
						
						_ckeys = _match_any_cond_keys + _match_any_trans_offsets[_trans];
						_klen = ( int ) _match_any_trans_lengths[_trans];
						_cond = ( unsigned int  ) _match_any_trans_offsets[_trans];
						_have = 0;
						_cpc = 0;
						switch ( _match_any_trans_cond_spaces[_trans] ) {
							case 0 :
							if ( (p+1 == eof ) )
							_cpc += 1;
							
							
							break;
							case 1 :
							if ( (({printf("  marker\n");1;}) ) )
							_cpc += 1;
							
							
							break;
							
						}
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + ((_upper-_lower)>> 1);
								if ( _cpc < ( int ) (*( _mid  ))
								)
								_upper = _mid - 1;
								
								else if ( _cpc > ( int ) (*( _mid  ))
								)
								_lower = _mid + 1;
								
								else
								{
									_cond += ( unsigned int  ) (_mid - _ckeys);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							{
								cs = 0;
								_cont = 0;
							}
							
						}
					}
					
					if ( _cont == 1  )
					{
						cs = ( int ) _match_any_cond_targs[_cond];
						switch ( _match_any_cond_actions[_cond] ) {
							case 9 :
							{
								printf("----- MATCH\n");
							}
							
							break;
							
						}
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
					}
				}
				
			}
			
			_nfa_repeat = 1;
			while ( _nfa_repeat  )
			{
				_nfa_repeat = 0;
				if ( nfa_len > 0  )
				{
					int _pop_test = 1;
					nfa_count += 1;
					nfa_len -= 1;
					p = nfa_bp[nfa_len].p;
					switch ( _match_any_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
						case 5 :
						_pop_test = (({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) );
						if ( !_pop_test  )
						break;
						
						_pop_test = (({ 1; })
						);
						
						break;
						case 6 :
						_pop_test = (({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) );
						if ( !_pop_test  )
						break;
						
						_pop_test = (({ ++q_2 < 3; })
						);
						
						break;
						case 7 :
						_pop_test = (({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) );
						if ( !_pop_test  )
						break;
						
						_pop_test = (({ ++q_2 >= 2; })
						);
						
						break;
						case 4 :
						_pop_test = (({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) );
						if ( !_pop_test  )
						break;
						
						_cpc = 0;
						if ( (({printf("  marker\n");1;}) ) )
						_cpc += 1;
						
						_pop_test = _cpc == 1;
						if ( !_pop_test  )
						break;
						
						_pop_test = (({  q_2 = 0; 1; })
						);
						
						break;
						case 8 :
						_pop_test = (({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) );
						if ( !_pop_test  )
						break;
						
						_cpc = 0;
						if ( (({printf("  marker\n");1;}) ) )
						_cpc += 1;
						
						_pop_test = _cpc == 1;
						if ( !_pop_test  )
						break;
						
						_pop_test = (({  q_2 = 0; 1; })
						);
						
						break;
						
					}
					if ( _pop_test  )
					{
						cs = nfa_bp[nfa_len].state;
						_nfa_cont = 1;
						_nfa_repeat = 0;
					}
					
					else
					{
						_nfa_cont = 0;
						_nfa_repeat = 1;
					}
					
				}
				
				else
				{
					_nfa_cont = 0;
					_nfa_repeat = 0;
				}
				
			}
			
		}
		
	}
	return 0;
}

int main()
{
	test( "a " );
	test( "aa " );
	test( "aaa " );
	test( "aaaa " );
	
	test( "a a " );
	test( "aa aa " );
	test( "aaa aaa " );
	test( "aaaa aaaa " );
	
	test( "a a a " );
	test( "aa aa aa " );
	test( "aaa aaa aaa " );
	test( "aaaa aaaa aaaa " );
	
	test( "aa a " );
	test( "aa aaa " );
	test( "aa aaaa " );
	
	test( "aaa a " );
	test( "aaa aa " );
	test( "aaa aaaa " );
	
	return 0;
}

