#include <stdio.h>
#include <string.h>

struct forder
{
	int cs;
};



static const char  _forder_actions [] = { 0, 1, 4, 1, 7, 2, 1, 6, 2, 2, 3, 2, 4, 7, 3, 5, 6, 7, 5, 0, 1, 2, 3, 6, 0 ,  };
static const char  _forder_trans_keys [] = { 1, 0, 0, 3, 2, 2, 0, 3, 0, 3, 0, 2, 0, 3, 0, 3, 0, 3, 0, 2, 0, 2, 1, 0, 0 ,  };
static const char  _forder_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 0 ,  };
static const char  _forder_index_offsets [] = { 0, 0, 4, 5, 9, 13, 16, 20, 24, 28, 31, 34, 0 ,  };
static const char  _forder_indices [] = { 0, 1, 2, 3, 4, 5, 1, 6, 7, 8, 1, 9, 10, 8, 1, 9, 8, 1, 9, 11, 8, 1, 9, 12, 13, 1, 14, 15, 8, 1, 16, 13, 1, 14, 0 ,  };
static const char  _forder_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _forder_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _forder_cond_targs [] = { 11, 0, 2, 6, 3, 11, 2, 4, 11, 5, 4, 7, 8, 11, 9, 6, 10, 0 ,  };
static const char  _forder_cond_actions [] = { 14, 0, 5, 18, 0, 3, 0, 8, 1, 0, 0, 0, 0, 11, 0, 0, 0, 0 ,  };
static const char  _forder_nfa_targs [] = { 0, 0 ,  };
static const char  _forder_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _forder_nfa_push_actions [] = { 0, 0 ,  };
static const char  _forder_nfa_pop_trans [] = { 0, 0 ,  };
static const int  forder_start  = 1;
static const int  forder_first_final  = 11;
static const int  forder_error  = 0;
static const int  forder_en_main  = 1;
void forder_init( struct forder *fsm )
{

	{
		(fsm->cs) = ( int ) forder_start;
	}
}

void forder_execute( struct forder *fsm, const char *_data, int _len )
{
	const char *p = _data;
	const char *pe = _data+_len;
	
	
	{
		unsigned int _trans = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_inds;
		while ( _cont == 1  )
		{
		
			if ( (fsm->cs) == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _forder_trans_keys + ((fsm->cs)<<1);
					_inds = _forder_indices + _forder_index_offsets[(fsm->cs)];
					if ( ((*( p  ))
					)<= 98 && ((*( p  ))
					)>= 10  )
					{
						int _ic = ( int ) _forder_char_class[( int ) ((*( p  ))
						)- 10];
						if ( _ic <= ( int ) (*( _keys+1  ))
						&& _ic >= ( int ) (*( _keys  ))
						)
						_trans = ( unsigned int  ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
						) ))
						;
						
						else
						_trans = ( unsigned int  ) _forder_index_defaults[(fsm->cs)];
						
					}
					
					else
					{
						_trans = ( unsigned int  ) _forder_index_defaults[(fsm->cs)];
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					(fsm->cs) = ( int ) _forder_cond_targs[_trans];
					if ( _forder_cond_actions[_trans]!= 0  )
					{
						_acts = _forder_actions + _forder_cond_actions[_trans];
						_nacts = ( unsigned int  ) (*( _acts  ))
						;
						_acts += 1;
						while ( _nacts > 0  )
						{
							switch ( (*( _acts  ))
							) {
								case 0 :
								{
									printf("enter m1 aa\n");
								}
								
								break;
								case 1 :
								{
									printf("enter m1 aa\n");
								}
								
								break;
								case 2 :
								{
									printf("leave m1 aa\n");
								}
								
								break;
								case 3 :
								{
									printf("through m1 b\n");
								}
								
								break;
								case 4 :
								{
									printf("accept m1\n");
								}
								
								break;
								case 5 :
								{
									printf("enter m2\n");
								}
								
								break;
								case 6 :
								{
									printf("enter m2\n");
								}
								
								break;
								case 7 :
								{
									printf("accept m2\n");
								}
								
								break;
								
							}
							_nacts -= 1;
							_acts += 1;
						}
						
					}
					
					
					if ( (fsm->cs) == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
}

int forder_finish( struct forder *fsm )
{
	if ( fsm->cs == forder_error )
	return -1;
	if ( fsm->cs >= forder_first_final )
	return 1;
	return 0;
}

struct forder fsm;

void test( char *buf )
{
	int len = strlen( buf );
	forder_init( &fsm );
	forder_execute( &fsm, buf, len );
	if ( forder_finish( &fsm ) > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}

int main()
{
	test( "aaaaaabbbaa\n" );
	test( "\n" );
	test( "bbbbbbaaaaaaa\n" );
	test( "bbbbbbaaaaaa\n" );
	test( "aaaaa\n" );
	
	return 0;
}

