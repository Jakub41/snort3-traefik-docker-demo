#include <string.h>
#include <stdio.h>

char comm ;
int top ;
int stack [32];
char * ts ;
char * te ;
int act ;
int val ;





static const char  _GotoCallRet_actions [] = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 0 ,  };
static const char  _GotoCallRet_key_offsets [] = { 0, 0, 1, 2, 3, 4, 4, 10, 13, 15, 15, 21, 23, 24, 30, 31, 0 ,  };
static const char  _GotoCallRet_trans_keys [] = { 102, 111, 105, 108, 10, 32, 91, 123, 97, 122, 32, 97, 122, 97, 122, 32, 91, 123, 125, 97, 122, 97, 122, 32, 32, 91, 93, 123, 97, 122, 32, 97, 122, 0 ,  };
static const char  _GotoCallRet_single_lengths [] = { 0, 1, 1, 1, 1, 0, 4, 1, 0, 0, 4, 0, 1, 4, 1, 0, 0 ,  };
static const char  _GotoCallRet_range_lengths [] = { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0 ,  };
static const char  _GotoCallRet_index_offsets [] = { 0, 0, 2, 4, 6, 8, 9, 15, 18, 20, 21, 27, 29, 31, 37, 39, 0 ,  };
static const char  _GotoCallRet_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _GotoCallRet_trans_offsets [] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 0 ,  };
static const char  _GotoCallRet_trans_lengths [] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _GotoCallRet_cond_keys [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _GotoCallRet_cond_targs [] = { 2, 6, 3, 6, 4, 6, 6, 6, 9, 6, 6, 6, 6, 7, 0, 1, 8, 6, 8, 6, 0, 10, 10, 10, 12, 11, 0, 11, 10, 12, 10, 13, 13, 14, 13, 15, 0, 14, 13, 15, 13, 6, 6, 6, 6, 6, 6, 10, 10, 13, 13, 0 ,  };
static const char  _GotoCallRet_cond_actions [] = { 0, 41, 0, 41, 0, 41, 33, 41, 1, 37, 35, 31, 29, 7, 0, 0, 0, 39, 0, 39, 0, 13, 11, 9, 0, 0, 0, 0, 17, 0, 15, 23, 21, 0, 19, 0, 0, 0, 25, 0, 27, 41, 41, 41, 41, 39, 39, 17, 15, 25, 27, 0 ,  };
static const char  _GotoCallRet_to_state_actions [] = { 0, 0, 0, 0, 0, 3, 3, 0, 0, 0, 3, 0, 0, 3, 0, 0, 0 ,  };
static const char  _GotoCallRet_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 5, 0, 0, 0 ,  };
static const char  _GotoCallRet_eof_trans_indexed [] = { 0, 6, 6, 6, 6, 0, 0, 12, 12, 0, 0, 19, 20, 0, 26, 27, 0 ,  };
static const char  _GotoCallRet_eof_trans_direct [] = { 0, 42, 43, 44, 45, 0, 0, 46, 47, 0, 0, 48, 49, 0, 50, 51, 0 ,  };
static const char  _GotoCallRet_nfa_targs [] = { 0, 0 ,  };
static const char  _GotoCallRet_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _GotoCallRet_nfa_push_actions [] = { 0, 0 ,  };
static const char  _GotoCallRet_nfa_pop_trans [] = { 0, 0 ,  };
static const int  GotoCallRet_start  = 6;
static const int  GotoCallRet_first_final  = 6;
static const int  GotoCallRet_error  = 0;
static const int  GotoCallRet_en_handle  = 5;
static const int  GotoCallRet_en_one  = 10;
static const int  GotoCallRet_en_two  = 13;
static const int  GotoCallRet_en_main  = 6;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) GotoCallRet_start;
		top = 0;
		ts = 0;
		te = 0;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	char *eof = pe;
	
	{
		int _klen;
		unsigned int _trans = 0;
		unsigned int _cond = 0;
		const char  *_acts;
		unsigned int _nacts;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		if ( p == pe  )
		goto _test_eof;
		
		if ( cs == 0  )
		goto _out;
		
		_resume :
		_acts = _GotoCallRet_actions + _GotoCallRet_from_state_actions[cs];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 2 :
				{
					{
						ts = p;
						
					}
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		_keys = _GotoCallRet_trans_keys + _GotoCallRet_key_offsets[cs];
		_trans = ( unsigned int  ) _GotoCallRet_index_offsets[cs];
		_klen = ( int ) _GotoCallRet_single_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( ((*( p  ))
				)> (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_trans += ( unsigned int  ) (_mid - _keys);
					goto _match;
				}
				
			}
			
			_keys += _klen;
			_trans += ( unsigned int  ) _klen;
		}
		
		
		_klen = ( int ) _GotoCallRet_range_lengths[cs];
		if ( _klen > 0  )
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _keys;
			_upper = _keys + (_klen<<1)- 2;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + (((_upper-_lower)>> 1)& ~1);
				if ( ((*( p  ))
				)< (*( _mid  ))
				)
				_upper = _mid - 2;
				
				else if ( ((*( p  ))
				)> (*( _mid + 1  ))
				)
				_lower = _mid + 2;
				
				else
				{
					_trans += ( unsigned int  ) ((_mid - _keys)>>1);
					goto _match;
				}
				
			}
			
			_trans += ( unsigned int  ) _klen;
		}
		
		
		
		_match :
		_ckeys = _GotoCallRet_cond_keys + _GotoCallRet_trans_offsets[_trans];
		_klen = ( int ) _GotoCallRet_trans_lengths[_trans];
		_cond = ( unsigned int  ) _GotoCallRet_trans_offsets[_trans];
		_cpc = 0;
		{
			const char  *_lower;
			const char  *_mid;
			const char  *_upper;
			_lower = _ckeys;
			_upper = _ckeys + _klen - 1;
			while ( 1 )
			{
				if ( _upper < _lower  )
				break;
				
				
				_mid = _lower + ((_upper-_lower)>> 1);
				if ( _cpc < ( int ) (*( _mid  ))
				)
				_upper = _mid - 1;
				
				else if ( _cpc > ( int ) (*( _mid  ))
				)
				_lower = _mid + 1;
				
				else
				{
					_cond += ( unsigned int  ) (_mid - _ckeys);
					goto _match_cond;
				}
				
			}
			
			cs = 0;
			goto _again;
		}
		
		_match_cond :
		cs = ( int ) _GotoCallRet_cond_targs[_cond];
		if ( _GotoCallRet_cond_actions[_cond]== 0  )
		goto _again;
		
		
		_acts = _GotoCallRet_actions + _GotoCallRet_cond_actions[_cond];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 0 :
				{
					printf( "%s", "handle " );
					{
						p = p - 1;
						
					}
					if ( val == 1 )
					{
						{
							cs = (10);
							
						}
						
					} 
					if ( val == 2 )
					{
						{
							cs = (13);
							
						}
						
					} 
					if ( val == 3 )
					{
						{
							cs = 6;
							
						}
					} 
					
				}
				
				break;
				case 3 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 4 :
				{
					{
						te = p+1;
						{
							printf( "%s", "{ " );
							{
								stack[top] = cs;
								top += 1;
								cs = (10);
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 5 :
				{
					{
						te = p+1;
						{
							printf( "%s", "[ " );
							{
								stack[top] = cs;
								top += 1;
								cs = (13);
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 6 :
				{
					{
						te = p+1;
						{
							printf( "%s", "space " );
							
						}
						
					}
					
				}
				
				break;
				case 7 :
				{
					{
						te = p;
						p = p - 1;
						{
							printf( "%s", "} " );
							{
								top-= 1;
								cs = stack[top];
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 8 :
				{
					{
						te = p;
						p = p - 1;
						{
							printf( "%s", "word " );
							val = 1;
							{
								cs = (5);
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 9 :
				{
					{
						te = p+1;
						{
							printf( "%s", "{ " );
							{
								stack[top] = cs;
								top += 1;
								cs = (10);
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 10 :
				{
					{
						te = p+1;
						{
							printf( "%s", "[ " );
							{
								stack[top] = cs;
								top += 1;
								cs = (13);
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 11 :
				{
					{
						te = p+1;
						{
							printf( "%s", "space " );
							
						}
						
					}
					
				}
				
				break;
				case 12 :
				{
					{
						te = p;
						p = p - 1;
						{
							printf( "%s", "] " );
							{
								top-= 1;
								cs = stack[top];
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 13 :
				{
					{
						te = p;
						p = p - 1;
						{
							printf( "%s", "word " );
							val = 2;
							{
								cs = (5);
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 14 :
				{
					{
						te = p+1;
						{
							printf( "%s", "{ " );
							{
								stack[top] = cs;
								top += 1;
								cs = 10;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 15 :
				{
					{
						te = p+1;
						{
							printf( "%s", "[ " );
							{
								stack[top] = cs;
								top += 1;
								cs = 13;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 16 :
				{
					{
						te = p+1;
						{
							printf( "%s", "this is the foil" );
							
						}
						
					}
					
				}
				
				break;
				case 17 :
				{
					{
						te = p+1;
						{
							printf( "%s", "space " );
							
						}
						
					}
					
				}
				
				break;
				case 18 :
				{
					{
						te = p+1;
						
					}
					
				}
				
				break;
				case 19 :
				{
					{
						te = p;
						p = p - 1;
						{
							printf( "%s", "word " );
							val = 3;
							{
								cs = 5;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				case 20 :
				{
					{
						p = ((te))-1;
						{
							printf( "%s", "word " );
							val = 3;
							{
								cs = 5;
								goto _again;
							}
							
						}
						
					}
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		
		
		_again :
		_acts = _GotoCallRet_actions + _GotoCallRet_to_state_actions[cs];
		_nacts = ( unsigned int  ) (*( _acts  ))
		;
		_acts += 1;
		while ( _nacts > 0  )
		{
			switch ( (*( _acts  ))
			) {
				case 1 :
				{
					{
						ts = 0;
						
					}
					
				}
				
				break;
				
			}
			_nacts -= 1;
			_acts += 1;
		}
		
		
		if ( cs == 0  )
		goto _out;
		
		p += 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			if ( _GotoCallRet_eof_trans_direct[cs]> 0  )
			{
				_trans = ( unsigned int  ) _GotoCallRet_eof_trans_direct[cs]- 1;
				_cond = ( unsigned int  ) _GotoCallRet_trans_offsets[_trans];
				goto _match_cond;
			}
			
		}
		
		
		
		_out :
		{}
		
	}
}

void finish( )
{
	if ( cs >= GotoCallRet_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"{a{b[c d]d}c}\n",
	"[a{b[c d]d}c}\n",
	"[a[b]c]d{ef{g{h}i}j}l\n",
	"{{[]}}\n",
	"a b c\n",
	"{a b c}\n",
	"[a b c]\n",
	"{]\n",
	"{{}\n",
	"[[[[[[]]]]]]\n",
	"[[[[[[]]}]]]\n",
};

int inplen = 11;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

