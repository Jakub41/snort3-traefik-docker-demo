host( "working/gotocallret3_cs.rl", 1 ) @{/*
	* @@LANG: csharp
	* @@GENERATED: true
	*/
	
	using System;
	// Disables lots of warnings that appear in the test suite
	#pragma warning disable 0168, 0169, 0219, 0162, 0414
	namespace Test {
		class Test
		{
			char comm;
			int top;
			int [] stack = new int [32];
			
			
			
			
		}@
		array s8 _gotocallret_actions( 0, 8 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 5, 1, 7, 1, 8, 2, 0, 1, 2, 4, 6, 0 };
		
		array s8 _gotocallret_key_offsets( 0, 18 ) = { 0, 0, 1, 2, 3, 4, 8, 10, 14, 14, 18, 0 };
		
		array char _gotocallret_trans_keys( 0, 122 ) = { c(32), c(10), c(10), c(10), c(65), c(90), c(97), c(122), c(48), c(57), c(48), c(57), c(97), c(122), c(65), c(90), c(97), c(122), c(48), c(57), c(0) };
		
		array s8 _gotocallret_single_lengths( 0, 1 ) = { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _gotocallret_range_lengths( 0, 2 ) = { 0, 0, 0, 0, 0, 2, 1, 2, 0, 2, 1, 0 };
		
		array s8 _gotocallret_index_offsets( 0, 20 ) = { 0, 0, 2, 4, 6, 8, 11, 13, 16, 17, 20, 0 };
		
		array s8 _gotocallret_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
		
		array s8 _gotocallret_trans_offsets( 0, 21 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 0 };
		
		array s8 _gotocallret_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
		
		array s8 _gotocallret_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _gotocallret_cond_targs( 0, 10 ) = { 2, 0, 7, 0, 8, 4, 8, 4, 9, 9, 0, 10, 0, 1, 1, 0, 0, 9, 9, 0, 10, 0, 0 };
		
		array s8 _gotocallret_cond_actions( 0, 18 ) = { 18, 13, 11, 13, 15, 1, 3, 0, 0, 0, 7, 0, 7, 9, 9, 13, 0, 0, 0, 7, 0, 7, 0 };
		
		array s8 _gotocallret_eof_actions( 0, 13 ) = { 0, 13, 13, 5, 5, 7, 7, 0, 5, 0, 0, 0 };
		
		array s8 _gotocallret_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _gotocallret_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _gotocallret_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _gotocallret_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int gotocallret_start = 7;
		value int gotocallret_first_final = 7;
		value int gotocallret_error = 0;
		
		value int gotocallret_en_garble_line = 3;
		value int gotocallret_en_alp_comm = 5;
		value int gotocallret_en_dig_comm = 6;
		value int gotocallret_en_main = 7;
		
		host( "working/gotocallret3_cs.rl", 64 ) @{
			int cs;
			
			void init()
			{
			}@
			{
				cs = cast(int)gotocallret_start;
				top = 0;
			}
			host( "working/gotocallret3_cs.rl", 69 ) @{
			}
			
			void exec( char[] data, int len )
			{
				int p = 0;
				int pe = len;
				int eof = len;
				string _s;
				char [] buffer = new char [1024];
				int blen = 0;
			}@
			{
				int _klen;
				uint _trans = 0;
				uint _cond = 0;
				uint _have = 0;
				uint _cont = 1;
				index s8 _acts;
				uint _nacts;
				index char _keys;
				index s8 _ckeys;
				int _cpc;
				while ( _cont == 1 ) {
					
					if ( cs == 0 )
					_cont = 0;
					_have = 0;
					if ( p == pe ) {
						if ( p == eof )
						{
							if ( _have == 0 ) {
								index s8 __acts;
								uint __nacts;
								__acts = offset( _gotocallret_actions, _gotocallret_eof_actions[cs] );
								__nacts = cast(uint)deref( _gotocallret_actions, __acts );
								__acts += 1;
								while ( __nacts > 0 ) {
									switch ( deref( _gotocallret_actions, __acts ) ) {
										case 2 {
											host( "working/gotocallret3_cs.rl", 25 ) ${Console.Write( "error: failed to recover\n" );}$
										}
										case 3 {
											host( "working/gotocallret3_cs.rl", 34 ) ${${p = p - 1; }$${top-= 1;cs = stack[top]; }$}$
										}
										case 8 {
											host( "working/gotocallret3_cs.rl", 59 ) ${${p = p - 1; }$${cs = 3;}$}$
										}
									}
									__nacts -= 1;
									__acts += 1;
								}
							}
						}
						
						if ( _have == 0 )
						_cont = 0;
					}
					if ( _cont == 1 ) {
						if ( _have == 0 ) {
							_keys = offset( _gotocallret_trans_keys, _gotocallret_key_offsets[cs] );
							_trans = cast(uint)_gotocallret_index_offsets[cs];
							_have = 0;
							
							_klen = cast(int)_gotocallret_single_lengths[cs];
							if ( _klen > 0 ) {
								index char _lower;
								index char _mid;
								index char _upper;
								_lower = _keys;
								_upper = _keys + _klen - 1;
								while ( _upper >= _lower && _have == 0 ) {
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( ( deref( data, p )) < deref( _gotocallret_trans_keys, _mid ) )
									_upper = _mid - 1;
									else if ( ( deref( data, p )) > deref( _gotocallret_trans_keys, _mid ) )
									_lower = _mid + 1;
									else {
										_trans += cast(uint)(_mid - _keys);
										_have = 1;
									}
								}
								if ( _have == 0 ) {
									_keys += _klen;
									_trans += cast(uint)_klen;
								}
							}
							
							if ( _have == 0 ) {
								_klen = cast(int)_gotocallret_range_lengths[cs];
								if ( _klen > 0 ) {
									index char _lower;
									index char _mid;
									index char _upper;
									_lower = _keys;
									_upper = _keys + (_klen<<1) - 2;
									while ( _have == 0 && _lower <= _upper ) {
										_mid = _lower + (((_upper-_lower) >> 1) & ~1);
										if ( ( deref( data, p )) < deref( _gotocallret_trans_keys, _mid ) )
										_upper = _mid - 2;
										else if ( ( deref( data, p )) > deref( _gotocallret_trans_keys, _mid + 1 ) )
										_lower = _mid + 2;
										else {
											_trans += cast(uint)((_mid - _keys)>>1);
											_have = 1;
										}
									}
									if ( _have == 0 )
									_trans += cast(uint)_klen;
								}
							}
							
							_ckeys = offset( _gotocallret_cond_keys, _gotocallret_trans_offsets[_trans] );
							_klen = cast(int)_gotocallret_trans_lengths[_trans];
							_cond = cast(uint)_gotocallret_trans_offsets[_trans];
							_have = 0;
							
							_cpc = 0;
							{
								index s8 _lower;
								index s8 _mid;
								index s8 _upper;
								_lower = _ckeys;
								_upper = _ckeys + _klen - 1;
								while ( _have == 0 && _lower <= _upper ) {
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( _cpc < cast(int)deref( _gotocallret_cond_keys, _mid ) )
									_upper = _mid - 1;
									else if ( _cpc > cast(int)deref( _gotocallret_cond_keys, _mid ) )
									_lower = _mid + 1;
									else {
										_cond += cast(uint)(_mid - _ckeys);
										_have = 1;
									}
								}
								if ( _have == 0 ) {
									cs = 0;
									_cont = 0;
								}
							}
						}
						if ( _cont == 1 ) {
							cs = cast(int)_gotocallret_cond_targs[_cond];
							
							if ( _gotocallret_cond_actions[_cond] != 0 ) {
								_acts = offset( _gotocallret_actions, _gotocallret_cond_actions[_cond] );
								_nacts = cast(uint)deref( _gotocallret_actions, _acts );
								_acts += 1;
								while ( _nacts > 0 )
								{
									switch ( deref( _gotocallret_actions, _acts ) )
									{
										case 0 {
											host( "working/gotocallret3_cs.rl", 23 ) ${Console.Write( "error: garbling line\n" );}$
										}
										case 1 {
											host( "working/gotocallret3_cs.rl", 24 ) ${${cs = 7;}$}$
										}
										case 3 {
											host( "working/gotocallret3_cs.rl", 34 ) ${${p = p - 1; }$${top-= 1;cs = stack[top]; }$}$
										}
										case 4 {
											host( "working/gotocallret3_cs.rl", 42 ) ${if ( comm >= 97 )
												{
													${stack[top] = cs; top += 1;cs = 5;}$} 
												else {
													${stack[top] = cs; top += 1;cs = 6;}$}
											}$
										}
										case 5 {
											host( "working/gotocallret3_cs.rl", 53 ) ${comm = ={( deref( data, p ))}=;
											}$
										}
										case 6 {
											host( "working/gotocallret3_cs.rl", 54 ) ${Console.Write( "prints\n" );}$
										}
										case 7 {
											host( "working/gotocallret3_cs.rl", 55 ) ${Console.Write( "correct command\n" );}$
										}
										case 8 {
											host( "working/gotocallret3_cs.rl", 59 ) ${${p = p - 1; }$${cs = 3;}$}$
										}
									}
									_nacts -= 1;
									_acts += 1;
								}
							}
							
							if ( cs == 0 )
							_cont = 0;
							if ( _cont == 1 )
							p += 1;
							
						}
					}
				}
			}
			host( "working/gotocallret3_cs.rl", 80 ) @{
			}
			
			void finish( )
			{
				if ( cs >= gotocallret_first_final )
				Console.WriteLine( "ACCEPT" );
				else
				Console.WriteLine( "FAIL" );
			}
			
			static readonly string[] inp = {
				"lkajsdf\n",
				"2134\n",
				"(\n",
				"\n",
				"*234234()0909 092 -234aslkf09`1 11\n",
				"1\n",
				"909\n",
				"1 a\n",
				"11 1\n",
				"a 1\n",
				"aa a\n",
				"1 1\n",
				"1 123456\n",
				"a a\n",
				"a abcdef\n",
				"h",
				"a aa1",
			};
			
			
			static readonly int inplen = 17;
			
			public static void Main (string[] args)
			{
				Test machine = new Test();
				for ( int i = 0; i < inplen; i++ ) {
					machine.init();
					machine.exec( inp[i].ToCharArray(), inp[i].Length );
					machine.finish();
				}
			}
		}
	}
}@