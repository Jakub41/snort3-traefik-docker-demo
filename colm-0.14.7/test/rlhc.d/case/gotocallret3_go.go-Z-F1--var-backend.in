host( "working/gotocallret3_go.rl", 1 ) @{/*
	* @@LANG: go
	* @@GENERATED: true
	*/
	
	package main
	import "fmt"
	
	var comm  byte ;
	var top  int ;
	var stack [32] int ;
	
	
	
	
	var cs int;
	var blen int;
	var buffer [1024] byte;
	
}@
array byte _gotocallret_trans_keys( 0, 5 ) = { u(1), u(0), u(2), u(2), u(0), u(0), u(0), u(0), u(0), u(0), u(4), u(5), u(3), u(3), u(3), u(5), u(1), u(0), u(4), u(5), u(3), u(3), u(0) };

array s8 _gotocallret_char_class( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 };

array s8 _gotocallret_index_offsets( 0, 12 ) = { 0, 0, 1, 2, 3, 4, 6, 7, 10, 10, 12, 0 };

array s8 _gotocallret_indices( 0, 10 ) = { 1, 2, 4, 6, 8, 8, 9, 10, 0, 10, 8, 8, 9, 0 };

array s8 _gotocallret_index_defaults( 0, 11 ) = { 0, 0, 0, 3, 5, 7, 7, 0, 11, 7, 7, 0 };

array s8 _gotocallret_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _gotocallret_cond_targs( 0, 10 ) = { 0, 2, 7, 4, 8, 4, 8, 0, 9, 10, 1, 0, 0 };

array s8 _gotocallret_cond_actions( 0, 9 ) = { 1, 2, 3, 5, 6, 0, 7, 8, 0, 0, 9, 0, 0 };

array s8 _gotocallret_eof_actions( 0, 8 ) = { 0, 1, 1, 4, 4, 8, 8, 0, 4, 0, 0, 0 };

array s8 _gotocallret_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _gotocallret_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _gotocallret_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _gotocallret_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int gotocallret_start = 7;
value int gotocallret_first_final = 7;
value int gotocallret_error = 0;

value int gotocallret_en_garble_line = 3;
value int gotocallret_en_alp_comm = 5;
value int gotocallret_en_dig_comm = 6;
value int gotocallret_en_main = 7;

host( "working/gotocallret3_go.rl", 72 ) @{
	
	func prepare() {
	}@
	{
		cs = cast(int)gotocallret_start;
		top = 0;
	}
	host( "working/gotocallret3_go.rl", 75 ) @{
	}
	
	func exec(data string) {
		var p int = 0
		var pe int = len(data)
		var eof int = pe
	}@
	{
		uint _trans = 0;
		uint _have = 0;
		uint _cont = 1;
		index byte _keys;
		index s8 _inds;
		while ( _cont == 1 ) {
			
			if ( cs == 0 )
			_cont = 0;
			_have = 0;
			if ( p == pe ) {
				if ( p == eof )
				{
					if ( _have == 0 ) {
						switch ( _gotocallret_eof_actions[cs] ) {
							case 4 {
								host( "working/gotocallret3_go.rl", 23 ) ${fmt.Print( "error: failed to recover\n" );}$
							}
							case 8 {
								host( "working/gotocallret3_go.rl", 32 ) ${${p = p - 1; }$ 
									${top-= 1;cs = stack[top]; }$
								}$
							}
							case 1 {
								host( "working/gotocallret3_go.rl", 61 ) ${${p = p - 1; }$
									${cs = 3;}$}$
							}
						}
					}
				}
				
				if ( _have == 0 )
				_cont = 0;
			}
			if ( _cont == 1 ) {
				if ( _have == 0 ) {
					_keys = offset( _gotocallret_trans_keys, (cs<<1) );
					_inds = offset( _gotocallret_indices, _gotocallret_index_offsets[cs] );
					
					if ( ( deref( data, p )) <= 122 && ( deref( data, p )) >= 10 )
					{
						int _ic = cast(int)_gotocallret_char_class[cast(int)( deref( data, p )) - 10];
						if ( _ic <= cast(int)deref( _gotocallret_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _gotocallret_trans_keys, _keys ) )
						_trans = cast(uint)deref( _gotocallret_indices, _inds + cast(int)( _ic - cast(int)deref( _gotocallret_trans_keys, _keys ) )  ); 
						else
						_trans = cast(uint)_gotocallret_index_defaults[cs];
					}
					else {
						_trans = cast(uint)_gotocallret_index_defaults[cs];
					}
					
				}
				if ( _cont == 1 ) {
					cs = cast(int)_gotocallret_cond_targs[_trans];
					
					switch ( _gotocallret_cond_actions[_trans] ) {
						case 5 {
							host( "working/gotocallret3_go.rl", 20 ) ${fmt.Print( "error: garbling line\n" );}$
						}
						case 7 {
							host( "working/gotocallret3_go.rl", 21 ) ${${cs = 7;}$}$
						}
						case 8 {
							host( "working/gotocallret3_go.rl", 32 ) ${${p = p - 1; }$ 
								${top-= 1;cs = stack[top]; }$
							}$
						}
						case 9 {
							host( "working/gotocallret3_go.rl", 55 ) ${comm = ={( deref( data, p ))}=;
							}$
						}
						case 3 {
							host( "working/gotocallret3_go.rl", 57 ) ${fmt.Print( "correct command\n" );}$
						}
						case 1 {
							host( "working/gotocallret3_go.rl", 61 ) ${${p = p - 1; }$
								${cs = 3;}$}$
						}
						case 6 {
							host( "working/gotocallret3_go.rl", 20 ) ${fmt.Print( "error: garbling line\n" );}$
							host( "working/gotocallret3_go.rl", 21 ) ${${cs = 7;}$}$
						}
						case 2 {
							host( "working/gotocallret3_go.rl", 42 ) ${if ( comm >= 97 ) {
									${stack[top] = cs; top += 1;cs = 5;}$} else {
									${stack[top] = cs; top += 1;cs = 6;}$}
							}$
							host( "working/gotocallret3_go.rl", 56 ) ${fmt.Print( "prints\n" );}$
						}
					}
					
					if ( cs == 0 )
					_cont = 0;
					if ( _cont == 1 )
					p += 1;
					
				}}
		}
	}
	host( "working/gotocallret3_go.rl", 82 ) @{
	}
	func finish() {
		if cs >= gotocallret_first_final {
			fmt.Println("ACCEPT")
		} else {
			fmt.Println("FAIL")
		}
	}
	var inp []string = []string {
		"lkajsdf\n",
		"2134\n",
		"(\n",
		"\n",
		"*234234()0909 092 -234aslkf09`1 11\n",
		"1\n",
		"909\n",
		"1 a\n",
		"11 1\n",
		"a 1\n",
		"aa a\n",
		"1 1\n",
		"1 123456\n",
		"a a\n",
		"a abcdef\n",
		"h",
		"a aa1",
	};
	
	func main() {
		for _, data := range inp {
			prepare()
			exec(data)
			finish()
		}
	}
}@