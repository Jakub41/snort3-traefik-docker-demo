host( "working/tofrom2.rl", 1 ) @{/*
	* @@LANG: c
	* 
	* Tests to/from state actions, for comparison against ASM version.
	*/
	
	#include <string.h>
	#include <stdio.h>
	
	int neg ;
	int value ;
	
	
	
	
}@
array s8 _atoi_to_state_actions( 0, 1 ) = { 0, 1, 1, 1, 1, 0 };

array s8 _atoi_from_state_actions( 0, 2 ) = { 0, 2, 2, 2, 2, 0 };

array s8 _atoi_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _atoi_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int atoi_start = 1;
value int atoi_first_final = 4;
value int atoi_error = 0;

value int atoi_en_main = 1;

host( "working/tofrom2.rl", 53 ) @{
	int cs;
	
	void init()
	{
		value = 0;
		neg = 0;
	}@
	{
		cs = cast(int)atoi_start;
	}
	host( "working/tofrom2.rl", 60 ) @{
	}
	
	void exec( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
	}@
	{
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		switch ( _atoi_from_state_actions[cs] ) {
			case 2{
				host( "working/tofrom2.rl", 39 ) ${
					printf( "from on %d\n", (int)*p );
				}$
			}
		}
		
		switch ( cs ) {
			case 1:
			switch( ( deref( data, p )) ) {
				case 43: {
					goto ctr0;
				}
				case 45: {
					goto ctr2;
				}
			}
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr3;
			}
			{
				goto ctr1;
			}
			case 0:
			goto _out;
			case 2:
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr4;
			}
			{
				goto ctr1;
			}
			case 3:
			if ( ( deref( data, p )) == 10 ) {
				goto ctr5;
			}
			if ( 48 <= ( deref( data, p )) && ( deref( data, p )) <= 57 ) {
				goto ctr4;
			}
			{
				goto ctr1;
			}
			case 4:
			{
				goto ctr1;
			}
		}
		
		ctr1: cs = 0; goto _again;
		ctr0: cs = 2; goto f2;
		ctr2: cs = 2; goto f3;
		ctr3: cs = 3; goto f4;
		ctr4: cs = 3; goto f5;
		ctr5: cs = 4; goto f6;
		
		f2:
		host( "working/tofrom2.rl", 16 ) ${neg = 0;
			value = 0;
		}$
		goto _again;
		f5:
		host( "working/tofrom2.rl", 21 ) ${value = value * 10 + ( int ) ( ={( deref( data, p ))}= - 48 )
			;
		}$
		goto _again;
		f3:
		host( "working/tofrom2.rl", 16 ) ${neg = 0;
			value = 0;
		}$	host( "working/tofrom2.rl", 19 ) ${neg = 1;
		}$
		goto _again;
		f4:
		host( "working/tofrom2.rl", 16 ) ${neg = 0;
			value = 0;
		}$	host( "working/tofrom2.rl", 21 ) ${value = value * 10 + ( int ) ( ={( deref( data, p ))}= - 48 )
			;
		}$
		goto _again;
		f6:
		host( "working/tofrom2.rl", 24 ) ${
			if ( neg != 0 ) {
				value = -1 * value;
			} 
		}$	host( "working/tofrom2.rl", 30 ) ${
			printf( "%d", value );
			printf( "%s", "\n" );
		}$
		goto _again;
		
		_again:
		switch ( _atoi_to_state_actions[cs] ) {
			case 1{
				host( "working/tofrom2.rl", 35 ) ${
					printf( "to on %d\n", (int)*p );
				}$
			}
		}
		
		if ( cs == 0 )
		goto _out;
		p+= 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		_out: {}
	}
	host( "working/tofrom2.rl", 67 ) @{
	}
	
	void finish( )
	{
		if ( cs < atoi_first_final )
		printf( "-> FAIL\n" );
	}
	
	char *inp[] = {
		"1\n",
		"12\n",
		"222222\n",
		"+2123\n",
		"-99\n",
		"-12321\n",
		"213 3213\n",
		"--123\n",
		" -3000\n",
	};
	
	int inplen = 9;
	
	int main( )
	{
		int i;
		for ( i = 0; i < inplen; i++ ) {
			init();
			exec( inp[i], strlen(inp[i]) );
			finish();
		}
		return 0;
	}
	
}@