#include <string.h>
#include <stdio.h>

char comm;
int top;
int stack [32];



int cs;
char *ts, *te;
int act;

static const char  _fnext_actions [] = { 0, 1, 0, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 1, 2, 2, 3, 4, 0 ,  };
static const char  _fnext_trans_keys [] = { 1, 0, 3, 3, 2, 2, 4, 4, 4, 4, 0, 0, 1, 0, 1, 0, 1, 0, 5, 5, 1, 0, 0 ,  };
static const char  _fnext_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 ,  };
static const char  _fnext_index_offsets [] = { 0, 0, 1, 2, 3, 4, 5, 5, 5, 5, 6, 0 ,  };
static const char  _fnext_indices [] = { 0, 2, 3, 4, 5, 6, 0 ,  };
static const char  _fnext_index_defaults [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _fnext_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _fnext_cond_targs [] = { 6, 0, 7, 4, 8, 10, 9, 0 ,  };
static const char  _fnext_cond_actions [] = { 1, 0, 13, 3, 16, 5, 11, 0 ,  };
static const char  _fnext_to_state_actions [] = { 0, 7, 7, 7, 0, 7, 0, 0, 0, 7, 0, 0 ,  };
static const char  _fnext_from_state_actions [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0 ,  };
static const char  _fnext_nfa_targs [] = { 0, 0 ,  };
static const char  _fnext_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _fnext_nfa_push_actions [] = { 0, 0 ,  };
static const char  _fnext_nfa_pop_trans [] = { 0, 0 ,  };
static const int  fnext_start  = 1;
static const int  fnext_first_final  = 6;
static const int  fnext_error  = 0;
static const int  fnext_en_main  = 1;
static const int  fnext_en_e  = 2;
static const int  fnext_en_l  = 3;
static const int  fnext_en_o  = 9;
static const int  fnext_en_nl  = 5;
void init()
{

	{
		cs = ( int ) fnext_start;
		ts = 0;
		te = 0;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	
	while ( cs != fnext_error && p < pe ) {
		printf( "%c\n", *p );
		
		{
			unsigned int _trans = 0;
			unsigned int _have = 0;
			unsigned int _cont = 1;
			const char  *_acts;
			unsigned int _nacts;
			const char  *_keys;
			const char  *_inds;
			while ( _cont == 1  )
			{
			
				if ( cs == 0  )
				_cont = 0;
				
				_have = 0;
				if ( p == pe  )
				{
					if ( _have == 0  )
					_cont = 0;
					
				}
				
				if ( _cont == 1  )
				{
					if ( _have == 0  )
					{
						_acts = _fnext_actions + _fnext_from_state_actions[cs];
						_nacts = ( unsigned int  ) (*( _acts  ))
						;
						_acts += 1;
						while ( _nacts > 0  )
						{
							switch ( (*( _acts  ))
							) {
								case 7 :
								{
									{
										ts = p;
										
									}
									
								}
								
								break;
								
							}
							_nacts -= 1;
							_acts += 1;
						}
						
						
						_keys = _fnext_trans_keys + (cs<<1);
						_inds = _fnext_indices + _fnext_index_offsets[cs];
						if ( ((*( p  ))
						)<= 111 && ((*( p  ))
						)>= 10  )
						{
							int _ic = ( int ) _fnext_char_class[( int ) ((*( p  ))
							)- 10];
							if ( _ic <= ( int ) (*( _keys+1  ))
							&& _ic >= ( int ) (*( _keys  ))
							)
							_trans = ( unsigned int  ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
							) ))
							;
							
							else
							_trans = ( unsigned int  ) _fnext_index_defaults[cs];
							
						}
						
						else
						{
							_trans = ( unsigned int  ) _fnext_index_defaults[cs];
						}
						
						
					}
					
					if ( _cont == 1  )
					{
						cs = ( int ) _fnext_cond_targs[_trans];
						if ( _fnext_cond_actions[_trans]!= 0  )
						{
							_acts = _fnext_actions + _fnext_cond_actions[_trans];
							_nacts = ( unsigned int  ) (*( _acts  ))
							;
							_acts += 1;
							while ( _nacts > 0  )
							{
								switch ( (*( _acts  ))
								) {
									case 0 :
									{
										{
											cs = 2;
											
										}
										{
											p+= 1;
											_cont = 0;
											
										}
										
									}
									
									break;
									case 1 :
									{
										{
											cs = 3;
											
										}
										
									}
									
									break;
									case 2 :
									{
										{
											p+= 1;
											_cont = 0;
											
										}
										
									}
									
									break;
									case 3 :
									{
										{
											cs = 9;
											
										}
										
									}
									
									break;
									case 4 :
									{
										{
											p+= 1;
											_cont = 0;
											
										}
										
									}
									
									break;
									case 5 :
									{
										{
											p+= 1;
											_cont = 0;
											
										}
										printf("ACCEPT\n"); 
									}
									
									break;
									case 8 :
									{
										{
											te = p+1;
											{
												{
													cs = 5;
													
												}
												{
													p+= 1;
													_cont = 0;
													
												}
												
											}
											
										}
										
									}
									
									break;
									
								}
								_nacts -= 1;
								_acts += 1;
							}
							
						}
						
						
						_acts = _fnext_actions + _fnext_to_state_actions[cs];
						_nacts = ( unsigned int  ) (*( _acts  ))
						;
						_acts += 1;
						while ( _nacts > 0  )
						{
							switch ( (*( _acts  ))
							) {
								case 6 :
								{
									{
										ts = 0;
										
									}
									
								}
								
								break;
								
							}
							_nacts -= 1;
							_acts += 1;
						}
						
						
						if ( cs == 0  )
						_cont = 0;
						
						if ( _cont == 1  )
						p += 1;
						
					}
				}
				
			}
			
		}
	}
}

void finish( )
{
	if ( cs >= fnext_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"hello\n"
};

int inplen = 1;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

