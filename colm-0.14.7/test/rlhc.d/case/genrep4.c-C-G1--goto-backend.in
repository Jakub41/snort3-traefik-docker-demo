host( "working/genrep4.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stddef.h>  /* NULL */
	#include <stdint.h>  /* uint64_t */
	#include <stdlib.h>  /* malloc(3) free(3) */
	#include <stdbool.h> /* bool */
	#include <string.h>
	#include <stdio.h>
	
	struct nfa_bp_rec
	{
		long state;
		const unsigned char *p;
		int popTrans;
		long q_2;
	};
	
	struct nfa_bp_rec nfa_bp[1024];
	long nfa_len = 0;
	long nfa_count = 0;
	
	long c;
	
	struct nfa_state_rec
	{
		long c;
	};
	
	struct nfa_state_rec nfa_s[1024];
	
	void nfa_push()
	{
		nfa_s[nfa_len].c = c;
	}
	
	void nfa_pop()
	{
		c = nfa_s[nfa_len].c;
	}
	
	long q_2;
	
}@
array s8 _match_any_nfa_targs( 0, 9 ) = { 0, 1, 2, 3, 5, 2, 4, 1, 7, 3, 9, 7, 4, 0 };

array s8 _match_any_nfa_offsets( 0, 9 ) = { 0, 1, 0, 3, 0, 0, 7, 0, 9, 0, 0, 0, 0 };

array s8 _match_any_nfa_push_actions( 0, 1 ) = { 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0 };

array s8 _match_any_nfa_pop_trans( 0, 8 ) = { 0, 0, 4, 0, 7, 6, 5, 0, 8, 0, 7, 6, 5, 0 };

value int match_any_start = 1;
value int match_any_first_final = 11;
value int match_any_error = 0;

value int match_any_en_main = 1;

host( "working/genrep4.rl", 91 ) @{
	
	int test( const char *data )
	{
		int cs;
		const unsigned char *p = (const unsigned char *)data;
		const unsigned char *pe = p + strlen(data) + 1;
		const unsigned char *eof = pe;
		
		printf( "%s\n", data );
		
	}@
	{
		cs = cast(int)match_any_start;
		nfa_len = 0;
	}
	host( "working/genrep4.rl", 103 ) @{
	}@
	{
		if ( p == pe )
		goto _test_eof;
		if ( cs == 0 )
		goto _out;
		_resume:
		if ( _match_any_nfa_offsets[cs] ) {
			int alt = 0; 
			int new_recs = _match_any_nfa_targs[cast(int)_match_any_nfa_offsets[cs]];
			while ( alt < new_recs ) { 
				nfa_bp[nfa_len].state = _match_any_nfa_targs[cast(int)_match_any_nfa_offsets[cs] + 1 + alt];
				nfa_bp[nfa_len].p = p;
				nfa_bp[nfa_len].popTrans = cast(long)_match_any_nfa_offsets[cs] + 1 + alt;
				
				switch ( _match_any_nfa_push_actions[cast(int)_match_any_nfa_offsets[cs] + 1 + alt] ) {
					case 1 {
						host( "working/genrep4.rl", 54 ) ${
							nfa_bp[nfa_len].q_2 = q_2;
						}$
					}
				}
				nfa_len += 1;
				alt += 1;
			}
		}
		switch ( cs ) {
			case 1:
			{
				goto ctr0;
			}
			case 0:
			goto _out;
			case 2:
			if ( ( deref( data, p )) == u(97) ) {
				goto ctr1;
			}
			{
				goto ctr0;
			}
			case 3:
			{
				goto ctr0;
			}
			case 5:
			if ( ( deref( data, p )) == u(32) ) {
				goto ctr2;
			}
			{
				goto ctr0;
			}
			case 6:
			{
				goto ctr0;
			}
			case 7:
			if ( ( deref( data, p )) == u(97) ) {
				goto ctr3;
			}
			{
				goto ctr0;
			}
			case 8:
			{
				goto ctr0;
			}
			case 9:
			if ( ( deref( data, p )) == u(32) ) {
				goto ctr4;
			}
			{
				goto ctr0;
			}
			case 10:
			{
				int ck = 0;
				if ( host( "working/genrep4.rl", 49 ) ={ p+1 == eof }= ) ck += 1;
				if ( 1 <= ck )
				{		goto ctr5;
				}
				goto ctr6;
				
			}
			case 11:
			{
				goto ctr0;
			}
			case 4:
			{
				goto ctr0;
			}
		}
		
		ctr0: cs = 0; goto _again;
		ctr1: cs = 3; goto _again;
		ctr2: cs = 6; goto _again;
		ctr3: cs = 8; goto _again;
		ctr4: cs = 10; goto _again;
		ctr6: cs = 0; goto _again;
		ctr5: cs = 11; goto f8;
		
		f8:
		host( "working/genrep4.rl", 87 ) ${printf("----- MATCH\n");}$
		goto _again;
		
		_again:
		if ( cs == 0 )
		goto _out;
		p+= 1;
		if ( p != pe )
		goto _resume;
		_test_eof: {}
		_out: {}
		if ( nfa_len > 0 ) {
			int _cpc;
			nfa_count += 1;
			nfa_len -= 1;
			p = nfa_bp[nfa_len].p;
			int _pop_test = 1;
			switch ( _match_any_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
				case 5 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 68 ) ={
						({ 1; })
					}=;
					
				}
				case 6 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 72 ) ={
						({ ++q_2 < 3; })
					}=;
					
				}
				case 7 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 76 ) ={
						({ ++q_2 >= 2; })
					}=;
					
				}
				case 4 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_cpc = 0;
					if ( host( "working/genrep4.rl", 81 ) ={ ({printf("  marker\n");1;}) }= ) _cpc += 1;
					_pop_test = _cpc == 1;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 64 ) ={
						({  q_2 = 0; 1; })
					}=;
					
				}
				case 8 {
					_pop_test = host( "working/genrep4.rl", 59 ) ={ ({
							q_2 = nfa_bp[nfa_len].q_2;
							1;
						}) }=;
					if ( !_pop_test ) break;
					_cpc = 0;
					if ( host( "working/genrep4.rl", 81 ) ={ ({printf("  marker\n");1;}) }= ) _cpc += 1;
					_pop_test = _cpc == 1;
					if ( !_pop_test ) break;
					_pop_test = host( "working/genrep4.rl", 64 ) ={
						({  q_2 = 0; 1; })
					}=;
					
				}
			}
			if ( _pop_test ) {
				cs = nfa_bp[nfa_len].state;
				goto _resume;
			}
			goto _out;
		}
	}
	host( "working/genrep4.rl", 104 ) @{
		
		return 0;
	}
	
	int main()
	{
		test( "a " );
		test( "aa " );
		test( "aaa " );
		test( "aaaa " );
		
		test( "a a " );
		test( "aa aa " );
		test( "aaa aaa " );
		test( "aaaa aaaa " );
		
		test( "a a a " );
		test( "aa aa aa " );
		test( "aaa aaa aaa " );
		test( "aaaa aaaa aaaa " );
		
		test( "aa a " );
		test( "aa aaa " );
		test( "aa aaaa " );
		
		test( "aaa a " );
		test( "aaa aa " );
		test( "aaa aaaa " );
		
		return 0;
	}
	
}@