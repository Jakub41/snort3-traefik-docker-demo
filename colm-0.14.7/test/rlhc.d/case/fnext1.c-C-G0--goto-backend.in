host( "working/fnext1.rl", 1 ) @{/*
	* @@LANG: c
	* @@PROHIBIT_FEATFLAGS: --var-backend
	*
	* Tests fnext in combination with fbreak.
	*/
	
	#include <string.h>
	#include <stdio.h>
	
	char comm;
	int top;
	int stack [32];
	
	
	
	int cs;
	char *ts, *te;
	int act;
	
}@
array s8 _fnext_actions( 0, 8 ) = { 0, 1, 0, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 2, 1, 2, 2, 3, 4, 0 };

array s8 _fnext_to_state_actions( 0, 7 ) = { 0, 7, 7, 7, 0, 7, 0, 0, 0, 7, 0, 0 };

array s8 _fnext_from_state_actions( 0, 9 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0 };

array s8 _fnext_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _fnext_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _fnext_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _fnext_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int fnext_start = 1;
value int fnext_first_final = 6;
value int fnext_error = 0;

value int fnext_en_main = 1;
value int fnext_en_e = 2;
value int fnext_en_l = 3;
value int fnext_en_o = 9;
value int fnext_en_nl = 5;

host( "working/fnext1.rl", 31 ) @{
	
	void init()
	{
	}@
	{
		cs = cast(int)fnext_start;
		ts = nil;
		te = nil;
	}
	host( "working/fnext1.rl", 35 ) @{
	}
	
	void exec( char *data, int len )
	{
		char *p = data;
		char *pe = data + len;
		
		while ( cs != fnext_error && p < pe ) {
			printf( "%c\n", *p );
		}@
		{
			index s8 _acts;
			uint _nacts;
			
			if ( p == pe )
			goto _test_eof;
			if ( cs == 0 )
			goto _out;
			_resume:
			_acts = offset( _fnext_actions, _fnext_from_state_actions[cs] );
			_nacts = cast(uint)deref( _fnext_actions, _acts ); _acts += 1;
			while ( _nacts > 0 ) {
				switch ( deref( _fnext_actions, _acts ) ) {
					case 7{
						host( "NONE", 1 ) ${${ts = p;}$}$
					}
				}
				_acts += 1;
				_nacts -= 1;
			}
			
			switch ( cs ) {
				case 1:
				if ( ( deref( data, p )) == 104 ) {
					goto ctr0;
				}
				{
					goto ctr1;
				}
				case 0:
				goto _out;
				case 6:
				{
					goto ctr1;
				}
				case 2:
				if ( ( deref( data, p )) == 101 ) {
					goto ctr2;
				}
				{
					goto ctr1;
				}
				case 7:
				{
					goto ctr1;
				}
				case 3:
				if ( ( deref( data, p )) == 108 ) {
					goto ctr3;
				}
				{
					goto ctr1;
				}
				case 4:
				if ( ( deref( data, p )) == 108 ) {
					goto ctr4;
				}
				{
					goto ctr1;
				}
				case 8:
				{
					goto ctr1;
				}
				case 5:
				if ( ( deref( data, p )) == 10 ) {
					goto ctr5;
				}
				{
					goto ctr1;
				}
				case 10:
				{
					goto ctr1;
				}
				case 9:
				if ( ( deref( data, p )) == 111 ) {
					goto ctr6;
				}
				{
					goto ctr1;
				}
			}
			
			ctr1: cs = 0; goto _again;
			ctr3: cs = 4; goto f3;
			ctr0: cs = 6; goto f1;
			ctr2: cs = 7; goto f2;
			ctr4: cs = 8; goto f4;
			ctr6: cs = 9; goto f7;
			ctr5: cs = 10; goto f5;
			
			f1: _acts = offset( _fnext_actions, 1 ); goto execFuncs;
			f3: _acts = offset( _fnext_actions, 3 ); goto execFuncs;
			f5: _acts = offset( _fnext_actions, 5 ); goto execFuncs;
			f7: _acts = offset( _fnext_actions, 11 ); goto execFuncs;
			f2: _acts = offset( _fnext_actions, 13 ); goto execFuncs;
			f4: _acts = offset( _fnext_actions, 16 ); goto execFuncs;
			
			execFuncs:
			_nacts = cast(uint)deref( _fnext_actions, _acts );
			_acts += 1;
			while ( _nacts > 0 ) {
				switch ( deref( _fnext_actions, _acts ) ) {
					case 0{
						host( "working/fnext1.rl", 19 ) ${ /*h*/  cs = 2;${p += 1; goto _out; }$ }$
					}
					case 1{
						host( "working/fnext1.rl", 20 ) ${ /*e*/  cs = 3;}$
					}
					case 2{
						host( "working/fnext1.rl", 20 ) ${ ${p += 1; goto _out; }$ }$
					}
					case 3{
						host( "working/fnext1.rl", 21 ) ${ /*ll*/ cs = 9;}$
					}
					case 4{
						host( "working/fnext1.rl", 21 ) ${ ${p += 1; goto _out; }$ }$
					}
					case 5{
						host( "working/fnext1.rl", 23 ) ${ /*nl*/ ${p += 1; goto _out; }$ printf("ACCEPT\n"); }$
					}
					case 8{
						host( "working/fnext1.rl", 22 ) ${${te = p+1;host( "working/fnext1.rl", 22 ) ${ /*o*/  cs = 5;${p += 1; goto _out; }$ }$}$}$
					}
				}
				_acts += 1;
				_nacts -= 1;
			}
			
			goto _again;
			
			_again:
			_acts = offset( _fnext_actions, _fnext_to_state_actions[cs] );
			_nacts = cast(uint)deref( _fnext_actions, _acts ); _acts += 1;
			while ( _nacts > 0 ) {
				switch ( deref( _fnext_actions, _acts ) ) {
					case 6{
						host( "NONE", 1 ) ${${ts = nil;}$}$
					}
				}
				_acts += 1;
				_nacts -= 1;
			}
			
			if ( cs == 0 )
			goto _out;
			p += 1;
			if ( p != pe )
			goto _resume;
			_test_eof: {}
			_out: {}
		}
		host( "working/fnext1.rl", 45 ) @{
		}
	}
	
	void finish( )
	{
		if ( cs >= fnext_first_final )
		printf( "ACCEPT\n" );
		else
		printf( "FAIL\n" );
	}
	
	char *inp[] = {
		"hello\n"
	};
	
	int inplen = 1;
	
	int main( )
	{
		int i;
		for ( i = 0; i < inplen; i++ ) {
			init();
			exec( inp[i], strlen(inp[i]) );
			finish();
		}
		return 0;
	}
	
}@