host( "working/atoi4.rl", 1 ) @{(*
	* @@LANG: ocaml
	*)
	
	let id x = x
	let fail fmt = Printf.ksprintf failwith fmt
	let pr fmt = Printf.ksprintf print_endline fmt
	
	let failed fmt = Printf.ksprintf (fun s -> prerr_endline s; exit 1) fmt
	let test' show f x y = if f x <> y then failed "FAILED: test %S" (show x)
	let case = ref 0
	let test f x y = incr case; if f x <> y then failed "FAILED: case %d" !case
	let error f x = match try Some (f x) with _ -> None with Some _ -> failed "FAILED: fail %S" x | None -> ()
	
}@
array s8 _atoi_key_offsets( 0, 9 ) = { 0, 0, 4, 6, 9, 0 };

array int _atoi_trans_keys( 0, 57 ) = { 43, 45, 48, 57, 48, 57, 10, 48, 57, 0 };

array s8 _atoi_single_lengths( 0, 2 ) = { 0, 2, 0, 1, 0, 0 };

array s8 _atoi_range_lengths( 0, 1 ) = { 0, 1, 1, 1, 0, 0 };

array s8 _atoi_index_offsets( 0, 9 ) = { 0, 0, 4, 6, 9, 0 };

array s8 _atoi_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _atoi_trans_offsets( 0, 9 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };

array s8 _atoi_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _atoi_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _atoi_cond_targs( 0, 4 ) = { 2, 2, 3, 0, 3, 0, 4, 3, 0, 0, 0 };

array s8 _atoi_cond_actions( 0, 2 ) = { 0, 1, 2, 0, 2, 0, 0, 2, 0, 0, 0 };

array s8 _atoi_nfa_targs( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0 };

array s8 _atoi_nfa_push_actions( 0, 0 ) = { 0, 0 };

array s8 _atoi_nfa_pop_trans( 0, 0 ) = { 0, 0 };

value int atoi_start = 1;
value int atoi_first_final = 3;
value int atoi_error = 0;

value int atoi_en_main = 1;

host( "working/atoi4.rl", 18 ) @{
	
	let fail fmt = Printf.ksprintf failwith fmt
	
	let atoi data =
	let cs = ref 0 in
	let p = ref 0 in
	let pe = ref (String.length data) in
	let neg = ref false in
	let res = ref 0 in
	
}@
{
	cs = cast(int)atoi_start;
}

{
	int _klen;
	index int _keys;
	index s8 _ckeys;
	int _cpc;
	uint _trans;
	uint _cond = 0;
	uint _have = 0;
	uint _cont = 1;
	while ( _cont == 1 ) {
		
		if ( cs == 0 )
		_cont = 0;
		_have = 0;
		if ( p == pe ) {
			if ( _have == 0 )
			_cont = 0;
		}
		if ( _cont == 1 ) {
			if ( _have == 0 ) {
				_keys = offset( _atoi_trans_keys, _atoi_key_offsets[cs] );
				_trans = cast(uint)_atoi_index_offsets[cs];
				_have = 0;
				
				_klen = cast(int)_atoi_single_lengths[cs];
				if ( _klen > 0 ) {
					index int _lower;
					index int _mid;
					index int _upper;
					_lower = _keys;
					_upper = _keys + _klen - 1;
					while ( _upper >= _lower && _have == 0 ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( ( deref( data, p )) < deref( _atoi_trans_keys, _mid ) )
						_upper = _mid - 1;
						else if ( ( deref( data, p )) > deref( _atoi_trans_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_trans += cast(uint)(_mid - _keys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
				}
				
				if ( _have == 0 ) {
					_klen = cast(int)_atoi_range_lengths[cs];
					if ( _klen > 0 ) {
						index int _lower;
						index int _mid;
						index int _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( _have == 0 && _lower <= _upper ) {
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _atoi_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _atoi_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								_have = 1;
							}
						}
						if ( _have == 0 )
						_trans += cast(uint)_klen;
					}
				}
				
				_ckeys = offset( _atoi_cond_keys, _atoi_trans_offsets[_trans] );
				_klen = cast(int)_atoi_trans_lengths[_trans];
				_cond = cast(uint)_atoi_trans_offsets[_trans];
				_have = 0;
				
				_cpc = 0;
				{
					index s8 _lower;
					index s8 _mid;
					index s8 _upper;
					_lower = _ckeys;
					_upper = _ckeys + _klen - 1;
					while ( _have == 0 && _lower <= _upper ) {
						_mid = _lower + ((_upper-_lower) >> 1);
						if ( _cpc < cast(int)deref( _atoi_cond_keys, _mid ) )
						_upper = _mid - 1;
						else if ( _cpc > cast(int)deref( _atoi_cond_keys, _mid ) )
						_lower = _mid + 1;
						else {
							_cond += cast(uint)(_mid - _ckeys);
							_have = 1;
						}
					}
					if ( _have == 0 ) {
						cs = 0;
						_cont = 0;
					}
				}
			}
			if ( _cont == 1 ) {
				cs = cast(int)_atoi_cond_targs[_cond];
				
				switch ( _atoi_cond_actions[_cond] ) {
					case 1 {
						host( "working/atoi4.rl", 30 ) ${ neg := true; }$
					}
					case 2 {
						host( "working/atoi4.rl", 31 ) ${ res := !res * 10 + (={( deref( data, p ))}= - Char.code '0'); }$
					}
				}
				
				if ( cs == 0 )
				_cont = 0;
				if ( _cont == 1 )
				p += 1;
				
			}}
	}
}
host( "working/atoi4.rl", 40 ) @{
	
	if !neg then
	res := (-1) * !res ;
	
	print_int res.contents;
	print_string "\n";
	
	if !cs < atoi_first_final then
	fail "atoi: cs %d < %d" !cs atoi_first_final;
	
	!res 
	;;
	
	let () =
	let t = test atoi in
	t "7" 7;
	t "666" 666;
	t "-666" (-666);
	t "+666" 666;
	t "123456789" 123456789;
	t "+123456789\n" 123456789;
	error atoi "+ 1234567890";
	()
	;;
	
}@