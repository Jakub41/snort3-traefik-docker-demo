host( "working/curs1_java.rl", 1 ) @{/*
	* @@LANG: java
	* @@GENERATED: true
	*/
	
	
	class curs1_java
	{
		int return_to ;
		
		
		
		
		
	}@
	array s8 _curs1_actions( 0, 3 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 0 };
	
	array s8 _curs1_key_offsets( 0, 15 ) = { 0, 0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 15, 15, 0 };
	
	array char _curs1_trans_keys( 0, 119 ) = { u(10), u(49), u(50), u(117), u(110), u(117), u(115), u(101), u(100), u(111), u(110), u(101), u(116), u(119), u(111), u(0) };
	
	array s8 _curs1_single_lengths( 0, 3 ) = { 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
	
	array s8 _curs1_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _curs1_index_offsets( 0, 31 ) = { 0, 0, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 29, 30, 31, 0 };
	
	array s8 _curs1_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
	
	array s8 _curs1_trans_offsets( 0, 31 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 };
	
	array s8 _curs1_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
	
	array s8 _curs1_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _curs1_cond_targs( 0, 17 ) = { 14, 14, 14, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 15, 0, 9, 0, 10, 0, 16, 0, 12, 0, 13, 0, 17, 0, 0, 0, 0, 0, 0 };
	
	array s8 _curs1_cond_actions( 0, 7 ) = { 0, 5, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0 };
	
	array s8 _curs1_nfa_targs( 0, 0 ) = { 0, 0 };
	
	array s8 _curs1_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	
	array s8 _curs1_nfa_push_actions( 0, 0 ) = { 0, 0 };
	
	array s8 _curs1_nfa_pop_trans( 0, 0 ) = { 0, 0 };
	
	value int curs1_start = 1;
	value int curs1_first_final = 14;
	value int curs1_error = 0;
	
	value int curs1_en_unused = 2;
	value int curs1_en_one = 8;
	value int curs1_en_two = 11;
	value int curs1_en_main = 1;
	
	host( "working/curs1_java.rl", 33 ) @{
		int cs;
		
		void init()
		{
		}@
		{
			cs = cast(int)curs1_start;
		}
		host( "working/curs1_java.rl", 38 ) @{
		}
		
		void exec( char data[], int len )
		{
			char buffer [] = new char[1024];
			int blen = 0;
			int p = 0;
			int pe = len;
			
			String _s;
		}@
		{
			int _klen;
			int _ps;
			uint _trans = 0;
			uint _cond = 0;
			index s8 _acts;
			uint _nacts;
			index char _keys;
			index s8 _ckeys;
			int _cpc;
			entry {
				
				if ( p == pe )
				goto _test_eof;
				if ( cs == 0 )
				goto _out;
				label _resume {
					_keys = offset( _curs1_trans_keys, _curs1_key_offsets[cs] );
					_trans = cast(uint)_curs1_index_offsets[cs];
					
					_klen = cast(int)_curs1_single_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( ( deref( data, p )) < deref( _curs1_trans_keys, _mid ) )
							_upper = _mid - 1;
							else if ( ( deref( data, p )) > deref( _curs1_trans_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_trans += cast(uint)(_mid - _keys);
								goto _match;
							}
						}
						_keys += _klen;
						_trans += cast(uint)_klen;
					}
					
					_klen = cast(int)_curs1_range_lengths[cs];
					if ( _klen > 0 ) {
						index char _lower;
						index char _mid;
						index char _upper;
						_lower = _keys;
						_upper = _keys + (_klen<<1) - 2;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + (((_upper-_lower) >> 1) & ~1);
							if ( ( deref( data, p )) < deref( _curs1_trans_keys, _mid ) )
							_upper = _mid - 2;
							else if ( ( deref( data, p )) > deref( _curs1_trans_keys, _mid + 1 ) )
							_lower = _mid + 2;
							else {
								_trans += cast(uint)((_mid - _keys)>>1);
								goto _match;
							}
						}
						_trans += cast(uint)_klen;
					}
					
				}
				label _match {
					_ckeys = offset( _curs1_cond_keys, _curs1_trans_offsets[_trans] );
					_klen = cast(int)_curs1_trans_lengths[_trans];
					_cond = cast(uint)_curs1_trans_offsets[_trans];
					
					_cpc = 0;
					{
						index s8 _lower;
						index s8 _mid;
						index s8 _upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( TRUE ) {
							if ( _upper < _lower )
							break;
							
							_mid = _lower + ((_upper-_lower) >> 1);
							if ( _cpc < cast(int)deref( _curs1_cond_keys, _mid ) )
							_upper = _mid - 1;
							else if ( _cpc > cast(int)deref( _curs1_cond_keys, _mid ) )
							_lower = _mid + 1;
							else {
								_cond += cast(uint)(_mid - _ckeys);
								goto _match_cond;
							}
						}
						cs = 0;
						goto _again;
					}
				}
				label _match_cond {
					_ps = cs;
					cs = cast(int)_curs1_cond_targs[_cond];
					
					if ( _curs1_cond_actions[_cond] == 0 )
					goto _again;
					
					_acts = offset( _curs1_actions, _curs1_cond_actions[_cond] );
					_nacts = cast(uint)deref( _curs1_actions, _acts );
					_acts += 1;
					while ( _nacts > 0 )
					{
						switch ( deref( _curs1_actions, _acts ) )
						{
							case 0 {
								host( "working/curs1_java.rl", 16 ) ${System.out.print( "one\n" );
									${cs = host( "-", 1 ) ={return_to}=;}$}$
							}
							case 1 {
								host( "working/curs1_java.rl", 19 ) ${System.out.print( "two\n" );
									${cs = host( "-", 1 ) ={return_to}=;}$}$
							}
							case 2 {
								host( "working/curs1_java.rl", 23 ) ${return_to = ={_ps}=;
									${cs = 8;}$}$
							}
							case 3 {
								host( "working/curs1_java.rl", 25 ) ${return_to = ={_ps}=;
									${cs = 11;}$}$
							}
						}
						_nacts -= 1;
						_acts += 1;
					}
					
					
				}
				label _again {
					if ( cs == 0 )
					goto _out;
					p += 1;
					if ( p != pe )
					goto _resume;
				}
				label _test_eof { {}
				}
				label _out { {}
				}
			}
		}
		host( "working/curs1_java.rl", 49 ) @{
		}
		
		void finish( )
		{
			if ( cs >= curs1_first_final )
			System.out.println( "ACCEPT" );
			else
			System.out.println( "FAIL" );
		}
		
		static final String inp[] = {
			"1one2two1one\n",
		};
		
		static final int inplen = 1;
		
		public static void main (String[] args)
		{
			curs1_java machine = new curs1_java();
			for ( int i = 0; i < inplen; i++ ) {
				machine.init();
				machine.exec( inp[i].toCharArray(), inp[i].length() );
				machine.finish();
			}
		}
	}
}@