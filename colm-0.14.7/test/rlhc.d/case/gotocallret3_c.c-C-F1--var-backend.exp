#include <string.h>
#include <stdio.h>

char comm ;
int top ;
int stack [32];





static const char  _gotocallret_trans_keys [] = { 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 4, 5, 3, 3, 3, 5, 1, 0, 4, 5, 3, 3, 0 ,  };
static const char  _gotocallret_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0 ,  };
static const char  _gotocallret_index_offsets [] = { 0, 0, 1, 2, 3, 4, 6, 7, 10, 10, 12, 0 ,  };
static const char  _gotocallret_indices [] = { 1, 2, 4, 6, 8, 8, 9, 10, 0, 10, 8, 8, 9, 0 ,  };
static const char  _gotocallret_index_defaults [] = { 0, 0, 0, 3, 5, 7, 7, 0, 11, 7, 7, 0 ,  };
static const char  _gotocallret_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _gotocallret_cond_targs [] = { 0, 2, 7, 4, 8, 4, 8, 0, 9, 10, 1, 0, 0 ,  };
static const char  _gotocallret_cond_actions [] = { 1, 2, 3, 5, 6, 0, 7, 8, 0, 0, 9, 0, 0 ,  };
static const char  _gotocallret_eof_actions [] = { 0, 1, 1, 4, 4, 8, 8, 0, 4, 0, 0, 0 ,  };
static const char  _gotocallret_nfa_targs [] = { 0, 0 ,  };
static const char  _gotocallret_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _gotocallret_nfa_push_actions [] = { 0, 0 ,  };
static const char  _gotocallret_nfa_pop_trans [] = { 0, 0 ,  };
static const int  gotocallret_start  = 7;
static const int  gotocallret_first_final  = 7;
static const int  gotocallret_error  = 0;
static const int  gotocallret_en_garble_line  = 3;
static const int  gotocallret_en_alp_comm  = 5;
static const int  gotocallret_en_dig_comm  = 6;
static const int  gotocallret_en_main  = 7;
int cs;
int blen;
char buffer[1024];

void init()
{

	{
		cs = ( int ) gotocallret_start;
		top = 0;
	}
}

void exec( char *data, int len )
{
	char *p = data;
	char *pe = data + len;
	char *eof = pe;
	
	{
		unsigned int _trans = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		const char  *_keys;
		const char  *_inds;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( p == eof  )
				{
					if ( _have == 0  )
					{
						switch ( _gotocallret_eof_actions[cs] ) {
							case 4 :
							{
								printf( "%s", "error: failed to recover\n" );
								
							}
							
							break;
							case 8 :
							{
								{
									p = p - 1;
									
								}
								{
									top-= 1;
									cs = stack[top];
									
								}
								
							}
							
							break;
							case 1 :
							{
								{
									p = p - 1;
									
								}
								{
									cs = 3;
									
								}
								
							}
							
							break;
							
						}
					}
					
				}
				
				
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _gotocallret_trans_keys + (cs<<1);
					_inds = _gotocallret_indices + _gotocallret_index_offsets[cs];
					if ( ((*( p  ))
					)<= 122 && ((*( p  ))
					)>= 10  )
					{
						int _ic = ( int ) _gotocallret_char_class[( int ) ((*( p  ))
						)- 10];
						if ( _ic <= ( int ) (*( _keys+1  ))
						&& _ic >= ( int ) (*( _keys  ))
						)
						_trans = ( unsigned int  ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
						) ))
						;
						
						else
						_trans = ( unsigned int  ) _gotocallret_index_defaults[cs];
						
					}
					
					else
					{
						_trans = ( unsigned int  ) _gotocallret_index_defaults[cs];
					}
					
					
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _gotocallret_cond_targs[_trans];
					switch ( _gotocallret_cond_actions[_trans] ) {
						case 5 :
						{
							printf( "%s", "error: garbling line\n" );
							
						}
						
						break;
						case 7 :
						{
							{
								cs = 7;
								
							}
							
						}
						
						break;
						case 8 :
						{
							{
								p = p - 1;
								
							}
							{
								top-= 1;
								cs = stack[top];
								
							}
							
						}
						
						break;
						case 9 :
						{
							comm = (((*( p  ))
							));
							
						}
						
						break;
						case 3 :
						{
							printf( "%s", "correct command\n" );
							
						}
						
						break;
						case 1 :
						{
							{
								p = p - 1;
								
							}
							{
								cs = 3;
								
							}
							
						}
						
						break;
						case 6 :
						{
							printf( "%s", "error: garbling line\n" );
							
						}
						{
							{
								cs = 7;
								
							}
							
						}
						
						break;
						case 2 :
						{
							if ( comm >= 97 )
							{
								{
									stack[top] = cs;
									top += 1;
									cs = 5;
									
								}
							} 
							else {
								{
									stack[top] = cs;
									top += 1;
									cs = 6;
									
								}
							}
							
						}
						{
							printf( "%s", "prints\n" );
							
						}
						
						break;
						
					}
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
}

void finish( )
{
	if ( cs >= gotocallret_first_final )
	printf( "ACCEPT\n" );
	else
	printf( "FAIL\n" );
}

char *inp[] = {
	"lkajsdf\n",
	"2134\n",
	"(\n",
	"\n",
	"*234234()0909 092 -234aslkf09`1 11\n",
	"1\n",
	"909\n",
	"1 a\n",
	"11 1\n",
	"a 1\n",
	"aa a\n",
	"1 1\n",
	"1 123456\n",
	"a a\n",
	"a abcdef\n",
	"h",
	"a aa1",
};

int inplen = 17;

int main( )
{
	int i;
	for ( i = 0; i < inplen; i++ ) {
		init();
		exec( inp[i], strlen(inp[i]) );
		finish();
	}
	return 0;
}

