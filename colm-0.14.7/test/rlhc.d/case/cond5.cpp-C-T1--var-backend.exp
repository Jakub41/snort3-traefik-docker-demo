#include <iostream>
#include <string.h>
using std::cout;
using std::endl;

static const char  _foo_key_offsets [] = { 0, 0, 3, 6, 9, 0 ,  };
static const char  _foo_trans_keys [] = { 10, 48, 57, 10, 48, 57, 10, 48, 57, 0 ,  };
static const char  _foo_single_lengths [] = { 0, 1, 1, 1, 0, 0 ,  };
static const char  _foo_range_lengths [] = { 0, 1, 1, 1, 0, 0 ,  };
static const char  _foo_index_offsets [] = { 0, 0, 3, 6, 9, 0 ,  };
static const char  _foo_trans_cond_spaces [] = { -1, 2, -1, -1, 0, -1, -1, 1, -1, -1, 0 ,  };
static const char  _foo_trans_offsets [] = { 0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 0 ,  };
static const char  _foo_trans_lengths [] = { 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 0 ,  };
static const char  _foo_cond_keys [] = { 0, 1, 2, 3, 0, 0, 1, 0, 0, 1, 0, 0, 0 ,  };
static const char  _foo_cond_targs [] = { 4, 2, 3, 1, 0, 4, 2, 0, 4, 3, 0, 0, 0 ,  };
static const char  _foo_cond_actions [] = { 1, 2, 3, 4, 0, 5, 2, 0, 6, 3, 0, 0, 0 ,  };
static const char  _foo_nfa_targs [] = { 0, 0 ,  };
static const char  _foo_nfa_offsets [] = { 0, 0, 0, 0, 0, 0 ,  };
static const char  _foo_nfa_push_actions [] = { 0, 0 ,  };
static const char  _foo_nfa_pop_trans [] = { 0, 0 ,  };
static const int  foo_start  = 1;
static const int  foo_first_final  = 4;
static const int  foo_en_main  = 1;
void test( const char *str )
{
	int cs = foo_start;
	int c = 0;
	const char *p = str;
	const char *pe = str + strlen( str );
	char last = '0';
	
	cout << "run:";
	
	{
		int _klen;
		const char  *_keys;
		const char  *_ckeys;
		int _cpc;
		unsigned int _trans;
		unsigned int _cond = 0;
		unsigned int _have = 0;
		unsigned int _cont = 1;
		while ( _cont == 1  )
		{
		
			if ( cs == 0  )
			_cont = 0;
			
			_have = 0;
			if ( p == pe  )
			{
				if ( _have == 0  )
				_cont = 0;
				
			}
			
			if ( _cont == 1  )
			{
				if ( _have == 0  )
				{
					_keys = _foo_trans_keys + _foo_key_offsets[cs];
					_trans = ( unsigned int  ) _foo_index_offsets[cs];
					_have = 0;
					_klen = ( int ) _foo_single_lengths[cs];
					if ( _klen > 0  )
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _keys;
						_upper = _keys + _klen - 1;
						while ( _upper >= _lower && _have == 0  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( ((*( p  ))
							)< (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( ((*( p  ))
							)> (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_trans += ( unsigned int  ) (_mid - _keys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							_keys += _klen;
							_trans += ( unsigned int  ) _klen;
						}
						
					}
					
					
					if ( _have == 0  )
					{
						_klen = ( int ) _foo_range_lengths[cs];
						if ( _klen > 0  )
						{
							const char  *_lower;
							const char  *_mid;
							const char  *_upper;
							_lower = _keys;
							_upper = _keys + (_klen<<1)- 2;
							while ( _have == 0 && _lower <= _upper  )
							{
								_mid = _lower + (((_upper-_lower)>> 1)& ~1);
								if ( ((*( p  ))
								)< (*( _mid  ))
								)
								_upper = _mid - 2;
								
								else if ( ((*( p  ))
								)> (*( _mid + 1  ))
								)
								_lower = _mid + 2;
								
								else
								{
									_trans += ( unsigned int  ) ((_mid - _keys)>>1);
									_have = 1;
								}
								
							}
							
							if ( _have == 0  )
							_trans += ( unsigned int  ) _klen;
							
						}
						
					}
					
					
					_ckeys = _foo_cond_keys + _foo_trans_offsets[_trans];
					_klen = ( int ) _foo_trans_lengths[_trans];
					_cond = ( unsigned int  ) _foo_trans_offsets[_trans];
					_have = 0;
					_cpc = 0;
					switch ( _foo_trans_cond_spaces[_trans] ) {
						case 0 :
						if ( (c++ < 5) )
						_cpc += 1;
						
						
						break;
						case 1 :
						if ( (*p == last+1 ) )
						_cpc += 1;
						
						
						break;
						case 2 :
						if ( (c++ < 5) )
						_cpc += 1;
						
						if ( (*p == last+1 ) )
						_cpc += 2;
						
						
						break;
						
					}
					{
						const char  *_lower;
						const char  *_mid;
						const char  *_upper;
						_lower = _ckeys;
						_upper = _ckeys + _klen - 1;
						while ( _have == 0 && _lower <= _upper  )
						{
							_mid = _lower + ((_upper-_lower)>> 1);
							if ( _cpc < ( int ) (*( _mid  ))
							)
							_upper = _mid - 1;
							
							else if ( _cpc > ( int ) (*( _mid  ))
							)
							_lower = _mid + 1;
							
							else
							{
								_cond += ( unsigned int  ) (_mid - _ckeys);
								_have = 1;
							}
							
						}
						
						if ( _have == 0  )
						{
							cs = 0;
							_cont = 0;
						}
						
					}
				}
				
				if ( _cont == 1  )
				{
					cs = ( int ) _foo_cond_targs[_cond];
					switch ( _foo_cond_actions[_cond] ) {
						case 2 :
						{
							cout << " d1"; 
						}
						{
							cout << " |";
						}
						
						break;
						case 5 :
						{
							cout << " see_five"; 
						}
						{
							cout << " |";
						}
						
						break;
						case 6 :
						{
							cout << " in_sequence"; 
						}
						{
							cout << " |";
						}
						
						break;
						case 3 :
						{
							last = *p; cout << " d2"; 
						}
						{
							cout << " |";
						}
						
						break;
						case 4 :
						{
							cout << " d1"; 
						}
						{
							last = *p; cout << " d2"; 
						}
						{
							cout << " |";
						}
						
						break;
						case 1 :
						{
							cout << " see_five"; 
						}
						{
							cout << " in_sequence"; 
						}
						{
							cout << " |";
						}
						
						break;
						
					}
					if ( cs == 0  )
					_cont = 0;
					
					if ( _cont == 1  )
					p += 1;
					
				}
			}
			
		}
		
	}
	if ( cs < foo_first_final )
	cout << " failure";
	cout << endl;
}

int main()
{
	test( "123456789012\n" );  // fails both
	test( "123456789\n" );  // fails five
	test( "1234\n" );  // fails five
	test( "13245\n" );  // fails sequence
	test( "12345\n" );  // succeeds in both
	return 0;
}

