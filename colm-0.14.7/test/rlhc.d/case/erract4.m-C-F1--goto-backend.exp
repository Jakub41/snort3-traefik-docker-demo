#include <stdio.h>
#include <Foundation/Foundation.h>

#define IDENT_BUFLEN 256

@interface ErrAct : NSObject
{
	@public
	int cs;
};

// Initialize the machine. Invokes any init statement blocks. Returns 0
// if the machine begins in a non-accepting state and 1 if the machine
// begins in an accepting state.
- (int) initFsm;

// Execute the machine on a block of data. Returns -1 if after processing
// the data, the machine is in the error state and can never accept, 0 if
// the machine is in a non-accepting state and 1 if the machine is in an
// accepting state.
- (void) executeWithData:(const char *)data len:(int)len;

// Indicate that there is no more data. Returns -1 if the machine finishes
// in the error state and does not accept, 0 if the machine finishes
// in any other non-accepting state and 1 if the machine finishes in an
// accepting state.
- (int) finish;

@end

@implementation ErrAct



static const char  _ErrAct_trans_keys [] = { 0, 3, 0, 0, 0, 2, 0, 4, 0, 4, 0, 5, 0, 0, 0 ,  };
static const char  _ErrAct_char_class [] = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 4, 1, 1, 5, 0 ,  };
static const char  _ErrAct_index_offsets [] = { 0, 4, 5, 8, 13, 18, 24, 0 ,  };
static const char  _ErrAct_indices [] = { 1, 0, 0, 2, 4, 1, 0, 5, 1, 0, 0, 0, 6, 1, 0, 0, 0, 7, 1, 0, 0, 0, 0, 8, 9, 0 ,  };
static const char  _ErrAct_index_defaults [] = { 0, 3, 0, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_trans_cond_spaces [] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 ,  };
static const char  _ErrAct_cond_targs [] = { 1, 1, 2, 1, 1, 3, 4, 5, 6, 0, 0 ,  };
static const char  _ErrAct_cond_actions [] = { 1, 2, 0, 0, 3, 0, 0, 0, 0, 3, 0 ,  };
static const char  _ErrAct_eof_actions [] = { 0, 0, 1, 1, 1, 1, 1, 0 ,  };
static const char  _ErrAct_nfa_targs [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_offsets [] = { 0, 0, 0, 0, 0, 0, 0, 0 ,  };
static const char  _ErrAct_nfa_push_actions [] = { 0, 0 ,  };
static const char  _ErrAct_nfa_pop_trans [] = { 0, 0 ,  };
static const int  ErrAct_start  = 0;
static const int  ErrAct_first_final  = 0;
static const int  ErrAct_error  = -1;
static const int  ErrAct_en_main  = 0;
- (int) initFsm;
{

	{
		cs = ( int ) ErrAct_start;
	}
	return 1;
}

- (void) executeWithData:(const char *)_data len:(int)_len;
{
	const char *p = _data;
	const char *pe = _data + _len;
	const char *eof = pe;
	
	{
		int _trans = 0;
		const char  *_keys;
		const char  *_inds;
		if ( p == pe  )
		goto _test_eof;
		
		_resume :
		_keys = _ErrAct_trans_keys + (cs<<1);
		_inds = _ErrAct_indices + _ErrAct_index_offsets[cs];
		if ( ((*( p  ))
		)<= 111 && ((*( p  ))
		)>= 10  )
		{
			int _ic = ( int ) _ErrAct_char_class[( int ) ((*( p  ))
			)- 10];
			if ( _ic <= ( int ) (*( _keys+1  ))
			&& _ic >= ( int ) (*( _keys  ))
			)
			_trans = ( int ) (*( _inds + ( int ) (_ic - ( int ) (*( _keys  ))
			) ))
			;
			
			else
			_trans = ( int ) _ErrAct_index_defaults[cs];
			
		}
		
		else
		{
			_trans = ( int ) _ErrAct_index_defaults[cs];
		}
		
		
		goto _match_cond;
		
		_match_cond :
		cs = ( int ) _ErrAct_cond_targs[_trans];
		if ( _ErrAct_cond_actions[_trans]== 0  )
		goto _again;
		
		
		switch ( _ErrAct_cond_actions[_trans] ) {
			case 1 :
			{
				printf("hello fails\n");
			}
			
			break;
			case 3 :
			{
				printf("newline\n");
			}
			
			break;
			case 2 :
			{
				printf("newline\n");
			}
			{
				printf("hello fails\n");
			}
			
			break;
			
		}
		
		_again :
		p+= 1;
		if ( p != pe  )
		goto _resume;
		
		
		_test_eof :
		{}
		if ( p == eof  )
		{
			switch ( _ErrAct_eof_actions[cs] ) {
				case 1 :
				{
					printf("hello fails\n");
				}
				
				break;
				
			}
		}
		
		
		
	}
}

- (int) finish;
{
	if ( cs == ErrAct_error )
	return -1;
	else if ( cs >= ErrAct_first_final )
	return 1;
	return 0;
}

@end

#include <stdio.h>
#include <string.h>
#define BUFSIZE 2048

ErrAct *fsm;
char buf[BUFSIZE];

void test( char *buf )
{
	int len = strlen(buf);
	fsm = [[ErrAct alloc] init];
	
	[fsm initFsm];
	[fsm executeWithData:buf len:len];
	if ( [fsm finish] > 0 )
	printf("ACCEPT\n");
	else
	printf("FAIL\n");
}


int main()
{
	test(
	"hello\n"
	"hello\n"
	"hello\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"hello there\n"
	);
	
	test(
	"hello\n"
	"hello\n"
	"he"	);
	
	test( "" );
	
	return 0;
}

