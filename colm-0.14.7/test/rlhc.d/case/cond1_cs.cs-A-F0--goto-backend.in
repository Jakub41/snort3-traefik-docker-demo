host( "working/cond1_cs.rl", 1 ) @{/*
	* @@LANG: csharp
	* @@GENERATED: true
	*/
	
	using System;
	// Disables lots of warnings that appear in the test suite
	#pragma warning disable 0168, 0169, 0219, 0162, 0414
	namespace Test {
		class Test
		{
			int i;
			int j;
			int k;
			
			
			
			
		}@
		array s8 _foo_actions( 0, 6 ) = { 0, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 2, 0, 1, 2, 0, 2, 2, 1, 2, 3, 0, 1, 2, 0 };
		
		array char _foo_trans_keys( 0, 5 ) = { c(1), c(0), c(2), c(2), c(2), c(2), c(2), c(2), c(3), c(4), c(3), c(4), c(3), c(4), c(5), c(5), c(0), c(0), c(5), c(5), c(5), c(5), c(5), c(5), c(5), c(5), c(5), c(5), c(5), c(5), c(1), c(0), c(0) };
		
		array s8 _foo_char_class( 0, 5 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 4, 5, 0 };
		
		array s8 _foo_index_offsets( 0, 17 ) = { 0, 0, 1, 2, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0 };
		
		array s8 _foo_indices( 0, 16 ) = { 0, 2, 3, 4, 5, 6, 7, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 0 };
		
		array s8 _foo_index_defaults( 0, 1 ) = { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };
		
		array s8 _foo_trans_cond_spaces( -1, 5 ) = { -1, -1, -1, -1, -1, 1, -1, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, 0 };
		
		array s8 _foo_trans_offsets( 0, 27 ) = { 0, 1, 2, 3, 4, 5, 7, 8, 16, 20, 21, 22, 23, 24, 25, 26, 27, 0 };
		
		array s8 _foo_cond_targs( 0, 15 ) = { 2, 0, 3, 4, 5, 0, 7, 6, 0, 11, 7, 12, 9, 13, 10, 14, 0, 7, 9, 10, 8, 15, 8, 8, 8, 8, 8, 8, 0 };
		
		array s8 _foo_cond_actions( 0, 24 ) = { 7, 0, 9, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 13, 5, 21, 1, 15, 18, 24, 0 };
		
		array s8 _foo_nfa_targs( 0, 0 ) = { 0, 0 };
		
		array s8 _foo_nfa_offsets( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
		
		array s8 _foo_nfa_push_actions( 0, 0 ) = { 0, 0 };
		
		array s8 _foo_nfa_pop_trans( 0, 0 ) = { 0, 0 };
		
		value int foo_start = 1;
		value int foo_first_final = 15;
		value int foo_error = 0;
		
		value int foo_en_main = 1;
		
		host( "working/cond1_cs.rl", 73 ) @{
			int cs;
			
			void init()
			{
			}@
			{
				cs = cast(int)foo_start;
			}
			host( "working/cond1_cs.rl", 78 ) @{
			}
			
			void exec( char[] data, int len )
			{
				int p = 0;
				int pe = len;
				int eof = len;
				string _s;
				char [] buffer = new char [1024];
				int blen = 0;
			}@
			{
				int _trans = 0;
				uint _cond = 0;
				index s8 _acts;
				uint _nacts;
				index char _keys;
				index s8 _inds;
				int _cpc;
				int _nbreak;
				entry {
					
					if ( p == pe )
					goto _test_eof;
					if ( cs == 0 )
					goto _out;
					label _resume {
						_keys = offset( _foo_trans_keys, (cs<<1) );
						_inds = offset( _foo_indices, _foo_index_offsets[cs] );
						
						if ( ( deref( data, p )) <= 99 && ( deref( data, p )) >= 10 )
						{
							int _ic = cast(int)_foo_char_class[cast(int)( deref( data, p )) - 10];
							if ( _ic <= cast(int)deref( _foo_trans_keys, _keys+1 ) && _ic >= cast(int)deref( _foo_trans_keys, _keys ) )
							_trans = cast(int)deref( _foo_indices, _inds + cast(int)( _ic - cast(int)deref( _foo_trans_keys, _keys ) )  ); 
							else
							_trans = cast(int)_foo_index_defaults[cs];
						}
						else {
							_trans = cast(int)_foo_index_defaults[cs];
						}
						
						_cond = cast(uint)_foo_trans_offsets[_trans];
						
						_cpc = 0;
						switch ( _foo_trans_cond_spaces[_trans] ) {
							
							case 1 {
								if ( host( "working/cond1_cs.rl", 20 ) ={j != 0}= ) _cpc += 1;
							}
							case 4 {
								if ( host( "working/cond1_cs.rl", 20 ) ={j != 0}= ) _cpc += 1;
								if ( host( "working/cond1_cs.rl", 21 ) ={k != 0}= ) _cpc += 2;
							}
							case 5 {
								if ( host( "working/cond1_cs.rl", 19 ) ={i != 0}= ) _cpc += 1;
								if ( host( "working/cond1_cs.rl", 20 ) ={j != 0}= ) _cpc += 2;
								if ( host( "working/cond1_cs.rl", 21 ) ={k != 0}= ) _cpc += 4;
							}
						}
						_cond += cast(uint)_cpc;
						goto _match_cond;
					}
					label _match_cond {
						cs = cast(int)_foo_cond_targs[_cond];
						
						if ( _foo_cond_actions[_cond] == 0 )
						goto _again;
						
						_nbreak = 0;
						_acts = offset( _foo_actions, _foo_cond_actions[_cond] );
						_nacts = cast(uint)deref( _foo_actions, _acts );
						_acts += 1;
						while ( _nacts > 0 ) {
							switch ( deref( _foo_actions, _acts ) )
							{
								case 0 {
									host( "working/cond1_cs.rl", 22 ) ${Console.Write( "  one\n" );}$
								}
								case 1 {
									host( "working/cond1_cs.rl", 23 ) ${Console.Write( "  two\n" );}$
								}
								case 2 {
									host( "working/cond1_cs.rl", 24 ) ${Console.Write( "  three\n" );}$
								}
								case 3 {
									host( "working/cond1_cs.rl", 26 ) ${if ( ={( deref( data, p ))}= == 48 )
										{
											i = 0;
											
										} 
										else {
											i = 1;
											
										}
									}$
								}
								case 4 {
									host( "working/cond1_cs.rl", 36 ) ${if ( ={( deref( data, p ))}= == 48 )
										{
											j = 0;
											
										} 
										else {
											j = 1;
											
										}
									}$
								}
								case 5 {
									host( "working/cond1_cs.rl", 46 ) ${if ( ={( deref( data, p ))}= == 48 )
										{
											k = 0;
											
										} 
										else {
											k = 1;
											
										}
									}$
								}
								case 6 {
									host( "working/cond1_cs.rl", 57 ) ${${p += 1;  _nbreak = 1; }$}$
								}
							}
							_nacts -= 1;
							_acts += 1;
						}
						
						if ( _nbreak == 1 )
						goto _out;
						
					}
					label _again {
						if ( cs == 0 )
						goto _out;
						p += 1;
						if ( p != pe )
						goto _resume;
					}
					label _test_eof { {}
					}
					label _out { {}
					}
				}
			}
			host( "working/cond1_cs.rl", 89 ) @{
			}
			
			void finish( )
			{
				if ( cs >= foo_first_final )
				Console.WriteLine( "ACCEPT" );
				else
				Console.WriteLine( "FAIL" );
			}
			
			static readonly string[] inp = {
				"000abc\n",
				"100abc\n",
				"010abc\n",
				"110abc\n",
				"001abc\n",
				"101abc\n",
				"011abc\n",
				"111abc\n",
			};
			
			
			static readonly int inplen = 8;
			
			public static void Main (string[] args)
			{
				Test machine = new Test();
				for ( int i = 0; i < inplen; i++ ) {
					machine.init();
					machine.exec( inp[i].ToCharArray(), inp[i].Length );
					machine.finish();
				}
			}
		}
	}
}@