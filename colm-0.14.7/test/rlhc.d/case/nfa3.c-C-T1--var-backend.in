host( "working/nfa3.rl", 1 ) @{/*
	* @@LANG: c
	*/
	
	#include <stddef.h>
	#include <stdint.h>
	#include <stdlib.h> 
	#include <stdbool.h>
	#include <string.h>
	#include <stdio.h>
	
	const char s[4096];
	
	struct nfa_stack
	{
		void *data;
		unsigned long sz;
	};
	
	struct nfa_bp_rec
	{
		long state;
		const char *p;
		long popTrans;
		long q_2;
	};
	
	
	
}@
array s8 _atoi_key_offsets( 0, 3 ) = { 0, 0, 1, 1, 2, 2, 2, 3, 0 };

array char _atoi_trans_keys( 0, 97 ) = { 97, 46, 59, 0 };

array s8 _atoi_single_lengths( 0, 1 ) = { 0, 1, 0, 1, 0, 0, 1, 0, 0 };

array s8 _atoi_range_lengths( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _atoi_index_offsets( 0, 9 ) = { 0, 0, 2, 3, 5, 6, 7, 9, 0 };

array s8 _atoi_trans_cond_spaces( -1, 0 ) = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0 };

array s8 _atoi_trans_offsets( 0, 9 ) = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };

array s8 _atoi_trans_lengths( 0, 1 ) = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 };

array s8 _atoi_cond_keys( 0, 0 ) = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

array s8 _atoi_cond_targs( 0, 7 ) = { 2, 0, 0, 4, 0, 0, 0, 7, 0, 0, 0 };

array s8 _atoi_cond_actions( 0, 8 ) = { 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0 };

array s8 _atoi_nfa_targs( 0, 6 ) = { 0, 1, 3, 3, 6, 3, 5, 0 };

array s8 _atoi_nfa_offsets( 0, 3 ) = { 0, 0, 1, 0, 3, 0, 0, 0, 0 };

array s8 _atoi_nfa_push_actions( 0, 1 ) = { 0, 0, 1, 0, 1, 1, 1, 0 };

array s8 _atoi_nfa_pop_trans( 0, 7 ) = { 0, 0, 4, 0, 7, 6, 5, 0 };

value int atoi_start = 1;
value int atoi_first_final = 7;
value int atoi_error = 0;

value int atoi_en_main = 1;

host( "working/nfa3.rl", 55 ) @{
	
	int test( const char *p, bool a, bool b )
	{
		int len = strlen( p ) + 1;
		const char *pe = p + len;
		int cs;
		
		struct nfa_bp_rec *nfa_bp = (struct nfa_bp_rec*) s;
		long nfa_len = 0;
		long nfa_count = 0;
		
		long q_2 = 0;
		
		printf( "testing: %s %d %d\n", p, a, b );
		
	}@
	{
		cs = cast(int)atoi_start;
		nfa_len = 0;
	}
	
	{
		uint _nfa_cont = 1;
		uint _nfa_repeat = 1;
		while ( _nfa_cont != 0 )
		{
			int _klen;
			index char _keys;
			index s8 _ckeys;
			int _cpc;
			uint _trans;
			uint _cond = 0;
			uint _have = 0;
			uint _cont = 1;
			while ( _cont == 1 ) {
				
				if ( cs == 0 )
				_cont = 0;
				_have = 0;
				if ( p == pe ) {
					if ( _have == 0 )
					_cont = 0;
				}
				if ( _cont == 1 ) {
					if ( _have == 0 ) {
						if ( _atoi_nfa_offsets[cs] ) {
							int alt = 0; 
							int new_recs = _atoi_nfa_targs[cast(int)_atoi_nfa_offsets[cs]];
							while ( alt < new_recs ) { 
								nfa_bp[nfa_len].state = _atoi_nfa_targs[cast(int)_atoi_nfa_offsets[cs] + 1 + alt];
								nfa_bp[nfa_len].p = p;
								nfa_bp[nfa_len].popTrans = cast(long)_atoi_nfa_offsets[cs] + 1 + alt;
								
								switch ( _atoi_nfa_push_actions[cast(int)_atoi_nfa_offsets[cs] + 1 + alt] ) {
									case 1 {
										host( "working/nfa3.rl", 34 ) ${ nfa_bp[nfa_len].q_2 = q_2; }$
									}
								}
								nfa_len += 1;
								alt += 1;
							}
						}
						_keys = offset( _atoi_trans_keys, _atoi_key_offsets[cs] );
						_trans = cast(uint)_atoi_index_offsets[cs];
						_have = 0;
						
						_klen = cast(int)_atoi_single_lengths[cs];
						if ( _klen > 0 ) {
							index char _lower;
							index char _mid;
							index char _upper;
							_lower = _keys;
							_upper = _keys + _klen - 1;
							while ( _upper >= _lower && _have == 0 ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( ( deref( data, p )) < deref( _atoi_trans_keys, _mid ) )
								_upper = _mid - 1;
								else if ( ( deref( data, p )) > deref( _atoi_trans_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_trans += cast(uint)(_mid - _keys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								_keys += _klen;
								_trans += cast(uint)_klen;
							}
						}
						
						if ( _have == 0 ) {
							_klen = cast(int)_atoi_range_lengths[cs];
							if ( _klen > 0 ) {
								index char _lower;
								index char _mid;
								index char _upper;
								_lower = _keys;
								_upper = _keys + (_klen<<1) - 2;
								while ( _have == 0 && _lower <= _upper ) {
									_mid = _lower + (((_upper-_lower) >> 1) & ~1);
									if ( ( deref( data, p )) < deref( _atoi_trans_keys, _mid ) )
									_upper = _mid - 2;
									else if ( ( deref( data, p )) > deref( _atoi_trans_keys, _mid + 1 ) )
									_lower = _mid + 2;
									else {
										_trans += cast(uint)((_mid - _keys)>>1);
										_have = 1;
									}
								}
								if ( _have == 0 )
								_trans += cast(uint)_klen;
							}
						}
						
						_ckeys = offset( _atoi_cond_keys, _atoi_trans_offsets[_trans] );
						_klen = cast(int)_atoi_trans_lengths[_trans];
						_cond = cast(uint)_atoi_trans_offsets[_trans];
						_have = 0;
						
						_cpc = 0;
						switch ( _atoi_trans_cond_spaces[_trans] ) {
							
							case 0 {
								if ( host( "working/nfa3.rl", 31 ) ={a}= ) _cpc += 1;
							}
							case 1 {
								if ( host( "working/nfa3.rl", 31 ) ={a}= ) _cpc += 1;
								if ( host( "working/nfa3.rl", 32 ) ={b}= ) _cpc += 2;
							}
						}
						{
							index s8 _lower;
							index s8 _mid;
							index s8 _upper;
							_lower = _ckeys;
							_upper = _ckeys + _klen - 1;
							while ( _have == 0 && _lower <= _upper ) {
								_mid = _lower + ((_upper-_lower) >> 1);
								if ( _cpc < cast(int)deref( _atoi_cond_keys, _mid ) )
								_upper = _mid - 1;
								else if ( _cpc > cast(int)deref( _atoi_cond_keys, _mid ) )
								_lower = _mid + 1;
								else {
									_cond += cast(uint)(_mid - _ckeys);
									_have = 1;
								}
							}
							if ( _have == 0 ) {
								cs = 0;
								_cont = 0;
							}
						}
					}
					if ( _cont == 1 ) {
						cs = cast(int)_atoi_cond_targs[_cond];
						
						switch ( _atoi_cond_actions[_cond] ) {
							case 8 {
								host( "working/nfa3.rl", 51 ) ${ printf( " --> MATCH\n" ); }$
							}
						}
						
						if ( cs == 0 )
						_cont = 0;
						if ( _cont == 1 )
						p += 1;
						
					}}
			}
			_nfa_repeat = 1;
			while ( _nfa_repeat ) {
				_nfa_repeat = 0;
				if ( nfa_len > 0 ) {
					int _pop_test = 1;
					nfa_count += 1;
					nfa_len -= 1;
					p = nfa_bp[nfa_len].p;
					switch ( _atoi_nfa_pop_trans[nfa_bp[nfa_len].popTrans] ) {
						case 5 {
							_pop_test = host( "working/nfa3.rl", 35 ) ={ ({ q_2 = nfa_bp[nfa_len].q_2; 1; }) }=;
							if ( !_pop_test ) break;
							_pop_test = host( "working/nfa3.rl", 37 ) ={ ({ 1; }) }=;
							
						}
						case 6 {
							_pop_test = host( "working/nfa3.rl", 35 ) ={ ({ q_2 = nfa_bp[nfa_len].q_2; 1; }) }=;
							if ( !_pop_test ) break;
							_pop_test = host( "working/nfa3.rl", 38 ) ={ ({ ++q_2 < 2; }) }=;
							
						}
						case 7 {
							_pop_test = host( "working/nfa3.rl", 35 ) ={ ({ q_2 = nfa_bp[nfa_len].q_2; 1; }) }=;
							if ( !_pop_test ) break;
							_pop_test = host( "working/nfa3.rl", 39 ) ={ ({ ++q_2 >= 2; }) }=;
							
						}
						case 4 {
							_pop_test = host( "working/nfa3.rl", 35 ) ={ ({ q_2 = nfa_bp[nfa_len].q_2; 1; }) }=;
							if ( !_pop_test ) break;
							_cpc = 0;
							if ( host( "working/nfa3.rl", 31 ) ={a}= ) _cpc += 1;
							if ( host( "working/nfa3.rl", 32 ) ={b}= ) _cpc += 2;
							_pop_test = _cpc == 1 || _cpc == 3;
							if ( !_pop_test ) break;
							_pop_test = host( "working/nfa3.rl", 36 ) ={ ({  q_2 = 0; 1; }) }=;
							
						}
					}
					if ( _pop_test ) {
						cs = nfa_bp[nfa_len].state;
						_nfa_cont = 1;
						_nfa_repeat = 0;
					}
					else {
						_nfa_cont = 0;
						_nfa_repeat = 1;
					}
				}
				else {
					_nfa_cont = 0;
					_nfa_repeat = 0;
				}
			}
		}
	}
	host( "working/nfa3.rl", 73 ) @{
		
		return 0;
	}
	
	int main()
	{
		test( "a.;", 0, 0 );
		test( "a.;", 0, 1 );
		test( "a.;", 1, 0 );
		test( "a.;", 1, 1 );
		test( "a..;", 0, 0 );
		test( "a..;", 0, 1 );
		test( "a..;", 1, 0 );
		test( "a..;", 1, 1 );
		test( "a...;", 0, 0 );
		test( "a...;", 0, 1 );
		test( "a...;", 1, 0 );
		test( "a...;", 1, 1 );
		return 0;
	}
	
}@